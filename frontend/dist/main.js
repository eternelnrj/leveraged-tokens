(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
module.exports={
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_parentAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "1": "/home/alex/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/token/ERC20/ERC20.sol",
    "2": "/home/alex/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/token/ERC20/IERC20.sol",
    "3": "/home/alex/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/token/ERC20/extensions/ERC20Burnable.sol",
    "4": "/home/alex/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/token/ERC20/extensions/IERC20Metadata.sol",
    "5": "/home/alex/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/utils/Context.sol",
    "8": "contracts/LeveragedTrading.sol"
  },
  "ast": {
    "absolutePath": "contracts/LeveragedTrading.sol",
    "exportedSymbols": {
      "AggregatorV3Interface": [
        1914
      ],
      "BTCDOWN": [
        178
      ],
      "BTCUP": [
        108
      ],
      "Context": [
        1935
      ],
      "ERC20": [
        1494
      ],
      "ERC20Burnable": [
        1556
      ],
      "IERC20": [
        38
      ],
      "LeveragedTrading": [
        844
      ],
      "Ownable": [
        948
      ],
      "SafeMath": [
        1868
      ]
    },
    "id": 845,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:8"
      },
      {
        "absolutePath": "/home/alex/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/token/ERC20/ERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        "id": 3,
        "nodeType": "ImportDirective",
        "scope": 845,
        "sourceUnit": 1495,
        "src": "57:69:8",
        "symbolAliases": [
          {
            "foreign": {
              "id": 2,
              "name": "ERC20",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "src": "66:5:8",
              "typeDescriptions": {}
            }
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/alex/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/token/ERC20/extensions/ERC20Burnable.sol",
        "file": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
        "id": 5,
        "nodeType": "ImportDirective",
        "scope": 845,
        "sourceUnit": 1557,
        "src": "127:96:8",
        "symbolAliases": [
          {
            "foreign": {
              "id": 4,
              "name": "ERC20Burnable",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "src": "136:13:8",
              "typeDescriptions": {}
            }
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/alex/.brownie/packages/smartcontractkit/chainlink@1.3.0/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol",
        "file": "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol",
        "id": 6,
        "nodeType": "ImportDirective",
        "scope": 845,
        "sourceUnit": 1915,
        "src": "224:76:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/alex/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/utils/math/SafeMath.sol",
        "file": "@openzeppelin/contracts/utils/math/SafeMath.sol",
        "id": 7,
        "nodeType": "ImportDirective",
        "scope": 845,
        "sourceUnit": 1869,
        "src": "301:57:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/alex/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/access/Ownable.sol",
        "file": "@openzeppelin/contracts/access/Ownable.sol",
        "id": 8,
        "nodeType": "ImportDirective",
        "scope": 845,
        "sourceUnit": 949,
        "src": "359:52:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "id": 38,
        "linearizedBaseContracts": [
          38
        ],
        "name": "IERC20",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "functionSelector": "a9059cbb",
            "id": 17,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "transfer",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nodeType": "VariableDeclaration",
                  "scope": 17,
                  "src": "455:17:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 9,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "455:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 17,
                  "src": "474:14:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 11,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "474:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "454:35:8"
            },
            "returnParameters": {
              "id": 16,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 15,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 17,
                  "src": "508:4:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 14,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "508:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "507:6:8"
            },
            "scope": 38,
            "src": "437:77:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "functionSelector": "23b872dd",
            "id": 28,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "transferFrom",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 24,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19,
                  "mutability": "mutable",
                  "name": "sender",
                  "nodeType": "VariableDeclaration",
                  "scope": 28,
                  "src": "541:14:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 18,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "541:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 21,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nodeType": "VariableDeclaration",
                  "scope": 28,
                  "src": "557:17:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 20,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "557:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 23,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 28,
                  "src": "576:14:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 22,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "576:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "540:51:8"
            },
            "returnParameters": {
              "id": 27,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 28,
                  "src": "610:4:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 25,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "610:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "609:6:8"
            },
            "scope": 38,
            "src": "519:97:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "functionSelector": "095ea7b3",
            "id": 37,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "approve",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 33,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 30,
                  "mutability": "mutable",
                  "name": "spender",
                  "nodeType": "VariableDeclaration",
                  "scope": 37,
                  "src": "638:15:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 29,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "638:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 32,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 37,
                  "src": "655:14:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 31,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "655:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "637:33:8"
            },
            "returnParameters": {
              "id": 36,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 35,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 37,
                  "src": "689:4:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 34,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "689:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "688:6:8"
            },
            "scope": 38,
            "src": "621:74:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 845,
        "src": "414:283:8"
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 39,
              "name": "ERC20",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1494,
              "src": "719:5:8"
            },
            "id": 40,
            "nodeType": "InheritanceSpecifier",
            "src": "719:5:8"
          },
          {
            "baseName": {
              "id": 41,
              "name": "ERC20Burnable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1556,
              "src": "726:13:8"
            },
            "id": 42,
            "nodeType": "InheritanceSpecifier",
            "src": "726:13:8"
          }
        ],
        "contractDependencies": [
          1494,
          1556,
          1935,
          2013,
          2038
        ],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 108,
        "linearizedBaseContracts": [
          108,
          1556,
          1494,
          2038,
          2013,
          1935
        ],
        "name": "BTCUP",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 44,
            "mutability": "mutable",
            "name": "parentAddress",
            "nodeType": "VariableDeclaration",
            "scope": 108,
            "src": "746:21:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 43,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "746:7:8",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 57,
              "nodeType": "Block",
              "src": "839:47:8",
              "statements": [
                {
                  "expression": {
                    "id": 55,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 53,
                      "name": "parentAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 44,
                      "src": "849:13:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 54,
                      "name": "_parentAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 46,
                      "src": "865:14:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "849:30:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 56,
                  "nodeType": "ExpressionStatement",
                  "src": "849:30:8"
                }
              ]
            },
            "id": 58,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "426974636f696e205570",
                    "id": 49,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "816:12:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_9cbc1d0721872492c3eae100dd6a7dad3b4b199dc4e72a46010b2b1c98a11964",
                      "typeString": "literal_string \"Bitcoin Up\""
                    },
                    "value": "Bitcoin Up"
                  },
                  {
                    "hexValue": "4254435550",
                    "id": 50,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "830:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_f92903022a172a42cae03bdc1621474c2ab6bc2b8980d8251e05283c61f8c975",
                      "typeString": "literal_string \"BTCUP\""
                    },
                    "value": "BTCUP"
                  }
                ],
                "id": 51,
                "modifierName": {
                  "id": 48,
                  "name": "ERC20",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 1494,
                  "src": "810:5:8"
                },
                "nodeType": "ModifierInvocation",
                "src": "810:28:8"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 47,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 46,
                  "mutability": "mutable",
                  "name": "_parentAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 58,
                  "src": "786:22:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 45,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "786:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "785:24:8"
            },
            "returnParameters": {
              "id": 52,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "839:0:8"
            },
            "scope": 108,
            "src": "774:112:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 71,
              "nodeType": "Block",
              "src": "942:43:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 66,
                          "name": "tx",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -26,
                          "src": "958:2:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_transaction",
                            "typeString": "tx"
                          }
                        },
                        "id": 67,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "origin",
                        "nodeType": "MemberAccess",
                        "src": "958:9:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 68,
                        "name": "quantity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60,
                        "src": "969:8:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 65,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1354,
                      "src": "952:5:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 69,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "952:26:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 70,
                  "nodeType": "ExpressionStatement",
                  "src": "952:26:8"
                }
              ]
            },
            "functionSelector": "a0712d68",
            "id": 72,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 63,
                "modifierName": {
                  "id": 62,
                  "name": "onlyParent",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 107,
                  "src": "931:10:8"
                },
                "nodeType": "ModifierInvocation",
                "src": "931:10:8"
              }
            ],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 61,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60,
                  "mutability": "mutable",
                  "name": "quantity",
                  "nodeType": "VariableDeclaration",
                  "scope": 72,
                  "src": "906:16:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 59,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "906:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "905:18:8"
            },
            "returnParameters": {
              "id": 64,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "942:0:8"
            },
            "scope": 108,
            "src": "892:93:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1516
            ],
            "body": {
              "id": 86,
              "nodeType": "Block",
              "src": "1050:46:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 81,
                          "name": "tx",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -26,
                          "src": "1069:2:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_transaction",
                            "typeString": "tx"
                          }
                        },
                        "id": 82,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "origin",
                        "nodeType": "MemberAccess",
                        "src": "1069:9:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 83,
                        "name": "quantity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 74,
                        "src": "1080:8:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 80,
                      "name": "burnFrom",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1555,
                      "src": "1060:8:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 84,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1060:29:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 85,
                  "nodeType": "ExpressionStatement",
                  "src": "1060:29:8"
                }
              ]
            },
            "functionSelector": "42966c68",
            "id": 87,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 78,
                "modifierName": {
                  "id": 77,
                  "name": "onlyParent",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 107,
                  "src": "1039:10:8"
                },
                "nodeType": "ModifierInvocation",
                "src": "1039:10:8"
              }
            ],
            "name": "burn",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 76,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1030:8:8"
            },
            "parameters": {
              "id": 75,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 74,
                  "mutability": "mutable",
                  "name": "quantity",
                  "nodeType": "VariableDeclaration",
                  "scope": 87,
                  "src": "1005:16:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 73,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1005:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1004:18:8"
            },
            "returnParameters": {
              "id": 79,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1050:0:8"
            },
            "scope": 108,
            "src": "991:105:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1023
            ],
            "body": {
              "id": 95,
              "nodeType": "Block",
              "src": "1159:25:8",
              "statements": [
                {
                  "expression": {
                    "hexValue": "36",
                    "id": 93,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1176:1:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_6_by_1",
                      "typeString": "int_const 6"
                    },
                    "value": "6"
                  },
                  "functionReturnParameters": 92,
                  "id": 94,
                  "nodeType": "Return",
                  "src": "1169:8:8"
                }
              ]
            },
            "functionSelector": "313ce567",
            "id": 96,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "decimals",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 89,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1134:8:8"
            },
            "parameters": {
              "id": 88,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1119:2:8"
            },
            "returnParameters": {
              "id": 92,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 91,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 96,
                  "src": "1152:5:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 90,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "1152:5:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1151:7:8"
            },
            "scope": 108,
            "src": "1102:82:8",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 106,
              "nodeType": "Block",
              "src": "1210:64:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 102,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 99,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1228:3:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 100,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "1228:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 101,
                          "name": "parentAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 44,
                          "src": "1242:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1228:27:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 98,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1220:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 103,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1220:36:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 104,
                  "nodeType": "ExpressionStatement",
                  "src": "1220:36:8"
                },
                {
                  "id": 105,
                  "nodeType": "PlaceholderStatement",
                  "src": "1266:1:8"
                }
              ]
            },
            "id": 107,
            "name": "onlyParent",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 97,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1210:0:8"
            },
            "src": "1190:84:8",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 845,
        "src": "700:576:8"
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 109,
              "name": "ERC20",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1494,
              "src": "1299:5:8"
            },
            "id": 110,
            "nodeType": "InheritanceSpecifier",
            "src": "1299:5:8"
          },
          {
            "baseName": {
              "id": 111,
              "name": "ERC20Burnable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1556,
              "src": "1306:13:8"
            },
            "id": 112,
            "nodeType": "InheritanceSpecifier",
            "src": "1306:13:8"
          }
        ],
        "contractDependencies": [
          1494,
          1556,
          1935,
          2013,
          2038
        ],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 178,
        "linearizedBaseContracts": [
          178,
          1556,
          1494,
          2038,
          2013,
          1935
        ],
        "name": "BTCDOWN",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 114,
            "mutability": "mutable",
            "name": "parentAddress",
            "nodeType": "VariableDeclaration",
            "scope": 178,
            "src": "1326:21:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 113,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1326:7:8",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 127,
              "nodeType": "Block",
              "src": "1423:47:8",
              "statements": [
                {
                  "expression": {
                    "id": 125,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 123,
                      "name": "parentAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 114,
                      "src": "1433:13:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 124,
                      "name": "_parentAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 116,
                      "src": "1449:14:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "1433:30:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 126,
                  "nodeType": "ExpressionStatement",
                  "src": "1433:30:8"
                }
              ]
            },
            "id": 128,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "426974636f696e20446f776e",
                    "id": 119,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1396:14:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_165fe89d7acd7320260d3007f731660e2a452d2e9dbef2c2e44ee15c6b8bc1ec",
                      "typeString": "literal_string \"Bitcoin Down\""
                    },
                    "value": "Bitcoin Down"
                  },
                  {
                    "hexValue": "425443444f574e",
                    "id": 120,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1412:9:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_72f3d7098f717fcc170dbb6c7dad0b9049f1ed825e03177180edf7a0240d28f2",
                      "typeString": "literal_string \"BTCDOWN\""
                    },
                    "value": "BTCDOWN"
                  }
                ],
                "id": 121,
                "modifierName": {
                  "id": 118,
                  "name": "ERC20",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 1494,
                  "src": "1390:5:8"
                },
                "nodeType": "ModifierInvocation",
                "src": "1390:32:8"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 117,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 116,
                  "mutability": "mutable",
                  "name": "_parentAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 128,
                  "src": "1366:22:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 115,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1366:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1365:24:8"
            },
            "returnParameters": {
              "id": 122,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1423:0:8"
            },
            "scope": 178,
            "src": "1354:116:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 141,
              "nodeType": "Block",
              "src": "1526:43:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 136,
                          "name": "tx",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -26,
                          "src": "1542:2:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_transaction",
                            "typeString": "tx"
                          }
                        },
                        "id": 137,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "origin",
                        "nodeType": "MemberAccess",
                        "src": "1542:9:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 138,
                        "name": "quantity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 130,
                        "src": "1553:8:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 135,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1354,
                      "src": "1536:5:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 139,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1536:26:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 140,
                  "nodeType": "ExpressionStatement",
                  "src": "1536:26:8"
                }
              ]
            },
            "functionSelector": "a0712d68",
            "id": 142,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 133,
                "modifierName": {
                  "id": 132,
                  "name": "onlyParent",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 177,
                  "src": "1515:10:8"
                },
                "nodeType": "ModifierInvocation",
                "src": "1515:10:8"
              }
            ],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 131,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 130,
                  "mutability": "mutable",
                  "name": "quantity",
                  "nodeType": "VariableDeclaration",
                  "scope": 142,
                  "src": "1490:16:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 129,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1490:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1489:18:8"
            },
            "returnParameters": {
              "id": 134,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1526:0:8"
            },
            "scope": 178,
            "src": "1476:93:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1516
            ],
            "body": {
              "id": 156,
              "nodeType": "Block",
              "src": "1634:46:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 151,
                          "name": "tx",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -26,
                          "src": "1653:2:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_transaction",
                            "typeString": "tx"
                          }
                        },
                        "id": 152,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "origin",
                        "nodeType": "MemberAccess",
                        "src": "1653:9:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 153,
                        "name": "quantity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 144,
                        "src": "1664:8:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 150,
                      "name": "burnFrom",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1555,
                      "src": "1644:8:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 154,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1644:29:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 155,
                  "nodeType": "ExpressionStatement",
                  "src": "1644:29:8"
                }
              ]
            },
            "functionSelector": "42966c68",
            "id": 157,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 148,
                "modifierName": {
                  "id": 147,
                  "name": "onlyParent",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 177,
                  "src": "1623:10:8"
                },
                "nodeType": "ModifierInvocation",
                "src": "1623:10:8"
              }
            ],
            "name": "burn",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 146,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1614:8:8"
            },
            "parameters": {
              "id": 145,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 144,
                  "mutability": "mutable",
                  "name": "quantity",
                  "nodeType": "VariableDeclaration",
                  "scope": 157,
                  "src": "1589:16:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 143,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1589:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1588:18:8"
            },
            "returnParameters": {
              "id": 149,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1634:0:8"
            },
            "scope": 178,
            "src": "1575:105:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1023
            ],
            "body": {
              "id": 165,
              "nodeType": "Block",
              "src": "1743:25:8",
              "statements": [
                {
                  "expression": {
                    "hexValue": "36",
                    "id": 163,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1760:1:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_6_by_1",
                      "typeString": "int_const 6"
                    },
                    "value": "6"
                  },
                  "functionReturnParameters": 162,
                  "id": 164,
                  "nodeType": "Return",
                  "src": "1753:8:8"
                }
              ]
            },
            "functionSelector": "313ce567",
            "id": 166,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "decimals",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 159,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1718:8:8"
            },
            "parameters": {
              "id": 158,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1703:2:8"
            },
            "returnParameters": {
              "id": 162,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 161,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 166,
                  "src": "1736:5:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 160,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "1736:5:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1735:7:8"
            },
            "scope": 178,
            "src": "1686:82:8",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 176,
              "nodeType": "Block",
              "src": "1794:64:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 172,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 169,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1812:3:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 170,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "1812:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 171,
                          "name": "parentAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 114,
                          "src": "1826:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1812:27:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 168,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1804:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 173,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1804:36:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 174,
                  "nodeType": "ExpressionStatement",
                  "src": "1804:36:8"
                },
                {
                  "id": 175,
                  "nodeType": "PlaceholderStatement",
                  "src": "1850:1:8"
                }
              ]
            },
            "id": 177,
            "name": "onlyParent",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 167,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1794:0:8"
            },
            "src": "1774:84:8",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 845,
        "src": "1279:581:8"
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 179,
              "name": "Ownable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 948,
              "src": "1892:7:8"
            },
            "id": 180,
            "nodeType": "InheritanceSpecifier",
            "src": "1892:7:8"
          }
        ],
        "contractDependencies": [
          108,
          178,
          948,
          1935
        ],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 844,
        "linearizedBaseContracts": [
          844,
          948,
          1935
        ],
        "name": "LeveragedTrading",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 183,
            "libraryName": {
              "id": 181,
              "name": "SafeMath",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1868,
              "src": "1912:8:8"
            },
            "nodeType": "UsingForDirective",
            "src": "1906:27:8",
            "typeName": {
              "id": 182,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1925:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "constant": false,
            "functionSelector": "f0156e8a",
            "id": 188,
            "mutability": "mutable",
            "name": "priceBtcUp",
            "nodeType": "VariableDeclaration",
            "scope": 844,
            "src": "1939:35:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 184,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1939:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "commonType": {
                "typeIdentifier": "t_rational_1000000_by_1",
                "typeString": "int_const 1000000"
              },
              "id": 187,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "lValueRequested": false,
              "leftExpression": {
                "hexValue": "3130",
                "id": 185,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "1967:2:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_10_by_1",
                  "typeString": "int_const 10"
                },
                "value": "10"
              },
              "nodeType": "BinaryOperation",
              "operator": "**",
              "rightExpression": {
                "hexValue": "36",
                "id": 186,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "1973:1:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_6_by_1",
                  "typeString": "int_const 6"
                },
                "value": "6"
              },
              "src": "1967:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1000000_by_1",
                "typeString": "int_const 1000000"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "0c3e5343",
            "id": 193,
            "mutability": "mutable",
            "name": "priceBtcDown",
            "nodeType": "VariableDeclaration",
            "scope": 844,
            "src": "1980:37:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 189,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1980:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "commonType": {
                "typeIdentifier": "t_rational_1000000_by_1",
                "typeString": "int_const 1000000"
              },
              "id": 192,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "lValueRequested": false,
              "leftExpression": {
                "hexValue": "3130",
                "id": 190,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "2010:2:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_10_by_1",
                  "typeString": "int_const 10"
                },
                "value": "10"
              },
              "nodeType": "BinaryOperation",
              "operator": "**",
              "rightExpression": {
                "hexValue": "36",
                "id": 191,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "2016:1:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_6_by_1",
                  "typeString": "int_const 6"
                },
                "value": "6"
              },
              "src": "2010:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1000000_by_1",
                "typeString": "int_const 1000000"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "dde7be2c",
            "id": 196,
            "mutability": "mutable",
            "name": "collateralBtcUp",
            "nodeType": "VariableDeclaration",
            "scope": 844,
            "src": "2045:34:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 194,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "2045:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "30",
              "id": 195,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "2078:1:8",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_0_by_1",
                "typeString": "int_const 0"
              },
              "value": "0"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "14d7c6d2",
            "id": 199,
            "mutability": "mutable",
            "name": "collateralBtcDown",
            "nodeType": "VariableDeclaration",
            "scope": 844,
            "src": "2107:36:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 197,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "2107:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "30",
              "id": 198,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "2142:1:8",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_0_by_1",
                "typeString": "int_const 0"
              },
              "value": "0"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "0034b9cc",
            "id": 202,
            "mutability": "mutable",
            "name": "amountBtcUp",
            "nodeType": "VariableDeclaration",
            "scope": 844,
            "src": "2150:30:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 200,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "2150:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "30",
              "id": 201,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "2179:1:8",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_0_by_1",
                "typeString": "int_const 0"
              },
              "value": "0"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "b75cbe0b",
            "id": 205,
            "mutability": "mutable",
            "name": "amountBtcDown",
            "nodeType": "VariableDeclaration",
            "scope": 844,
            "src": "2210:32:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 203,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "2210:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "30",
              "id": 204,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "2241:1:8",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_0_by_1",
                "typeString": "int_const 0"
              },
              "value": "0"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "f4352c57",
            "id": 208,
            "mutability": "mutable",
            "name": "lastBtcPrice",
            "nodeType": "VariableDeclaration",
            "scope": 844,
            "src": "2271:31:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 206,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "2271:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "30",
              "id": 207,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "2301:1:8",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_0_by_1",
                "typeString": "int_const 0"
              },
              "value": "0"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "feae67b0",
            "id": 211,
            "mutability": "mutable",
            "name": "poolIsInitialized",
            "nodeType": "VariableDeclaration",
            "scope": 844,
            "src": "2352:37:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 209,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "2352:4:8",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": {
              "hexValue": "66616c7365",
              "id": 210,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "bool",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "2384:5:8",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              },
              "value": "false"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 214,
            "mutability": "mutable",
            "name": "addressUsdc",
            "nodeType": "VariableDeclaration",
            "scope": 844,
            "src": "2396:64:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 212,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "2396:7:8",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": {
              "hexValue": "307862376134463345393039374330386441303935313762356142383737463761393137323234656465",
              "id": 213,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "2418:42:8",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              },
              "value": "0xb7a4F3E9097C08dA09517b5aB877F7a917224ede"
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 217,
            "mutability": "mutable",
            "name": "addressBtcUSDFeed",
            "nodeType": "VariableDeclaration",
            "scope": 844,
            "src": "2526:71:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 215,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "2526:7:8",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": {
              "hexValue": "307836313335623133333235626643344230303237384234616243356532306262636532443635383065",
              "id": 216,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "2555:42:8",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              },
              "value": "0x6135b13325bfC4B00278B4abC5e20bbce2D6580e"
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 220,
            "mutability": "mutable",
            "name": "btcUp",
            "nodeType": "VariableDeclaration",
            "scope": 844,
            "src": "2672:11:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_BTCUP_$108",
              "typeString": "contract BTCUP"
            },
            "typeName": {
              "id": 219,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 218,
                "name": "BTCUP",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 108,
                "src": "2672:5:8"
              },
              "referencedDeclaration": 108,
              "src": "2672:5:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_BTCUP_$108",
                "typeString": "contract BTCUP"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 223,
            "mutability": "mutable",
            "name": "btcDown",
            "nodeType": "VariableDeclaration",
            "scope": 844,
            "src": "2689:15:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_BTCDOWN_$178",
              "typeString": "contract BTCDOWN"
            },
            "typeName": {
              "id": 222,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 221,
                "name": "BTCDOWN",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 178,
                "src": "2689:7:8"
              },
              "referencedDeclaration": 178,
              "src": "2689:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_BTCDOWN_$178",
                "typeString": "contract BTCDOWN"
              }
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 276,
              "nodeType": "Block",
              "src": "2772:284:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 232,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "2790:18:8",
                        "subExpression": {
                          "id": 231,
                          "name": "poolIsInitialized",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 211,
                          "src": "2791:17:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "54686520706f6f6c2077617320616c726561647920696e697469617465642e",
                        "id": 233,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2810:33:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_580e872a0bf3ae438081ad6284342a647742aae71fdfc53b8a10245734a22e81",
                          "typeString": "literal_string \"The pool was already initiated.\""
                        },
                        "value": "The pool was already initiated."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_580e872a0bf3ae438081ad6284342a647742aae71fdfc53b8a10245734a22e81",
                          "typeString": "literal_string \"The pool was already initiated.\""
                        }
                      ],
                      "id": 230,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2782:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 234,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2782:62:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 235,
                  "nodeType": "ExpressionStatement",
                  "src": "2782:62:8"
                },
                {
                  "expression": {
                    "id": 245,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 236,
                      "name": "btcUp",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 220,
                      "src": "2855:5:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_BTCUP_$108",
                        "typeString": "contract BTCUP"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "id": 242,
                              "name": "this",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -28,
                              "src": "2881:4:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_LeveragedTrading_$844",
                                "typeString": "contract LeveragedTrading"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_LeveragedTrading_$844",
                                "typeString": "contract LeveragedTrading"
                              }
                            ],
                            "id": 241,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2873:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 240,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "2873:7:8",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 243,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2873:13:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 239,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "2863:9:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_creation_nonpayable$_t_address_$returns$_t_contract$_BTCUP_$108_$",
                          "typeString": "function (address) returns (contract BTCUP)"
                        },
                        "typeName": {
                          "id": 238,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 237,
                            "name": "BTCUP",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 108,
                            "src": "2867:5:8"
                          },
                          "referencedDeclaration": 108,
                          "src": "2867:5:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_BTCUP_$108",
                            "typeString": "contract BTCUP"
                          }
                        }
                      },
                      "id": 244,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2863:24:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_BTCUP_$108",
                        "typeString": "contract BTCUP"
                      }
                    },
                    "src": "2855:32:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_BTCUP_$108",
                      "typeString": "contract BTCUP"
                    }
                  },
                  "id": 246,
                  "nodeType": "ExpressionStatement",
                  "src": "2855:32:8"
                },
                {
                  "expression": {
                    "id": 256,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 247,
                      "name": "btcDown",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 223,
                      "src": "2897:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_BTCDOWN_$178",
                        "typeString": "contract BTCDOWN"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "id": 253,
                              "name": "this",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -28,
                              "src": "2927:4:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_LeveragedTrading_$844",
                                "typeString": "contract LeveragedTrading"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_LeveragedTrading_$844",
                                "typeString": "contract LeveragedTrading"
                              }
                            ],
                            "id": 252,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2919:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 251,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "2919:7:8",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 254,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2919:13:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 250,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "2907:11:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_creation_nonpayable$_t_address_$returns$_t_contract$_BTCDOWN_$178_$",
                          "typeString": "function (address) returns (contract BTCDOWN)"
                        },
                        "typeName": {
                          "id": 249,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 248,
                            "name": "BTCDOWN",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 178,
                            "src": "2911:7:8"
                          },
                          "referencedDeclaration": 178,
                          "src": "2911:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_BTCDOWN_$178",
                            "typeString": "contract BTCDOWN"
                          }
                        }
                      },
                      "id": 255,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2907:26:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_BTCDOWN_$178",
                        "typeString": "contract BTCDOWN"
                      }
                    },
                    "src": "2897:36:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_BTCDOWN_$178",
                      "typeString": "contract BTCDOWN"
                    }
                  },
                  "id": 257,
                  "nodeType": "ExpressionStatement",
                  "src": "2897:36:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "32",
                            "id": 261,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2970:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_2_by_1",
                              "typeString": "int_const 2"
                            },
                            "value": "2"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_2_by_1",
                              "typeString": "int_const 2"
                            }
                          ],
                          "expression": {
                            "id": 259,
                            "name": "amountUsdc",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 225,
                            "src": "2955:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 260,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "div",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1777,
                          "src": "2955:14:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 262,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2955:17:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 258,
                      "name": "issueBtcUp",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 344,
                      "src": "2944:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 263,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2944:29:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 264,
                  "nodeType": "ExpressionStatement",
                  "src": "2944:29:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "32",
                            "id": 268,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3011:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_2_by_1",
                              "typeString": "int_const 2"
                            },
                            "value": "2"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_2_by_1",
                              "typeString": "int_const 2"
                            }
                          ],
                          "expression": {
                            "id": 266,
                            "name": "amountUsdc",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 225,
                            "src": "2996:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 267,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "div",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1777,
                          "src": "2996:14:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 269,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2996:17:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 265,
                      "name": "issueBtcDown",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 411,
                      "src": "2983:12:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 270,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2983:31:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 271,
                  "nodeType": "ExpressionStatement",
                  "src": "2983:31:8"
                },
                {
                  "expression": {
                    "id": 274,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 272,
                      "name": "poolIsInitialized",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 211,
                      "src": "3025:17:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 273,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3045:4:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "3025:24:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 275,
                  "nodeType": "ExpressionStatement",
                  "src": "3025:24:8"
                }
              ]
            },
            "functionSelector": "98881bc9",
            "id": 277,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 228,
                "modifierName": {
                  "id": 227,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 891,
                  "src": "2762:9:8"
                },
                "nodeType": "ModifierInvocation",
                "src": "2762:9:8"
              }
            ],
            "name": "initializePool",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 226,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 225,
                  "mutability": "mutable",
                  "name": "amountUsdc",
                  "nodeType": "VariableDeclaration",
                  "scope": 277,
                  "src": "2735:18:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 224,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2735:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2734:20:8"
            },
            "returnParameters": {
              "id": 229,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2772:0:8"
            },
            "scope": 844,
            "src": "2711:345:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 343,
              "nodeType": "Block",
              "src": "3109:486:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 282,
                      "name": "rebalanceLeveragedTokens",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 601,
                      "src": "3119:24:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 283,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3119:26:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 284,
                  "nodeType": "ExpressionStatement",
                  "src": "3119:26:8"
                },
                {
                  "expression": {
                    "id": 288,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 285,
                      "name": "priceBtcUp",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 188,
                      "src": "3164:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 286,
                        "name": "getBtcUpPrice",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 670,
                        "src": "3177:13:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                          "typeString": "function () view returns (uint256)"
                        }
                      },
                      "id": 287,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3177:15:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3164:28:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 289,
                  "nodeType": "ExpressionStatement",
                  "src": "3164:28:8"
                },
                {
                  "assignments": [
                    291
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 291,
                      "mutability": "mutable",
                      "name": "amountLeveragedTokens",
                      "nodeType": "VariableDeclaration",
                      "scope": 343,
                      "src": "3202:29:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 290,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3202:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 301,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 299,
                        "name": "priceBtcUp",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 188,
                        "src": "3262:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_rational_1000000_by_1",
                              "typeString": "int_const 1000000"
                            },
                            "id": 296,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "leftExpression": {
                              "hexValue": "3130",
                              "id": 294,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3249:2:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_10_by_1",
                                "typeString": "int_const 10"
                              },
                              "value": "10"
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "**",
                            "rightExpression": {
                              "hexValue": "36",
                              "id": 295,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3255:1:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_6_by_1",
                                "typeString": "int_const 6"
                              },
                              "value": "6"
                            },
                            "src": "3249:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1000000_by_1",
                              "typeString": "int_const 1000000"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_1000000_by_1",
                              "typeString": "int_const 1000000"
                            }
                          ],
                          "expression": {
                            "id": 292,
                            "name": "amountUsdc",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 279,
                            "src": "3234:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 293,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "mul",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1762,
                          "src": "3234:14:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 297,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3234:23:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 298,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "div",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1777,
                      "src": "3234:27:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                        "typeString": "function (uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 300,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3234:39:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3202:71:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 305,
                        "name": "amountLeveragedTokens",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 291,
                        "src": "3295:21:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 302,
                        "name": "btcUp",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 220,
                        "src": "3284:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_BTCUP_$108",
                          "typeString": "contract BTCUP"
                        }
                      },
                      "id": 304,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "mint",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 72,
                      "src": "3284:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256) external"
                      }
                    },
                    "id": 306,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3284:33:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 307,
                  "nodeType": "ExpressionStatement",
                  "src": "3284:33:8"
                },
                {
                  "expression": {
                    "id": 313,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 308,
                      "name": "amountBtcUp",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 202,
                      "src": "3327:11:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 311,
                          "name": "amountLeveragedTokens",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 291,
                          "src": "3357:21:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "id": 309,
                          "name": "amountBtcUp",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 202,
                          "src": "3341:11:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 310,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "add",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1732,
                        "src": "3341:15:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 312,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3341:38:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3327:52:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 314,
                  "nodeType": "ExpressionStatement",
                  "src": "3327:52:8"
                },
                {
                  "expression": {
                    "id": 320,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 315,
                      "name": "collateralBtcUp",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 196,
                      "src": "3389:15:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 318,
                          "name": "amountUsdc",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 279,
                          "src": "3427:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "id": 316,
                          "name": "collateralBtcUp",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 196,
                          "src": "3407:15:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 317,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "add",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1732,
                        "src": "3407:19:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 319,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3407:31:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3389:49:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 321,
                  "nodeType": "ExpressionStatement",
                  "src": "3389:49:8"
                },
                {
                  "assignments": [
                    324
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 324,
                      "mutability": "mutable",
                      "name": "usdc",
                      "nodeType": "VariableDeclaration",
                      "scope": 343,
                      "src": "3449:11:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$38",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "id": 323,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 322,
                          "name": "IERC20",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 38,
                          "src": "3449:6:8"
                        },
                        "referencedDeclaration": 38,
                        "src": "3449:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$38",
                          "typeString": "contract IERC20"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 328,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 326,
                        "name": "addressUsdc",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 214,
                        "src": "3470:11:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 325,
                      "name": "IERC20",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 38,
                      "src": "3463:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IERC20_$38_$",
                        "typeString": "type(contract IERC20)"
                      }
                    },
                    "id": 327,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3463:19:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$38",
                      "typeString": "contract IERC20"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3449:33:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 332,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "3518:3:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 333,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "3518:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "id": 336,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "3538:4:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_LeveragedTrading_$844",
                                  "typeString": "contract LeveragedTrading"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_LeveragedTrading_$844",
                                  "typeString": "contract LeveragedTrading"
                                }
                              ],
                              "id": 335,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "3530:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 334,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "3530:7:8",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 337,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3530:13:8",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 338,
                            "name": "amountUsdc",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 279,
                            "src": "3545:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 330,
                            "name": "usdc",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 324,
                            "src": "3500:4:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$38",
                              "typeString": "contract IERC20"
                            }
                          },
                          "id": 331,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "transferFrom",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 28,
                          "src": "3500:17:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,address,uint256) external returns (bool)"
                          }
                        },
                        "id": 339,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3500:56:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "596f7520646f6e2774206861766520656e6f75676820555344432e",
                        "id": 340,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3558:29:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_fa81e2605579e88471722381a01380eff7db3c869a8b4d6c5142c052f717215d",
                          "typeString": "literal_string \"You don't have enough USDC.\""
                        },
                        "value": "You don't have enough USDC."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_fa81e2605579e88471722381a01380eff7db3c869a8b4d6c5142c052f717215d",
                          "typeString": "literal_string \"You don't have enough USDC.\""
                        }
                      ],
                      "id": 329,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3492:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 341,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3492:96:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 342,
                  "nodeType": "ExpressionStatement",
                  "src": "3492:96:8"
                }
              ]
            },
            "functionSelector": "f530c04a",
            "id": 344,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "issueBtcUp",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 280,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 279,
                  "mutability": "mutable",
                  "name": "amountUsdc",
                  "nodeType": "VariableDeclaration",
                  "scope": 344,
                  "src": "3082:18:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 278,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3082:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3081:20:8"
            },
            "returnParameters": {
              "id": 281,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3109:0:8"
            },
            "scope": 844,
            "src": "3062:533:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 410,
              "nodeType": "Block",
              "src": "3650:502:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 349,
                      "name": "rebalanceLeveragedTokens",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 601,
                      "src": "3660:24:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 350,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3660:26:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 351,
                  "nodeType": "ExpressionStatement",
                  "src": "3660:26:8"
                },
                {
                  "expression": {
                    "id": 355,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 352,
                      "name": "priceBtcDown",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 193,
                      "src": "3705:12:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 353,
                        "name": "getBtcDownPrice",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 691,
                        "src": "3720:15:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                          "typeString": "function () view returns (uint256)"
                        }
                      },
                      "id": 354,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3720:17:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3705:32:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 356,
                  "nodeType": "ExpressionStatement",
                  "src": "3705:32:8"
                },
                {
                  "assignments": [
                    358
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 358,
                      "mutability": "mutable",
                      "name": "amountLeveragedTokens",
                      "nodeType": "VariableDeclaration",
                      "scope": 410,
                      "src": "3747:29:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 357,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3747:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 368,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 366,
                        "name": "priceBtcDown",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 193,
                        "src": "3807:12:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_rational_1000000_by_1",
                              "typeString": "int_const 1000000"
                            },
                            "id": 363,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "leftExpression": {
                              "hexValue": "3130",
                              "id": 361,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3794:2:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_10_by_1",
                                "typeString": "int_const 10"
                              },
                              "value": "10"
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "**",
                            "rightExpression": {
                              "hexValue": "36",
                              "id": 362,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3800:1:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_6_by_1",
                                "typeString": "int_const 6"
                              },
                              "value": "6"
                            },
                            "src": "3794:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1000000_by_1",
                              "typeString": "int_const 1000000"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_1000000_by_1",
                              "typeString": "int_const 1000000"
                            }
                          ],
                          "expression": {
                            "id": 359,
                            "name": "amountUsdc",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 346,
                            "src": "3779:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 360,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "mul",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1762,
                          "src": "3779:14:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 364,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3779:23:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 365,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "div",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1777,
                      "src": "3779:27:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                        "typeString": "function (uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 367,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3779:41:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3747:73:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 372,
                        "name": "amountLeveragedTokens",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 358,
                        "src": "3844:21:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 369,
                        "name": "btcDown",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 223,
                        "src": "3831:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_BTCDOWN_$178",
                          "typeString": "contract BTCDOWN"
                        }
                      },
                      "id": 371,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "mint",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 142,
                      "src": "3831:12:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256) external"
                      }
                    },
                    "id": 373,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3831:35:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 374,
                  "nodeType": "ExpressionStatement",
                  "src": "3831:35:8"
                },
                {
                  "expression": {
                    "id": 380,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 375,
                      "name": "amountBtcDown",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 205,
                      "src": "3876:13:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 378,
                          "name": "amountLeveragedTokens",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 358,
                          "src": "3910:21:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "id": 376,
                          "name": "amountBtcDown",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 205,
                          "src": "3892:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 377,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "add",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1732,
                        "src": "3892:17:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 379,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3892:40:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3876:56:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 381,
                  "nodeType": "ExpressionStatement",
                  "src": "3876:56:8"
                },
                {
                  "expression": {
                    "id": 387,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 382,
                      "name": "collateralBtcDown",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 199,
                      "src": "3942:17:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 385,
                          "name": "amountUsdc",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 346,
                          "src": "3984:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "id": 383,
                          "name": "collateralBtcDown",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 199,
                          "src": "3962:17:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 384,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "add",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1732,
                        "src": "3962:21:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 386,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3962:33:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3942:53:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 388,
                  "nodeType": "ExpressionStatement",
                  "src": "3942:53:8"
                },
                {
                  "assignments": [
                    391
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 391,
                      "mutability": "mutable",
                      "name": "usdc",
                      "nodeType": "VariableDeclaration",
                      "scope": 410,
                      "src": "4006:11:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$38",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "id": 390,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 389,
                          "name": "IERC20",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 38,
                          "src": "4006:6:8"
                        },
                        "referencedDeclaration": 38,
                        "src": "4006:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$38",
                          "typeString": "contract IERC20"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 395,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 393,
                        "name": "addressUsdc",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 214,
                        "src": "4027:11:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 392,
                      "name": "IERC20",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 38,
                      "src": "4020:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IERC20_$38_$",
                        "typeString": "type(contract IERC20)"
                      }
                    },
                    "id": 394,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4020:19:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$38",
                      "typeString": "contract IERC20"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4006:33:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 399,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "4075:3:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 400,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "4075:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "id": 403,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "4095:4:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_LeveragedTrading_$844",
                                  "typeString": "contract LeveragedTrading"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_LeveragedTrading_$844",
                                  "typeString": "contract LeveragedTrading"
                                }
                              ],
                              "id": 402,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "4087:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 401,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "4087:7:8",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 404,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4087:13:8",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 405,
                            "name": "amountUsdc",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 346,
                            "src": "4102:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 397,
                            "name": "usdc",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 391,
                            "src": "4057:4:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$38",
                              "typeString": "contract IERC20"
                            }
                          },
                          "id": 398,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "transferFrom",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 28,
                          "src": "4057:17:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,address,uint256) external returns (bool)"
                          }
                        },
                        "id": 406,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4057:56:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "596f7520646f6e2774206861766520656e6f75676820555344432e",
                        "id": 407,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4115:29:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_fa81e2605579e88471722381a01380eff7db3c869a8b4d6c5142c052f717215d",
                          "typeString": "literal_string \"You don't have enough USDC.\""
                        },
                        "value": "You don't have enough USDC."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_fa81e2605579e88471722381a01380eff7db3c869a8b4d6c5142c052f717215d",
                          "typeString": "literal_string \"You don't have enough USDC.\""
                        }
                      ],
                      "id": 396,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4049:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 408,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4049:96:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 409,
                  "nodeType": "ExpressionStatement",
                  "src": "4049:96:8"
                }
              ]
            },
            "functionSelector": "c46d4f09",
            "id": 411,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "issueBtcDown",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 347,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 346,
                  "mutability": "mutable",
                  "name": "amountUsdc",
                  "nodeType": "VariableDeclaration",
                  "scope": 411,
                  "src": "3623:18:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 345,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3623:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3622:20:8"
            },
            "returnParameters": {
              "id": 348,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3650:0:8"
            },
            "scope": 844,
            "src": "3601:551:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 472,
              "nodeType": "Block",
              "src": "4217:427:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 416,
                      "name": "rebalanceLeveragedTokens",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 601,
                      "src": "4227:24:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 417,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4227:26:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 418,
                  "nodeType": "ExpressionStatement",
                  "src": "4227:26:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 422,
                        "name": "amountLeveragedTokens",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 413,
                        "src": "4274:21:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 419,
                        "name": "btcUp",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 220,
                        "src": "4263:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_BTCUP_$108",
                          "typeString": "contract BTCUP"
                        }
                      },
                      "id": 421,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "burn",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 87,
                      "src": "4263:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256) external"
                      }
                    },
                    "id": 423,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4263:33:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 424,
                  "nodeType": "ExpressionStatement",
                  "src": "4263:33:8"
                },
                {
                  "expression": {
                    "id": 428,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 425,
                      "name": "priceBtcUp",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 188,
                      "src": "4307:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 426,
                        "name": "getBtcUpPrice",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 670,
                        "src": "4320:13:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                          "typeString": "function () view returns (uint256)"
                        }
                      },
                      "id": 427,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4320:15:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4307:28:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 429,
                  "nodeType": "ExpressionStatement",
                  "src": "4307:28:8"
                },
                {
                  "assignments": [
                    431
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 431,
                      "mutability": "mutable",
                      "name": "amountUsdc",
                      "nodeType": "VariableDeclaration",
                      "scope": 472,
                      "src": "4345:18:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 430,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4345:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 441,
                  "initialValue": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_rational_1000000_by_1",
                          "typeString": "int_const 1000000"
                        },
                        "id": 439,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "leftExpression": {
                          "hexValue": "3130",
                          "id": 437,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4408:2:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_10_by_1",
                            "typeString": "int_const 10"
                          },
                          "value": "10"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "**",
                        "rightExpression": {
                          "hexValue": "36",
                          "id": 438,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4414:1:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_6_by_1",
                            "typeString": "int_const 6"
                          },
                          "value": "6"
                        },
                        "src": "4408:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1000000_by_1",
                          "typeString": "int_const 1000000"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_rational_1000000_by_1",
                          "typeString": "int_const 1000000"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "id": 434,
                            "name": "priceBtcUp",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 188,
                            "src": "4392:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 432,
                            "name": "amountLeveragedTokens",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 413,
                            "src": "4366:21:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 433,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "mul",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1762,
                          "src": "4366:25:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 435,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4366:37:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 436,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "div",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1777,
                      "src": "4366:41:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                        "typeString": "function (uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 440,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4366:50:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4345:71:8"
                },
                {
                  "expression": {
                    "id": 447,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 442,
                      "name": "amountBtcUp",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 202,
                      "src": "4427:11:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 445,
                          "name": "amountLeveragedTokens",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 413,
                          "src": "4457:21:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "id": 443,
                          "name": "amountBtcUp",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 202,
                          "src": "4441:11:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 444,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sub",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1747,
                        "src": "4441:15:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 446,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4441:38:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4427:52:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 448,
                  "nodeType": "ExpressionStatement",
                  "src": "4427:52:8"
                },
                {
                  "expression": {
                    "id": 454,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 449,
                      "name": "collateralBtcUp",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 196,
                      "src": "4489:15:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 452,
                          "name": "amountUsdc",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 431,
                          "src": "4527:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "id": 450,
                          "name": "collateralBtcUp",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 196,
                          "src": "4507:15:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 451,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sub",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1747,
                        "src": "4507:19:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 453,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4507:31:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4489:49:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 455,
                  "nodeType": "ExpressionStatement",
                  "src": "4489:49:8"
                },
                {
                  "assignments": [
                    458
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 458,
                      "mutability": "mutable",
                      "name": "usdc",
                      "nodeType": "VariableDeclaration",
                      "scope": 472,
                      "src": "4549:11:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$38",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "id": 457,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 456,
                          "name": "IERC20",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 38,
                          "src": "4549:6:8"
                        },
                        "referencedDeclaration": 38,
                        "src": "4549:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$38",
                          "typeString": "contract IERC20"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 462,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 460,
                        "name": "addressUsdc",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 214,
                        "src": "4570:11:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 459,
                      "name": "IERC20",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 38,
                      "src": "4563:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IERC20_$38_$",
                        "typeString": "type(contract IERC20)"
                      }
                    },
                    "id": 461,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4563:19:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$38",
                      "typeString": "contract IERC20"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4549:33:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 466,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "4613:3:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 467,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "4613:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 468,
                            "name": "amountUsdc",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 431,
                            "src": "4625:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 464,
                            "name": "usdc",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 458,
                            "src": "4599:4:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$38",
                              "typeString": "contract IERC20"
                            }
                          },
                          "id": 465,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "transfer",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 17,
                          "src": "4599:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) external returns (bool)"
                          }
                        },
                        "id": 469,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4599:37:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 463,
                      "name": "assert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -3,
                      "src": "4592:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 470,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4592:45:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 471,
                  "nodeType": "ExpressionStatement",
                  "src": "4592:45:8"
                }
              ]
            },
            "functionSelector": "d1ee539d",
            "id": 473,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "redeemBtcUp",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 414,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 413,
                  "mutability": "mutable",
                  "name": "amountLeveragedTokens",
                  "nodeType": "VariableDeclaration",
                  "scope": 473,
                  "src": "4179:29:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 412,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4179:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4178:31:8"
            },
            "returnParameters": {
              "id": 415,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4217:0:8"
            },
            "scope": 844,
            "src": "4158:486:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 534,
              "nodeType": "Block",
              "src": "4711:452:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 478,
                      "name": "rebalanceLeveragedTokens",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 601,
                      "src": "4721:24:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 479,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4721:26:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 480,
                  "nodeType": "ExpressionStatement",
                  "src": "4721:26:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 484,
                        "name": "amountLeveragedTokens",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 475,
                        "src": "4770:21:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 481,
                        "name": "btcDown",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 223,
                        "src": "4757:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_BTCDOWN_$178",
                          "typeString": "contract BTCDOWN"
                        }
                      },
                      "id": 483,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "burn",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 157,
                      "src": "4757:12:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256) external"
                      }
                    },
                    "id": 485,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4757:35:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 486,
                  "nodeType": "ExpressionStatement",
                  "src": "4757:35:8"
                },
                {
                  "expression": {
                    "id": 490,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 487,
                      "name": "priceBtcDown",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 193,
                      "src": "4803:12:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 488,
                        "name": "getBtcDownPrice",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 691,
                        "src": "4818:15:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                          "typeString": "function () view returns (uint256)"
                        }
                      },
                      "id": 489,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4818:17:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4803:32:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 491,
                  "nodeType": "ExpressionStatement",
                  "src": "4803:32:8"
                },
                {
                  "assignments": [
                    493
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 493,
                      "mutability": "mutable",
                      "name": "amountUsdc",
                      "nodeType": "VariableDeclaration",
                      "scope": 534,
                      "src": "4845:18:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 492,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4845:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 503,
                  "initialValue": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_rational_1000000_by_1",
                          "typeString": "int_const 1000000"
                        },
                        "id": 501,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "leftExpression": {
                          "hexValue": "3130",
                          "id": 499,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4910:2:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_10_by_1",
                            "typeString": "int_const 10"
                          },
                          "value": "10"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "**",
                        "rightExpression": {
                          "hexValue": "36",
                          "id": 500,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4916:1:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_6_by_1",
                            "typeString": "int_const 6"
                          },
                          "value": "6"
                        },
                        "src": "4910:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1000000_by_1",
                          "typeString": "int_const 1000000"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_rational_1000000_by_1",
                          "typeString": "int_const 1000000"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "id": 496,
                            "name": "priceBtcDown",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 193,
                            "src": "4892:12:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 494,
                            "name": "amountLeveragedTokens",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 475,
                            "src": "4866:21:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 495,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "mul",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1762,
                          "src": "4866:25:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 497,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4866:39:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 498,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "div",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1777,
                      "src": "4866:43:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                        "typeString": "function (uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 502,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4866:52:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4845:73:8"
                },
                {
                  "expression": {
                    "id": 509,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 504,
                      "name": "amountBtcDown",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 205,
                      "src": "4937:13:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 507,
                          "name": "amountLeveragedTokens",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 475,
                          "src": "4971:21:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "id": 505,
                          "name": "amountBtcDown",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 205,
                          "src": "4953:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 506,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sub",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1747,
                        "src": "4953:17:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 508,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4953:40:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4937:56:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 510,
                  "nodeType": "ExpressionStatement",
                  "src": "4937:56:8"
                },
                {
                  "expression": {
                    "id": 516,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 511,
                      "name": "collateralBtcDown",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 199,
                      "src": "5003:17:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 514,
                          "name": "amountUsdc",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 493,
                          "src": "5045:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "id": 512,
                          "name": "collateralBtcDown",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 199,
                          "src": "5023:17:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 513,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sub",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1747,
                        "src": "5023:21:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 515,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5023:33:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5003:53:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 517,
                  "nodeType": "ExpressionStatement",
                  "src": "5003:53:8"
                },
                {
                  "assignments": [
                    520
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 520,
                      "mutability": "mutable",
                      "name": "usdc",
                      "nodeType": "VariableDeclaration",
                      "scope": 534,
                      "src": "5067:11:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$38",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "id": 519,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 518,
                          "name": "IERC20",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 38,
                          "src": "5067:6:8"
                        },
                        "referencedDeclaration": 38,
                        "src": "5067:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$38",
                          "typeString": "contract IERC20"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 524,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 522,
                        "name": "addressUsdc",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 214,
                        "src": "5088:11:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 521,
                      "name": "IERC20",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 38,
                      "src": "5081:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IERC20_$38_$",
                        "typeString": "type(contract IERC20)"
                      }
                    },
                    "id": 523,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5081:19:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$38",
                      "typeString": "contract IERC20"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5067:33:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 528,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "5131:3:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 529,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "5131:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 530,
                            "name": "amountUsdc",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 493,
                            "src": "5144:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 526,
                            "name": "usdc",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 520,
                            "src": "5117:4:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$38",
                              "typeString": "contract IERC20"
                            }
                          },
                          "id": 527,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "transfer",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 17,
                          "src": "5117:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) external returns (bool)"
                          }
                        },
                        "id": 531,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5117:38:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 525,
                      "name": "assert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -3,
                      "src": "5110:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 532,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5110:46:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 533,
                  "nodeType": "ExpressionStatement",
                  "src": "5110:46:8"
                }
              ]
            },
            "functionSelector": "a14274e8",
            "id": 535,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "redeemBtcDown",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 476,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 475,
                  "mutability": "mutable",
                  "name": "amountLeveragedTokens",
                  "nodeType": "VariableDeclaration",
                  "scope": 535,
                  "src": "4673:29:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 474,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4673:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4672:31:8"
            },
            "returnParameters": {
              "id": 477,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4711:0:8"
            },
            "scope": 844,
            "src": "4650:513:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 600,
              "nodeType": "Block",
              "src": "5212:610:8",
              "statements": [
                {
                  "assignments": [
                    539
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 539,
                      "mutability": "mutable",
                      "name": "btcPrice",
                      "nodeType": "VariableDeclaration",
                      "scope": 600,
                      "src": "5222:16:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 538,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5222:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 542,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 540,
                      "name": "getBtcPrice",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 715,
                      "src": "5241:11:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                        "typeString": "function () view returns (uint256)"
                      }
                    },
                    "id": 541,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5241:13:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5222:32:8"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 551,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 545,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 543,
                            "name": "collateralBtcUp",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 196,
                            "src": "5269:15:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 544,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5287:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "5269:19:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        }
                      ],
                      "id": 546,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "5268:21:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "&&",
                    "rightExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 549,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 547,
                            "name": "collateralBtcDown",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 199,
                            "src": "5294:17:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 548,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5314:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "5294:21:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        }
                      ],
                      "id": 550,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "5293:23:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "5268:48:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 595,
                  "nodeType": "IfStatement",
                  "src": "5264:519:8",
                  "trueBody": {
                    "id": 594,
                    "nodeType": "Block",
                    "src": "5318:465:8",
                    "statements": [
                      {
                        "assignments": [
                          553
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 553,
                            "mutability": "mutable",
                            "name": "rebalanceAmount",
                            "nodeType": "VariableDeclaration",
                            "scope": 594,
                            "src": "5332:23:8",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 552,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "5332:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 557,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 555,
                              "name": "btcPrice",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 539,
                              "src": "5377:8:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 554,
                            "name": "getRebalanceAmount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 649,
                            "src": "5358:18:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (uint256) view returns (uint256)"
                            }
                          },
                          "id": 556,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5358:28:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5332:54:8"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          },
                          "id": 562,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "arguments": [
                              {
                                "id": 559,
                                "name": "btcPrice",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 539,
                                "src": "5412:8:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 558,
                              "name": "getSign",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 620,
                              "src": "5404:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_int256_$",
                                "typeString": "function (uint256) view returns (int256)"
                              }
                            },
                            "id": 560,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5404:17:8",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_int256",
                              "typeString": "int256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 561,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5424:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "5404:21:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 592,
                          "nodeType": "Block",
                          "src": "5609:163:8",
                          "statements": [
                            {
                              "expression": {
                                "id": 583,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 578,
                                  "name": "collateralBtcUp",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 196,
                                  "src": "5627:15:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "id": 581,
                                      "name": "rebalanceAmount",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 553,
                                      "src": "5665:15:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "expression": {
                                      "id": 579,
                                      "name": "collateralBtcUp",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 196,
                                      "src": "5645:15:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 580,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "sub",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1747,
                                    "src": "5645:19:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 582,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "5645:36:8",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "5627:54:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 584,
                              "nodeType": "ExpressionStatement",
                              "src": "5627:54:8"
                            },
                            {
                              "expression": {
                                "id": 590,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 585,
                                  "name": "collateralBtcDown",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 199,
                                  "src": "5699:17:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "id": 588,
                                      "name": "rebalanceAmount",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 553,
                                      "src": "5741:15:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "expression": {
                                      "id": 586,
                                      "name": "collateralBtcDown",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 199,
                                      "src": "5719:17:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 587,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "add",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1732,
                                    "src": "5719:21:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 589,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "5719:38:8",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "5699:58:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 591,
                              "nodeType": "ExpressionStatement",
                              "src": "5699:58:8"
                            }
                          ]
                        },
                        "id": 593,
                        "nodeType": "IfStatement",
                        "src": "5400:372:8",
                        "trueBody": {
                          "id": 577,
                          "nodeType": "Block",
                          "src": "5427:163:8",
                          "statements": [
                            {
                              "expression": {
                                "id": 568,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 563,
                                  "name": "collateralBtcUp",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 196,
                                  "src": "5445:15:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "id": 566,
                                      "name": "rebalanceAmount",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 553,
                                      "src": "5483:15:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "expression": {
                                      "id": 564,
                                      "name": "collateralBtcUp",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 196,
                                      "src": "5463:15:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 565,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "add",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1732,
                                    "src": "5463:19:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 567,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "5463:36:8",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "5445:54:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 569,
                              "nodeType": "ExpressionStatement",
                              "src": "5445:54:8"
                            },
                            {
                              "expression": {
                                "id": 575,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 570,
                                  "name": "collateralBtcDown",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 199,
                                  "src": "5517:17:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "id": 573,
                                      "name": "rebalanceAmount",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 553,
                                      "src": "5559:15:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "expression": {
                                      "id": 571,
                                      "name": "collateralBtcDown",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 199,
                                      "src": "5537:17:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 572,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "sub",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1747,
                                    "src": "5537:21:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 574,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "5537:38:8",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "5517:58:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 576,
                              "nodeType": "ExpressionStatement",
                              "src": "5517:58:8"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "id": 598,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 596,
                      "name": "lastBtcPrice",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 208,
                      "src": "5792:12:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 597,
                      "name": "btcPrice",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 539,
                      "src": "5807:8:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5792:23:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 599,
                  "nodeType": "ExpressionStatement",
                  "src": "5792:23:8"
                }
              ]
            },
            "functionSelector": "6e5d6615",
            "id": 601,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "rebalanceLeveragedTokens",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 536,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5202:2:8"
            },
            "returnParameters": {
              "id": 537,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5212:0:8"
            },
            "scope": 844,
            "src": "5169:653:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 619,
              "nodeType": "Block",
              "src": "6065:126:8",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 610,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 608,
                      "name": "btcPrice",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 603,
                      "src": "6079:8:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "id": 609,
                      "name": "lastBtcPrice",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 208,
                      "src": "6090:12:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "6079:23:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 617,
                    "nodeType": "Block",
                    "src": "6151:34:8",
                    "statements": [
                      {
                        "expression": {
                          "id": 615,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "-",
                          "prefix": true,
                          "src": "6172:2:8",
                          "subExpression": {
                            "hexValue": "31",
                            "id": 614,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "6173:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_minus_1_by_1",
                            "typeString": "int_const -1"
                          }
                        },
                        "functionReturnParameters": 607,
                        "id": 616,
                        "nodeType": "Return",
                        "src": "6165:9:8"
                      }
                    ]
                  },
                  "id": 618,
                  "nodeType": "IfStatement",
                  "src": "6075:110:8",
                  "trueBody": {
                    "id": 613,
                    "nodeType": "Block",
                    "src": "6104:33:8",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "31",
                          "id": 611,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6125:1:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          },
                          "value": "1"
                        },
                        "functionReturnParameters": 607,
                        "id": 612,
                        "nodeType": "Return",
                        "src": "6118:8:8"
                      }
                    ]
                  }
                }
              ]
            },
            "id": 620,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getSign",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 604,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 603,
                  "mutability": "mutable",
                  "name": "btcPrice",
                  "nodeType": "VariableDeclaration",
                  "scope": 620,
                  "src": "6016:16:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 602,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6016:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6015:18:8"
            },
            "returnParameters": {
              "id": 607,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 606,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 620,
                  "src": "6057:6:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  },
                  "typeName": {
                    "id": 605,
                    "name": "int256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6057:6:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6056:8:8"
            },
            "scope": 844,
            "src": "5999:192:8",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 648,
              "nodeType": "Block",
              "src": "6276:147:8",
              "statements": [
                {
                  "assignments": [
                    628
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 628,
                      "mutability": "mutable",
                      "name": "priceDiff",
                      "nodeType": "VariableDeclaration",
                      "scope": 648,
                      "src": "6286:17:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 627,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6286:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 632,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 630,
                        "name": "priceBtc",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 622,
                        "src": "6319:8:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 629,
                      "name": "getPriceDiff",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 819,
                      "src": "6306:12:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256) view returns (uint256)"
                      }
                    },
                    "id": 631,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6306:22:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6286:42:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_rational_1000000_by_1",
                          "typeString": "int_const 1000000"
                        },
                        "id": 645,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "leftExpression": {
                          "hexValue": "3130",
                          "id": 643,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6408:2:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_10_by_1",
                            "typeString": "int_const 10"
                          },
                          "value": "10"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "**",
                        "rightExpression": {
                          "hexValue": "36",
                          "id": 644,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6414:1:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_6_by_1",
                            "typeString": "int_const 6"
                          },
                          "value": "6"
                        },
                        "src": "6408:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1000000_by_1",
                          "typeString": "int_const 1000000"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_rational_1000000_by_1",
                          "typeString": "int_const 1000000"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "id": 639,
                                "name": "priceDiff",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 628,
                                "src": "6392:9:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 638,
                              "name": "L",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 775,
                              "src": "6390:1:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (uint256) pure returns (uint256)"
                              }
                            },
                            "id": 640,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6390:12:8",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "id": 634,
                                "name": "collateralBtcUp",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 196,
                                "src": "6350:15:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 635,
                                "name": "collateralBtcDown",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 199,
                                "src": "6367:17:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 633,
                              "name": "min",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 732,
                              "src": "6346:3:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 636,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6346:39:8",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 637,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "mul",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1762,
                          "src": "6346:43:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 641,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6346:57:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 642,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "div",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1777,
                      "src": "6346:61:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                        "typeString": "function (uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 646,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6346:70:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 626,
                  "id": 647,
                  "nodeType": "Return",
                  "src": "6339:77:8"
                }
              ]
            },
            "id": 649,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getRebalanceAmount",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 623,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 622,
                  "mutability": "mutable",
                  "name": "priceBtc",
                  "nodeType": "VariableDeclaration",
                  "scope": 649,
                  "src": "6226:16:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 621,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6226:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6225:18:8"
            },
            "returnParameters": {
              "id": 626,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 625,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 649,
                  "src": "6267:7:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 624,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6267:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6266:9:8"
            },
            "scope": 844,
            "src": "6198:225:8",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 669,
              "nodeType": "Block",
              "src": "6514:102:8",
              "statements": [
                {
                  "expression": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 656,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 654,
                        "name": "amountBtcUp",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 202,
                        "src": "6531:11:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "hexValue": "30",
                        "id": 655,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6546:1:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "src": "6531:16:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseExpression": {
                      "arguments": [
                        {
                          "id": 665,
                          "name": "amountBtcUp",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 202,
                          "src": "6597:11:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_rational_1000000_by_1",
                                "typeString": "int_const 1000000"
                              },
                              "id": 662,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "leftExpression": {
                                "hexValue": "3130",
                                "id": 660,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "6584:2:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_10_by_1",
                                  "typeString": "int_const 10"
                                },
                                "value": "10"
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "**",
                              "rightExpression": {
                                "hexValue": "36",
                                "id": 661,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "6590:1:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_6_by_1",
                                  "typeString": "int_const 6"
                                },
                                "value": "6"
                              },
                              "src": "6584:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1000000_by_1",
                                "typeString": "int_const 1000000"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_1000000_by_1",
                                "typeString": "int_const 1000000"
                              }
                            ],
                            "expression": {
                              "id": 658,
                              "name": "collateralBtcUp",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 196,
                              "src": "6564:15:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 659,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "mul",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1762,
                            "src": "6564:19:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 663,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6564:28:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 664,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "div",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1777,
                        "src": "6564:32:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 666,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "6564:45:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 667,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "Conditional",
                    "src": "6531:78:8",
                    "trueExpression": {
                      "id": 657,
                      "name": "priceBtcUp",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 188,
                      "src": "6551:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 653,
                  "id": 668,
                  "nodeType": "Return",
                  "src": "6524:85:8"
                }
              ]
            },
            "functionSelector": "f06847d6",
            "id": 670,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getBtcUpPrice",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 650,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6481:2:8"
            },
            "returnParameters": {
              "id": 653,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 652,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 670,
                  "src": "6505:7:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 651,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6505:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6504:9:8"
            },
            "scope": 844,
            "src": "6459:157:8",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 690,
              "nodeType": "Block",
              "src": "6711:122:8",
              "statements": [
                {
                  "expression": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 677,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 675,
                        "name": "amountBtcDown",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 205,
                        "src": "6740:13:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "hexValue": "30",
                        "id": 676,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6757:1:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "src": "6740:18:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseExpression": {
                      "arguments": [
                        {
                          "id": 686,
                          "name": "amountBtcDown",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 205,
                          "src": "6812:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_rational_1000000_by_1",
                                "typeString": "int_const 1000000"
                              },
                              "id": 683,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "leftExpression": {
                                "hexValue": "3130",
                                "id": 681,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "6799:2:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_10_by_1",
                                  "typeString": "int_const 10"
                                },
                                "value": "10"
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "**",
                              "rightExpression": {
                                "hexValue": "36",
                                "id": 682,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "6805:1:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_6_by_1",
                                  "typeString": "int_const 6"
                                },
                                "value": "6"
                              },
                              "src": "6799:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1000000_by_1",
                                "typeString": "int_const 1000000"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_1000000_by_1",
                                "typeString": "int_const 1000000"
                              }
                            ],
                            "expression": {
                              "id": 679,
                              "name": "collateralBtcDown",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 199,
                              "src": "6777:17:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 680,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "mul",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1762,
                            "src": "6777:21:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 684,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6777:30:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 685,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "div",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1777,
                        "src": "6777:34:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 687,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "6777:49:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 688,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "Conditional",
                    "src": "6740:86:8",
                    "trueExpression": {
                      "id": 678,
                      "name": "priceBtcDown",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 193,
                      "src": "6762:12:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 674,
                  "id": 689,
                  "nodeType": "Return",
                  "src": "6733:93:8"
                }
              ]
            },
            "functionSelector": "81c2b29b",
            "id": 691,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getBtcDownPrice",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 671,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6678:2:8"
            },
            "returnParameters": {
              "id": 674,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 673,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 691,
                  "src": "6702:7:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 672,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6702:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6701:9:8"
            },
            "scope": 844,
            "src": "6654:179:8",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 714,
              "nodeType": "Block",
              "src": "6938:264:8",
              "statements": [
                {
                  "assignments": [
                    698
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 698,
                      "mutability": "mutable",
                      "name": "priceFeed",
                      "nodeType": "VariableDeclaration",
                      "scope": 714,
                      "src": "6948:31:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_AggregatorV3Interface_$1914",
                        "typeString": "contract AggregatorV3Interface"
                      },
                      "typeName": {
                        "id": 697,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 696,
                          "name": "AggregatorV3Interface",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 1914,
                          "src": "6948:21:8"
                        },
                        "referencedDeclaration": 1914,
                        "src": "6948:21:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_AggregatorV3Interface_$1914",
                          "typeString": "contract AggregatorV3Interface"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 702,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 700,
                        "name": "addressBtcUSDFeed",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 217,
                        "src": "7004:17:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 699,
                      "name": "AggregatorV3Interface",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1914,
                      "src": "6982:21:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_AggregatorV3Interface_$1914_$",
                        "typeString": "type(contract AggregatorV3Interface)"
                      }
                    },
                    "id": 701,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6982:40:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_AggregatorV3Interface_$1914",
                      "typeString": "contract AggregatorV3Interface"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6948:74:8"
                },
                {
                  "assignments": [
                    null,
                    704,
                    null,
                    null,
                    null
                  ],
                  "declarations": [
                    null,
                    {
                      "constant": false,
                      "id": 704,
                      "mutability": "mutable",
                      "name": "answer",
                      "nodeType": "VariableDeclaration",
                      "scope": 714,
                      "src": "7034:13:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_int256",
                        "typeString": "int256"
                      },
                      "typeName": {
                        "id": 703,
                        "name": "int256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7034:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        }
                      },
                      "visibility": "internal"
                    },
                    null,
                    null,
                    null
                  ],
                  "id": 708,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 705,
                        "name": "priceFeed",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 698,
                        "src": "7054:9:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_AggregatorV3Interface_$1914",
                          "typeString": "contract AggregatorV3Interface"
                        }
                      },
                      "id": 706,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "latestRoundData",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1913,
                      "src": "7054:25:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$__$returns$_t_uint80_$_t_int256_$_t_uint256_$_t_uint256_$_t_uint80_$",
                        "typeString": "function () view external returns (uint80,int256,uint256,uint256,uint80)"
                      }
                    },
                    "id": 707,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7054:27:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_uint80_$_t_int256_$_t_uint256_$_t_uint256_$_t_uint80_$",
                      "typeString": "tuple(uint80,int256,uint256,uint256,uint80)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7032:49:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 711,
                        "name": "answer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 704,
                        "src": "7108:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        }
                      ],
                      "id": 710,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "7100:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_uint256_$",
                        "typeString": "type(uint256)"
                      },
                      "typeName": {
                        "id": 709,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7100:7:8",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 712,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7100:15:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 695,
                  "id": 713,
                  "nodeType": "Return",
                  "src": "7093:22:8"
                }
              ]
            },
            "functionSelector": "3a3610bc",
            "id": 715,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getBtcPrice",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 692,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6905:2:8"
            },
            "returnParameters": {
              "id": 695,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 694,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 715,
                  "src": "6929:7:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 693,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6929:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6928:9:8"
            },
            "scope": 844,
            "src": "6885:317:8",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 731,
              "nodeType": "Block",
              "src": "7279:38:8",
              "statements": [
                {
                  "expression": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 726,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 724,
                        "name": "a",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 717,
                        "src": "7296:1:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "<=",
                      "rightExpression": {
                        "id": 725,
                        "name": "b",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 719,
                        "src": "7301:1:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "7296:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseExpression": {
                      "id": 728,
                      "name": "b",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 719,
                      "src": "7309:1:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 729,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "Conditional",
                    "src": "7296:14:8",
                    "trueExpression": {
                      "id": 727,
                      "name": "a",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 717,
                      "src": "7305:1:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 723,
                  "id": 730,
                  "nodeType": "Return",
                  "src": "7289:21:8"
                }
              ]
            },
            "id": 732,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "min",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 720,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 717,
                  "mutability": "mutable",
                  "name": "a",
                  "nodeType": "VariableDeclaration",
                  "scope": 732,
                  "src": "7225:9:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 716,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7225:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 719,
                  "mutability": "mutable",
                  "name": "b",
                  "nodeType": "VariableDeclaration",
                  "scope": 732,
                  "src": "7236:9:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 718,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7236:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7224:22:8"
            },
            "returnParameters": {
              "id": 723,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 722,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 732,
                  "src": "7270:7:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 721,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7270:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7269:9:8"
            },
            "scope": 844,
            "src": "7212:105:8",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 774,
              "nodeType": "Block",
              "src": "7377:171:8",
              "statements": [
                {
                  "assignments": [
                    740
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 740,
                      "mutability": "mutable",
                      "name": "denom",
                      "nodeType": "VariableDeclaration",
                      "scope": 774,
                      "src": "7413:13:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 739,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7413:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 759,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 758,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 754,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 750,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "hexValue": "39",
                          "id": 741,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "7429:1:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_9_by_1",
                            "typeString": "int_const 9"
                          },
                          "value": "9"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "*",
                        "rightExpression": {
                          "components": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 748,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 744,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 742,
                                  "name": "x",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 734,
                                  "src": "7434:1:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "**",
                                "rightExpression": {
                                  "hexValue": "32",
                                  "id": 743,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "7439:1:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_2_by_1",
                                    "typeString": "int_const 2"
                                  },
                                  "value": "2"
                                },
                                "src": "7434:6:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "/",
                              "rightExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_rational_1000000_by_1",
                                  "typeString": "int_const 1000000"
                                },
                                "id": 747,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "hexValue": "3130",
                                  "id": 745,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "7443:2:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_10_by_1",
                                    "typeString": "int_const 10"
                                  },
                                  "value": "10"
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "**",
                                "rightExpression": {
                                  "hexValue": "36",
                                  "id": 746,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "7449:1:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_6_by_1",
                                    "typeString": "int_const 6"
                                  },
                                  "value": "6"
                                },
                                "src": "7443:7:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1000000_by_1",
                                  "typeString": "int_const 1000000"
                                }
                              },
                              "src": "7434:16:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "id": 749,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "7433:18:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "7429:22:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "+",
                      "rightExpression": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 753,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "hexValue": "33",
                          "id": 751,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "7455:1:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_3_by_1",
                            "typeString": "int_const 3"
                          },
                          "value": "3"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "*",
                        "rightExpression": {
                          "id": 752,
                          "name": "x",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 734,
                          "src": "7459:1:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "7455:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "7429:31:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "+",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_rational_1000000_by_1",
                        "typeString": "int_const 1000000"
                      },
                      "id": 757,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "leftExpression": {
                        "hexValue": "3130",
                        "id": 755,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7463:2:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_10_by_1",
                          "typeString": "int_const 10"
                        },
                        "value": "10"
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "**",
                      "rightExpression": {
                        "hexValue": "36",
                        "id": 756,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7469:1:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_6_by_1",
                          "typeString": "int_const 6"
                        },
                        "value": "6"
                      },
                      "src": "7463:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1000000_by_1",
                        "typeString": "int_const 1000000"
                      }
                    },
                    "src": "7429:41:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7413:57:8"
                },
                {
                  "assignments": [
                    761
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 761,
                      "mutability": "mutable",
                      "name": "num",
                      "nodeType": "VariableDeclaration",
                      "scope": 774,
                      "src": "7480:11:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 760,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7480:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 765,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_rational_1000000000000_by_1",
                      "typeString": "int_const 1000000000000"
                    },
                    "id": 764,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "leftExpression": {
                      "hexValue": "3130",
                      "id": 762,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "7494:2:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_10_by_1",
                        "typeString": "int_const 10"
                      },
                      "value": "10"
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "**",
                    "rightExpression": {
                      "hexValue": "3132",
                      "id": 763,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "7500:2:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_12_by_1",
                        "typeString": "int_const 12"
                      },
                      "value": "12"
                    },
                    "src": "7494:8:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_1000000000000_by_1",
                      "typeString": "int_const 1000000000000"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7480:22:8"
                },
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 772,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_rational_1000000_by_1",
                        "typeString": "int_const 1000000"
                      },
                      "id": 768,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "leftExpression": {
                        "hexValue": "3130",
                        "id": 766,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7520:2:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_10_by_1",
                          "typeString": "int_const 10"
                        },
                        "value": "10"
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "**",
                      "rightExpression": {
                        "hexValue": "36",
                        "id": 767,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7526:1:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_6_by_1",
                          "typeString": "int_const 6"
                        },
                        "value": "6"
                      },
                      "src": "7520:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1000000_by_1",
                        "typeString": "int_const 1000000"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "-",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 771,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 769,
                        "name": "num",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 761,
                        "src": "7530:3:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "/",
                      "rightExpression": {
                        "id": 770,
                        "name": "denom",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 740,
                        "src": "7536:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "7530:11:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7520:21:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 738,
                  "id": 773,
                  "nodeType": "Return",
                  "src": "7513:28:8"
                }
              ]
            },
            "id": 775,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "L",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 735,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 734,
                  "mutability": "mutable",
                  "name": "x",
                  "nodeType": "VariableDeclaration",
                  "scope": 775,
                  "src": "7334:9:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 733,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7334:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7333:11:8"
            },
            "returnParameters": {
              "id": 738,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 737,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 775,
                  "src": "7368:7:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 736,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7368:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7367:9:8"
            },
            "scope": 844,
            "src": "7323:225:8",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 818,
              "nodeType": "Block",
              "src": "7626:246:8",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 784,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 782,
                      "name": "btcPrice",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 777,
                      "src": "7657:8:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "id": 783,
                      "name": "lastBtcPrice",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 208,
                      "src": "7668:12:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7657:23:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 816,
                    "nodeType": "Block",
                    "src": "7781:84:8",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_rational_1000000_by_1",
                                "typeString": "int_const 1000000"
                              },
                              "id": 813,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "leftExpression": {
                                "hexValue": "3130",
                                "id": 811,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "7846:2:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_10_by_1",
                                  "typeString": "int_const 10"
                                },
                                "value": "10"
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "**",
                              "rightExpression": {
                                "hexValue": "36",
                                "id": 812,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "7852:1:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_6_by_1",
                                  "typeString": "int_const 6"
                                },
                                "value": "6"
                              },
                              "src": "7846:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1000000_by_1",
                                "typeString": "int_const 1000000"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_1000000_by_1",
                                "typeString": "int_const 1000000"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 808,
                                  "name": "btcPrice",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 777,
                                  "src": "7832:8:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "arguments": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_rational_1000000_by_1",
                                        "typeString": "int_const 1000000"
                                      },
                                      "id": 805,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "hexValue": "3130",
                                        "id": 803,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "7819:2:8",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_10_by_1",
                                          "typeString": "int_const 10"
                                        },
                                        "value": "10"
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "**",
                                      "rightExpression": {
                                        "hexValue": "36",
                                        "id": 804,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "7825:1:8",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_6_by_1",
                                          "typeString": "int_const 6"
                                        },
                                        "value": "6"
                                      },
                                      "src": "7819:7:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_1000000_by_1",
                                        "typeString": "int_const 1000000"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_1000000_by_1",
                                        "typeString": "int_const 1000000"
                                      }
                                    ],
                                    "expression": {
                                      "id": 801,
                                      "name": "lastBtcPrice",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 208,
                                      "src": "7802:12:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 802,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "mul",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1762,
                                    "src": "7802:16:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 806,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "7802:25:8",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 807,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "div",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1777,
                                "src": "7802:29:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                  "typeString": "function (uint256,uint256) pure returns (uint256)"
                                }
                              },
                              "id": 809,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "7802:39:8",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 810,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sub",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1747,
                            "src": "7802:43:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 814,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7802:52:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 781,
                        "id": 815,
                        "nodeType": "Return",
                        "src": "7795:59:8"
                      }
                    ]
                  },
                  "id": 817,
                  "nodeType": "IfStatement",
                  "src": "7653:212:8",
                  "trueBody": {
                    "id": 800,
                    "nodeType": "Block",
                    "src": "7682:84:8",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_rational_1000000_by_1",
                                "typeString": "int_const 1000000"
                              },
                              "id": 797,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "leftExpression": {
                                "hexValue": "3130",
                                "id": 795,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "7747:2:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_10_by_1",
                                  "typeString": "int_const 10"
                                },
                                "value": "10"
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "**",
                              "rightExpression": {
                                "hexValue": "36",
                                "id": 796,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "7753:1:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_6_by_1",
                                  "typeString": "int_const 6"
                                },
                                "value": "6"
                              },
                              "src": "7747:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1000000_by_1",
                                "typeString": "int_const 1000000"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_1000000_by_1",
                                "typeString": "int_const 1000000"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 792,
                                  "name": "lastBtcPrice",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 208,
                                  "src": "7729:12:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "arguments": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_rational_1000000_by_1",
                                        "typeString": "int_const 1000000"
                                      },
                                      "id": 789,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "hexValue": "3130",
                                        "id": 787,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "7716:2:8",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_10_by_1",
                                          "typeString": "int_const 10"
                                        },
                                        "value": "10"
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "**",
                                      "rightExpression": {
                                        "hexValue": "36",
                                        "id": 788,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "7722:1:8",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_6_by_1",
                                          "typeString": "int_const 6"
                                        },
                                        "value": "6"
                                      },
                                      "src": "7716:7:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_1000000_by_1",
                                        "typeString": "int_const 1000000"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_1000000_by_1",
                                        "typeString": "int_const 1000000"
                                      }
                                    ],
                                    "expression": {
                                      "id": 785,
                                      "name": "btcPrice",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 777,
                                      "src": "7703:8:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 786,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "mul",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1762,
                                    "src": "7703:12:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 790,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "7703:21:8",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 791,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "div",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1777,
                                "src": "7703:25:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                  "typeString": "function (uint256,uint256) pure returns (uint256)"
                                }
                              },
                              "id": 793,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "7703:39:8",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 794,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sub",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1747,
                            "src": "7703:43:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 798,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7703:52:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 781,
                        "id": 799,
                        "nodeType": "Return",
                        "src": "7696:59:8"
                      }
                    ]
                  }
                }
              ]
            },
            "id": 819,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getPriceDiff",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 778,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 777,
                  "mutability": "mutable",
                  "name": "btcPrice",
                  "nodeType": "VariableDeclaration",
                  "scope": 819,
                  "src": "7576:16:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 776,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7576:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7575:18:8"
            },
            "returnParameters": {
              "id": 781,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 780,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 819,
                  "src": "7617:7:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 779,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7617:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7616:9:8"
            },
            "scope": 844,
            "src": "7554:318:8",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 830,
              "nodeType": "Block",
              "src": "7934:51:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 826,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "7967:3:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 827,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "7967:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 824,
                        "name": "btcUp",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 220,
                        "src": "7951:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_BTCUP_$108",
                          "typeString": "contract BTCUP"
                        }
                      },
                      "id": 825,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "balanceOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1047,
                      "src": "7951:15:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 828,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7951:27:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 823,
                  "id": 829,
                  "nodeType": "Return",
                  "src": "7944:34:8"
                }
              ]
            },
            "functionSelector": "157d0129",
            "id": 831,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getBtcupBalance",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 820,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7902:2:8"
            },
            "returnParameters": {
              "id": 823,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 822,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 831,
                  "src": "7925:7:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 821,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7925:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7924:9:8"
            },
            "scope": 844,
            "src": "7878:107:8",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 842,
              "nodeType": "Block",
              "src": "8049:53:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 838,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "8084:3:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 839,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "8084:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 836,
                        "name": "btcDown",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 223,
                        "src": "8066:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_BTCDOWN_$178",
                          "typeString": "contract BTCDOWN"
                        }
                      },
                      "id": 837,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "balanceOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1047,
                      "src": "8066:17:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 840,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8066:29:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 835,
                  "id": 841,
                  "nodeType": "Return",
                  "src": "8059:36:8"
                }
              ]
            },
            "functionSelector": "c7e3b124",
            "id": 843,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getBtcdownBalance",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 832,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8017:2:8"
            },
            "returnParameters": {
              "id": 835,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 834,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 843,
                  "src": "8040:7:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 833,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8040:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8039:9:8"
            },
            "scope": 844,
            "src": "7991:111:8",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 845,
        "src": "1863:6243:8"
      }
    ],
    "src": "32:8081:8"
  },
  "bytecode": "",
  "bytecodeSha1": "11d5b083e07ef311b36a7f2aec2356a5693a43e6",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.0+commit.c7dfd78e"
  },
  "contractName": "BTCDOWN",
  "coverageMap": {
    "branches": {
      "1": {
        "ERC20._approve": {
          "50": [
            10083,
            10102,
            true
          ],
          "51": [
            10161,
            10182,
            true
          ]
        },
        "ERC20._burn": {
          "55": [
            9036,
            9057,
            true
          ],
          "56": [
            9227,
            9251,
            true
          ]
        },
        "ERC20._mint": {
          "57": [
            8327,
            8348,
            true
          ]
        },
        "ERC20._transfer": {
          "52": [
            7390,
            7410,
            true
          ],
          "53": [
            7470,
            7493,
            true
          ],
          "54": [
            7661,
            7684,
            true
          ]
        },
        "ERC20.decreaseAllowance": {
          "49": [
            6564,
            6599,
            true
          ]
        },
        "ERC20.transferFrom": {
          "48": [
            5081,
            5107,
            true
          ]
        }
      },
      "2": {},
      "3": {},
      "4": {},
      "5": {},
      "8": {}
    },
    "statements": {
      "1": {
        "ERC20._approve": {
          "23": [
            10075,
            10143
          ],
          "24": [
            10153,
            10221
          ],
          "25": [
            10232,
            10268
          ],
          "26": [
            10278,
            10315
          ]
        },
        "ERC20._burn": {
          "35": [
            9028,
            9095
          ],
          "36": [
            9106,
            9155
          ],
          "37": [
            9219,
            9290
          ],
          "38": [
            9324,
            9368
          ],
          "39": [
            9388,
            9410
          ],
          "40": [
            9421,
            9463
          ],
          "41": [
            9474,
            9522
          ]
        },
        "ERC20._mint": {
          "42": [
            8319,
            8384
          ],
          "43": [
            8395,
            8444
          ],
          "44": [
            8455,
            8477
          ],
          "45": [
            8487,
            8515
          ],
          "46": [
            8525,
            8567
          ],
          "47": [
            8578,
            8626
          ]
        },
        "ERC20._transfer": {
          "27": [
            7382,
            7452
          ],
          "28": [
            7462,
            7533
          ],
          "29": [
            7544,
            7591
          ],
          "30": [
            7653,
            7727
          ],
          "31": [
            7761,
            7803
          ],
          "32": [
            7823,
            7853
          ],
          "33": [
            7864,
            7904
          ],
          "34": [
            7915,
            7961
          ]
        },
        "ERC20.allowance": {
          "21": [
            3992,
            4026
          ]
        },
        "ERC20.approve": {
          "1": [
            4270,
            4309
          ],
          "2": [
            4319,
            4330
          ]
        },
        "ERC20.balanceOf": {
          "11": [
            3419,
            3444
          ]
        },
        "ERC20.decreaseAllowance": {
          "17": [
            6556,
            6641
          ],
          "18": [
            6675,
            6742
          ],
          "19": [
            6763,
            6774
          ]
        },
        "ERC20.increaseAllowance": {
          "9": [
            5781,
            5861
          ]
        },
        "ERC20.name": {
          "0": [
            2153,
            2165
          ]
        },
        "ERC20.symbol": {
          "15": [
            2366,
            2380
          ]
        },
        "ERC20.totalSupply": {
          "3": [
            3242,
            3261
          ]
        },
        "ERC20.transfer": {
          "20": [
            3756,
            3798
          ]
        },
        "ERC20.transferFrom": {
          "4": [
            4956,
            4992
          ],
          "5": [
            5073,
            5152
          ],
          "6": [
            5186,
            5243
          ],
          "7": [
            5264,
            5275
          ]
        }
      },
      "2": {},
      "3": {
        "ERC20Burnable.burnFrom": {
          "12": [
            1027,
            1102
          ],
          "13": [
            1136,
            1194
          ],
          "14": [
            1214,
            1236
          ]
        }
      },
      "4": {},
      "5": {
        "Context._msgSender": {
          "22": [
            658,
            675
          ]
        }
      },
      "8": {
        "BTCDOWN.burn": {
          "10": [
            1644,
            1673
          ]
        },
        "BTCDOWN.decimals": {
          "8": [
            1753,
            1761
          ]
        },
        "BTCDOWN.mint": {
          "16": [
            1536,
            1562
          ]
        }
      }
    }
  },
  "dependencies": [
    "OpenZeppelin/openzeppelin-contracts@4.2.0/Context",
    "OpenZeppelin/openzeppelin-contracts@4.2.0/ERC20",
    "OpenZeppelin/openzeppelin-contracts@4.2.0/ERC20Burnable",
    "OpenZeppelin/openzeppelin-contracts@4.2.0/IERC20",
    "OpenZeppelin/openzeppelin-contracts@4.2.0/IERC20Metadata"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100ea5760003560e01c806370a082311161008c578063a0712d6811610066578063a0712d68146101c0578063a457c2d7146101d3578063a9059cbb146101e6578063dd62ed3e146101f9576100ea565b806370a082311461019257806379cc6790146101a557806395d89b41146101b8576100ea565b806323b872dd116100c857806323b872dd14610142578063313ce56714610155578063395093511461016a57806342966c681461017d576100ea565b806306fdde03146100ef578063095ea7b31461010d57806318160ddd1461012d575b600080fd5b6100f761020c565b60405161010491906109c1565b60405180910390f35b61012061011b366004610975565b61029e565b60405161010491906109b6565b6101356102bb565b6040516101049190610cf3565b61012061015036600461093a565b6102c1565b61015d61035a565b6040516101049190610cfc565b610120610178366004610975565b61035f565b61019061018b36600461099e565b6103b3565b005b6101356101a03660046108e7565b6103d7565b6101906101b3366004610975565b6103f6565b6100f7610449565b6101906101ce36600461099e565b610458565b6101206101e1366004610975565b610479565b6101206101f4366004610975565b6104f2565b610135610207366004610908565b610506565b60606003805461021b90610d39565b80601f016020809104026020016040519081016040528092919081815260200182805461024790610d39565b80156102945780601f1061026957610100808354040283529160200191610294565b820191906000526020600020905b81548152906001019060200180831161027757829003601f168201915b5050505050905090565b60006102b26102ab610531565b8484610535565b50600192915050565b60025490565b60006102ce8484846105e9565b6001600160a01b0384166000908152600160205260408120816102ef610531565b6001600160a01b03166001600160a01b031681526020019081526020016000205490508281101561033b5760405162461bcd60e51b815260040161033290610b21565b60405180910390fd5b61034f85610347610531565b858403610535565b506001949350505050565b600690565b60006102b261036c610531565b84846001600061037a610531565b6001600160a01b03908116825260208083019390935260409182016000908120918b16815292529020546103ae9190610d0a565b610535565b6005546001600160a01b031633146103ca57600080fd5b6103d432826103f6565b50565b6001600160a01b0381166000908152602081905260409020545b919050565b600061040483610207610531565b9050818110156104265760405162461bcd60e51b815260040161033290610b69565b61043a83610432610531565b848403610535565b6104448383610713565b505050565b60606004805461021b90610d39565b6005546001600160a01b0316331461046f57600080fd5b6103d43282610804565b60008060016000610488610531565b6001600160a01b03908116825260208083019390935260409182016000908120918816815292529020549050828110156104d45760405162461bcd60e51b815260040161033290610c77565b6104e86104df610531565b85858403610535565b5060019392505050565b60006102b26104ff610531565b84846105e9565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3390565b6001600160a01b03831661055b5760405162461bcd60e51b815260040161033290610c33565b6001600160a01b0382166105815760405162461bcd60e51b815260040161033290610a99565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906105dc908590610cf3565b60405180910390a3505050565b6001600160a01b03831661060f5760405162461bcd60e51b815260040161033290610bee565b6001600160a01b0382166106355760405162461bcd60e51b815260040161033290610a14565b610640838383610444565b6001600160a01b038316600090815260208190526040902054818110156106795760405162461bcd60e51b815260040161033290610adb565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906106b0908490610d0a565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106fa9190610cf3565b60405180910390a361070d848484610444565b50505050565b6001600160a01b0382166107395760405162461bcd60e51b815260040161033290610bad565b61074582600083610444565b6001600160a01b0382166000908152602081905260409020548181101561077e5760405162461bcd60e51b815260040161033290610a57565b6001600160a01b03831660009081526020819052604081208383039055600280548492906107ad908490610d22565b90915550506040516000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906107f0908690610cf3565b60405180910390a361044483600084610444565b6001600160a01b03821661082a5760405162461bcd60e51b815260040161033290610cbc565b61083660008383610444565b80600260008282546108489190610d0a565b90915550506001600160a01b03821660009081526020819052604081208054839290610875908490610d0a565b90915550506040516001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906108b8908590610cf3565b60405180910390a36108cc60008383610444565b5050565b80356001600160a01b03811681146103f157600080fd5b6000602082840312156108f8578081fd5b610901826108d0565b9392505050565b6000806040838503121561091a578081fd5b610923836108d0565b9150610931602084016108d0565b90509250929050565b60008060006060848603121561094e578081fd5b610957846108d0565b9250610965602085016108d0565b9150604084013590509250925092565b60008060408385031215610987578182fd5b610990836108d0565b946020939093013593505050565b6000602082840312156109af578081fd5b5035919050565b901515815260200190565b6000602080835283518082850152825b818110156109ed578581018301518582016040015282016109d1565b818111156109fe5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526022908201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604082015261636560f01b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526026908201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604082015265616c616e636560d01b606082015260800190565b60208082526028908201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616040820152676c6c6f77616e636560c01b606082015260800190565b60208082526024908201527f45524332303a206275726e20616d6f756e74206578636565647320616c6c6f77604082015263616e636560e01b606082015260800190565b60208082526021908201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526025908201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604082015264207a65726f60d81b606082015260800190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b90815260200190565b60ff91909116815260200190565b60008219821115610d1d57610d1d610d74565b500190565b600082821015610d3457610d34610d74565b500390565b600281046001821680610d4d57607f821691505b60208210811415610d6e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea26469706673582212204e1c6d573572959203575a7ef9e80d49a5273f50819d26ad7285e1265cc9eec664736f6c63430008000033",
  "deployedSourceMap": "1279:581:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2074:98:1;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4171:166;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3162:106::-;;;:::i;:::-;;;;;;;:::i;4804:478::-;;;;;;:::i;:::-;;:::i;1686:82:8:-;;;:::i;:::-;;;;;;;:::i;5677:212:1:-;;;;;;:::i;:::-;;:::i;1575:105:8:-;;;;;;:::i;:::-;;:::i;:::-;;3326:125:1;;;;;;:::i;:::-;;:::i;882:361:3:-;;;;;;:::i;:::-;;:::i;2285:102:1:-;;;:::i;1476:93:8:-;;;;;;:::i;:::-;;:::i;6376:405:1:-;;;;;;:::i;:::-;;:::i;3654:172::-;;;;;;:::i;:::-;;:::i;3884:149::-;;;;;;:::i;:::-;;:::i;2074:98::-;2128:13;2160:5;2153:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2074:98;:::o;4171:166::-;4254:4;4270:39;4279:12;:10;:12::i;:::-;4293:7;4302:6;4270:8;:39::i;:::-;-1:-1:-1;4326:4:1;4171:166;;;;:::o;3162:106::-;3249:12;;3162:106;:::o;4804:478::-;4940:4;4956:36;4966:6;4974:9;4985:6;4956:9;:36::i;:::-;-1:-1:-1;;;;;5030:19:1;;5003:24;5030:19;;;-1:-1:-1;5030:19:1;;;;;5003:24;5050:12;:10;:12::i;:::-;-1:-1:-1;;;;;5030:33:1;;;;;;;;;;;;-1:-1:-1;5030:33:1;;;-1:-1:-1;5081:26:1;;;;5073:79;;;;-1:-1:-1;;;5073:79:1;;;;;;;:::i;:::-;;;;;;;;;5186:57;5195:6;5203:12;:10;:12::i;:::-;5236:6;5217:16;:25;5186:8;:57::i;:::-;-1:-1:-1;5271:4:1;;4804:478;-1:-1:-1;;;;4804:478:1:o;1686:82:8:-;1760:1;1686:82;:::o;5677:212:1:-;5765:4;5781:80;5790:12;:10;:12::i;:::-;5804:7;5850:10;5813:11;:25;5825:12;:10;:12::i;:::-;-1:-1:-1;;;;;5813:25:1;;;;;;;;;;;;;;;;;-1:-1:-1;5813:25:1;;;:34;;;;;;;;;;:47;;;;:::i;:::-;5781:8;:80::i;1575:105:8:-;1826:13;;-1:-1:-1;;;;;1826:13:8;1812:10;:27;1804:36;;;;;;1644:29:::1;1653:9;1664:8;1644;:29::i;:::-;1575:105:::0;:::o;3326:125:1:-;-1:-1:-1;;;;;3426:18:1;;3400:7;3426:18;;;;;;;;;;;3326:125;;;;:::o;882:361:3:-;958:24;985:32;995:7;1004:12;:10;:12::i;985:32::-;958:59;;1055:6;1035:16;:26;;1027:75;;;;-1:-1:-1;;;1027:75:3;;;;;;;:::i;:::-;1136:58;1145:7;1154:12;:10;:12::i;:::-;1187:6;1168:16;:25;1136:8;:58::i;:::-;1214:22;1220:7;1229:6;1214:5;:22::i;:::-;882:361;;;:::o;2285:102:1:-;2341:13;2373:7;2366:14;;;;;:::i;1476:93:8:-;1826:13;;-1:-1:-1;;;;;1826:13:8;1812:10;:27;1804:36;;;;;;1536:26:::1;1542:9;1553:8;1536:5;:26::i;6376:405:1:-:0;6469:4;6485:24;6512:11;:25;6524:12;:10;:12::i;:::-;-1:-1:-1;;;;;6512:25:1;;;;;;;;;;;;;;;;;-1:-1:-1;6512:25:1;;;:34;;;;;;;;;;;-1:-1:-1;6564:35:1;;;;6556:85;;;;-1:-1:-1;;;6556:85:1;;;;;;;:::i;:::-;6675:67;6684:12;:10;:12::i;:::-;6698:7;6726:15;6707:16;:34;6675:8;:67::i;:::-;-1:-1:-1;6770:4:1;;6376:405;-1:-1:-1;;;6376:405:1:o;3654:172::-;3740:4;3756:42;3766:12;:10;:12::i;:::-;3780:9;3791:6;3756:9;:42::i;3884:149::-;-1:-1:-1;;;;;3999:18:1;;;3973:7;3999:18;;;-1:-1:-1;3999:18:1;;;;;;;;:27;;;;;;;;;;;;;3884:149::o;586:96:5:-;665:10;586:96;:::o;9952:370:1:-;-1:-1:-1;;;;;10083:19:1;;10075:68;;;;-1:-1:-1;;;10075:68:1;;;;;;;:::i;:::-;-1:-1:-1;;;;;10161:21:1;;10153:68;;;;-1:-1:-1;;;10153:68:1;;;;;;;:::i;:::-;-1:-1:-1;;;;;10232:18:1;;;;;;;-1:-1:-1;10232:18:1;;;;;;;;:27;;;;;;;;;;;;;;:36;;;10283:32;;;;;10232:36;;10283:32;:::i;:::-;;;;;;;;9952:370;;;:::o;7255:713::-;-1:-1:-1;;;;;7390:20:1;;7382:70;;;;-1:-1:-1;;;7382:70:1;;;;;;;:::i;:::-;-1:-1:-1;;;;;7470:23:1;;7462:71;;;;-1:-1:-1;;;7462:71:1;;;;;;;:::i;:::-;7544:47;7565:6;7573:9;7584:6;7544:20;:47::i;:::-;-1:-1:-1;;;;;7626:17:1;;7602:21;7626:17;;;;;;;;;;;7661:23;;;;7653:74;;;;-1:-1:-1;;;7653:74:1;;;;;;;:::i;:::-;-1:-1:-1;;;;;7761:17:1;;;:9;:17;;;;;;;;;;;7781:22;;;7761:42;;7823:20;;;;;;;;:30;;7781:22;;7761:9;7823:30;;7781:22;;7823:30;:::i;:::-;;;;-1:-1:-1;;7869:35:1;;-1:-1:-1;;;;;7869:35:1;;;;;;;;;;;;7897:6;;7869:35;:::i;:::-;;;;;;;;7915:46;7935:6;7943:9;7954:6;7915:19;:46::i;:::-;7255:713;;;;:::o;8953:576::-;-1:-1:-1;;;;;9036:21:1;;9028:67;;;;-1:-1:-1;;;9028:67:1;;;;;;;:::i;:::-;9106:49;9127:7;9144:1;9148:6;9106:20;:49::i;:::-;-1:-1:-1;;;;;9191:18:1;;9166:22;9191:18;;;;;;;;;;;9227:24;;;;9219:71;;;;-1:-1:-1;;;9219:71:1;;;;;;;:::i;:::-;-1:-1:-1;;;;;9324:18:1;;:9;:18;;;;;;;;;;9345:23;;;9324:44;;9388:12;:22;;9345:23;;9324:9;9388:22;;9345:23;;9388:22;:::i;:::-;;;;-1:-1:-1;;9426:37:1;;9452:1;;-1:-1:-1;;;;;9426:37:1;;;;;;;9456:6;;9426:37;:::i;:::-;;;;;;;;9474:48;9494:7;9511:1;9515:6;9474:19;:48::i;8244:389::-;-1:-1:-1;;;;;8327:21:1;;8319:65;;;;-1:-1:-1;;;8319:65:1;;;;;;;:::i;:::-;8395:49;8424:1;8428:7;8437:6;8395:20;:49::i;:::-;8471:6;8455:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;8487:18:1;;:9;:18;;;;;;;;;;:28;;8509:6;;8487:9;:28;;8509:6;;8487:28;:::i;:::-;;;;-1:-1:-1;;8530:37:1;;-1:-1:-1;;;;;8530:37:1;;;8547:1;;8530:37;;;;8560:6;;8530:37;:::i;:::-;;;;;;;;8578:48;8606:1;8610:7;8619:6;8578:19;:48::i;:::-;8244:389;;:::o;14:175:9:-;84:20;;-1:-1:-1;;;;;133:31:9;;123:42;;113:2;;179:1;176;169:12;194:198;;306:2;294:9;285:7;281:23;277:32;274:2;;;327:6;319;312:22;274:2;355:31;376:9;355:31;:::i;:::-;345:41;264:128;-1:-1:-1;;;264:128:9:o;397:274::-;;;526:2;514:9;505:7;501:23;497:32;494:2;;;547:6;539;532:22;494:2;575:31;596:9;575:31;:::i;:::-;565:41;;625:40;661:2;650:9;646:18;625:40;:::i;:::-;615:50;;484:187;;;;;:::o;676:342::-;;;;822:2;810:9;801:7;797:23;793:32;790:2;;;843:6;835;828:22;790:2;871:31;892:9;871:31;:::i;:::-;861:41;;921:40;957:2;946:9;942:18;921:40;:::i;:::-;911:50;;1008:2;997:9;993:18;980:32;970:42;;780:238;;;;;:::o;1023:266::-;;;1152:2;1140:9;1131:7;1127:23;1123:32;1120:2;;;1173:6;1165;1158:22;1120:2;1201:31;1222:9;1201:31;:::i;:::-;1191:41;1279:2;1264:18;;;;1251:32;;-1:-1:-1;;;1110:179:9:o;1294:190::-;;1406:2;1394:9;1385:7;1381:23;1377:32;1374:2;;;1427:6;1419;1412:22;1374:2;-1:-1:-1;1455:23:9;;1364:120;-1:-1:-1;1364:120:9:o;1489:187::-;1654:14;;1647:22;1629:41;;1617:2;1602:18;;1584:92::o;1681:603::-;;1822:2;1851;1840:9;1833:21;1883:6;1877:13;1926:6;1921:2;1910:9;1906:18;1899:34;1951:4;1964:140;1978:6;1975:1;1972:13;1964:140;;;2073:14;;;2069:23;;2063:30;2039:17;;;2058:2;2035:26;2028:66;1993:10;;1964:140;;;2122:6;2119:1;2116:13;2113:2;;;2192:4;2187:2;2178:6;2167:9;2163:22;2159:31;2152:45;2113:2;-1:-1:-1;2268:2:9;2247:15;-1:-1:-1;;2243:29:9;2228:45;;;;2275:2;2224:54;;1802:482;-1:-1:-1;;;1802:482:9:o;2289:399::-;2491:2;2473:21;;;2530:2;2510:18;;;2503:30;2569:34;2564:2;2549:18;;2542:62;-1:-1:-1;;;2635:2:9;2620:18;;2613:33;2678:3;2663:19;;2463:225::o;2693:398::-;2895:2;2877:21;;;2934:2;2914:18;;;2907:30;2973:34;2968:2;2953:18;;2946:62;-1:-1:-1;;;3039:2:9;3024:18;;3017:32;3081:3;3066:19;;2867:224::o;3096:398::-;3298:2;3280:21;;;3337:2;3317:18;;;3310:30;3376:34;3371:2;3356:18;;3349:62;-1:-1:-1;;;3442:2:9;3427:18;;3420:32;3484:3;3469:19;;3270:224::o;3499:402::-;3701:2;3683:21;;;3740:2;3720:18;;;3713:30;3779:34;3774:2;3759:18;;3752:62;-1:-1:-1;;;3845:2:9;3830:18;;3823:36;3891:3;3876:19;;3673:228::o;3906:404::-;4108:2;4090:21;;;4147:2;4127:18;;;4120:30;4186:34;4181:2;4166:18;;4159:62;-1:-1:-1;;;4252:2:9;4237:18;;4230:38;4300:3;4285:19;;4080:230::o;4315:400::-;4517:2;4499:21;;;4556:2;4536:18;;;4529:30;4595:34;4590:2;4575:18;;4568:62;-1:-1:-1;;;4661:2:9;4646:18;;4639:34;4705:3;4690:19;;4489:226::o;4720:397::-;4922:2;4904:21;;;4961:2;4941:18;;;4934:30;5000:34;4995:2;4980:18;;4973:62;-1:-1:-1;;;5066:2:9;5051:18;;5044:31;5107:3;5092:19;;4894:223::o;5122:401::-;5324:2;5306:21;;;5363:2;5343:18;;;5336:30;5402:34;5397:2;5382:18;;5375:62;-1:-1:-1;;;5468:2:9;5453:18;;5446:35;5513:3;5498:19;;5296:227::o;5528:400::-;5730:2;5712:21;;;5769:2;5749:18;;;5742:30;5808:34;5803:2;5788:18;;5781:62;-1:-1:-1;;;5874:2:9;5859:18;;5852:34;5918:3;5903:19;;5702:226::o;5933:401::-;6135:2;6117:21;;;6174:2;6154:18;;;6147:30;6213:34;6208:2;6193:18;;6186:62;-1:-1:-1;;;6279:2:9;6264:18;;6257:35;6324:3;6309:19;;6107:227::o;6339:355::-;6541:2;6523:21;;;6580:2;6560:18;;;6553:30;6619:33;6614:2;6599:18;;6592:61;6685:2;6670:18;;6513:181::o;6699:177::-;6845:25;;;6833:2;6818:18;;6800:76::o;6881:184::-;7053:4;7041:17;;;;7023:36;;7011:2;6996:18;;6978:87::o;7070:128::-;;7141:1;7137:6;7134:1;7131:13;7128:2;;;7147:18;;:::i;:::-;-1:-1:-1;7183:9:9;;7118:80::o;7203:125::-;;7271:1;7268;7265:8;7262:2;;;7276:18;;:::i;:::-;-1:-1:-1;7313:9:9;;7252:76::o;7333:380::-;7418:1;7408:12;;7465:1;7455:12;;;7476:2;;7530:4;7522:6;7518:17;7508:27;;7476:2;7583;7575:6;7572:14;7552:18;7549:38;7546:2;;;7629:10;7624:3;7620:20;7617:1;7610:31;7664:4;7661:1;7654:15;7692:4;7689:1;7682:15;7546:2;;7388:325;;;:::o;7718:127::-;7779:10;7774:3;7770:20;7767:1;7760:31;7810:4;7807:1;7800:15;7834:4;7831:1;7824:15",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burnFrom(address,uint256)": {
        "details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "offset": [
    1279,
    1860
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xEA JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA0712D68 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA0712D68 EQ PUSH2 0x1C0 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x1D3 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1F9 JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x192 JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x1A5 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1B8 JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x142 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x155 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x16A JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x17D JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x10D JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x12D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF7 PUSH2 0x20C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0x9C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x120 PUSH2 0x11B CALLDATASIZE PUSH1 0x4 PUSH2 0x975 JUMP JUMPDEST PUSH2 0x29E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0x9B6 JUMP JUMPDEST PUSH2 0x135 PUSH2 0x2BB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0xCF3 JUMP JUMPDEST PUSH2 0x120 PUSH2 0x150 CALLDATASIZE PUSH1 0x4 PUSH2 0x93A JUMP JUMPDEST PUSH2 0x2C1 JUMP JUMPDEST PUSH2 0x15D PUSH2 0x35A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0xCFC JUMP JUMPDEST PUSH2 0x120 PUSH2 0x178 CALLDATASIZE PUSH1 0x4 PUSH2 0x975 JUMP JUMPDEST PUSH2 0x35F JUMP JUMPDEST PUSH2 0x190 PUSH2 0x18B CALLDATASIZE PUSH1 0x4 PUSH2 0x99E JUMP JUMPDEST PUSH2 0x3B3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x135 PUSH2 0x1A0 CALLDATASIZE PUSH1 0x4 PUSH2 0x8E7 JUMP JUMPDEST PUSH2 0x3D7 JUMP JUMPDEST PUSH2 0x190 PUSH2 0x1B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x975 JUMP JUMPDEST PUSH2 0x3F6 JUMP JUMPDEST PUSH2 0xF7 PUSH2 0x449 JUMP JUMPDEST PUSH2 0x190 PUSH2 0x1CE CALLDATASIZE PUSH1 0x4 PUSH2 0x99E JUMP JUMPDEST PUSH2 0x458 JUMP JUMPDEST PUSH2 0x120 PUSH2 0x1E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x975 JUMP JUMPDEST PUSH2 0x479 JUMP JUMPDEST PUSH2 0x120 PUSH2 0x1F4 CALLDATASIZE PUSH1 0x4 PUSH2 0x975 JUMP JUMPDEST PUSH2 0x4F2 JUMP JUMPDEST PUSH2 0x135 PUSH2 0x207 CALLDATASIZE PUSH1 0x4 PUSH2 0x908 JUMP JUMPDEST PUSH2 0x506 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x21B SWAP1 PUSH2 0xD39 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x247 SWAP1 PUSH2 0xD39 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x294 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x269 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x294 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x277 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B2 PUSH2 0x2AB PUSH2 0x531 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x535 JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CE DUP5 DUP5 DUP5 PUSH2 0x5E9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 PUSH2 0x2EF PUSH2 0x531 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0x33B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xB21 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x34F DUP6 PUSH2 0x347 PUSH2 0x531 JUMP JUMPDEST DUP6 DUP5 SUB PUSH2 0x535 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x6 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B2 PUSH2 0x36C PUSH2 0x531 JUMP JUMPDEST DUP5 DUP5 PUSH1 0x1 PUSH1 0x0 PUSH2 0x37A PUSH2 0x531 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP12 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH2 0x3AE SWAP2 SWAP1 PUSH2 0xD0A JUMP JUMPDEST PUSH2 0x535 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3D4 ORIGIN DUP3 PUSH2 0x3F6 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x404 DUP4 PUSH2 0x207 PUSH2 0x531 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x426 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xB69 JUMP JUMPDEST PUSH2 0x43A DUP4 PUSH2 0x432 PUSH2 0x531 JUMP JUMPDEST DUP5 DUP5 SUB PUSH2 0x535 JUMP JUMPDEST PUSH2 0x444 DUP4 DUP4 PUSH2 0x713 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x21B SWAP1 PUSH2 0xD39 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x46F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3D4 ORIGIN DUP3 PUSH2 0x804 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x488 PUSH2 0x531 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP9 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0x4D4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xC77 JUMP JUMPDEST PUSH2 0x4E8 PUSH2 0x4DF PUSH2 0x531 JUMP JUMPDEST DUP6 DUP6 DUP5 SUB PUSH2 0x535 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B2 PUSH2 0x4FF PUSH2 0x531 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x5E9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x55B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xC33 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x581 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xA99 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE MLOAD PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP1 PUSH2 0x5DC SWAP1 DUP6 SWAP1 PUSH2 0xCF3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x60F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xBEE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x635 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xA14 JUMP JUMPDEST PUSH2 0x640 DUP4 DUP4 DUP4 PUSH2 0x444 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x679 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xADB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x6B0 SWAP1 DUP5 SWAP1 PUSH2 0xD0A JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x6FA SWAP2 SWAP1 PUSH2 0xCF3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x70D DUP5 DUP5 DUP5 PUSH2 0x444 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x739 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xBAD JUMP JUMPDEST PUSH2 0x745 DUP3 PUSH1 0x0 DUP4 PUSH2 0x444 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x77E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xA57 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP4 DUP4 SUB SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x7AD SWAP1 DUP5 SWAP1 PUSH2 0xD22 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x7F0 SWAP1 DUP7 SWAP1 PUSH2 0xCF3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x444 DUP4 PUSH1 0x0 DUP5 PUSH2 0x444 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x82A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xCBC JUMP JUMPDEST PUSH2 0x836 PUSH1 0x0 DUP4 DUP4 PUSH2 0x444 JUMP JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x848 SWAP2 SWAP1 PUSH2 0xD0A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x875 SWAP1 DUP5 SWAP1 PUSH2 0xD0A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x8B8 SWAP1 DUP6 SWAP1 PUSH2 0xCF3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x8CC PUSH1 0x0 DUP4 DUP4 PUSH2 0x444 JUMP JUMPDEST POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x3F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8F8 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x901 DUP3 PUSH2 0x8D0 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x91A JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x923 DUP4 PUSH2 0x8D0 JUMP JUMPDEST SWAP2 POP PUSH2 0x931 PUSH1 0x20 DUP5 ADD PUSH2 0x8D0 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x94E JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x957 DUP5 PUSH2 0x8D0 JUMP JUMPDEST SWAP3 POP PUSH2 0x965 PUSH1 0x20 DUP6 ADD PUSH2 0x8D0 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x987 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x990 DUP4 PUSH2 0x8D0 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9AF JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x9ED JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x9D1 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x9FE JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x40 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732061 PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x6C6C6F77616E6365 PUSH1 0xC0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E74206578636565647320616C6C6F77 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x616E6365 PUSH1 0xE0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x21 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1F SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xD1D JUMPI PUSH2 0xD1D PUSH2 0xD74 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xD34 JUMPI PUSH2 0xD34 PUSH2 0xD74 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP2 DIV PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xD4D JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0xD6E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4E SHR PUSH14 0x573572959203575A7EF9E80D49A5 0x27 EXTCODEHASH POP DUP2 SWAP14 0x26 0xAD PUSH19 0x85E1265CC9EEC664736F6C6343000800003300 ",
  "pcMap": {
    "0": {
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "5": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "CALLVALUE",
      "path": "8"
    },
    "6": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "DUP1",
      "path": "8"
    },
    "7": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "ISZERO",
      "path": "8"
    },
    "8": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "12": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "DUP1",
      "path": "8"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "REVERT",
      "path": "8"
    },
    "16": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "17": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "POP",
      "path": "8"
    },
    "18": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "CALLDATASIZE",
      "path": "8"
    },
    "21": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "LT",
      "path": "8"
    },
    "22": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xEA"
    },
    "25": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "26": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "CALLDATALOAD",
      "path": "8"
    },
    "29": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "SHR",
      "path": "8"
    },
    "32": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "DUP1",
      "path": "8"
    },
    "33": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x70A08231"
    },
    "38": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "GT",
      "path": "8"
    },
    "39": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x8C"
    },
    "42": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "43": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "DUP1",
      "path": "8"
    },
    "44": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0xA0712D68"
    },
    "49": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "GT",
      "path": "8"
    },
    "50": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x66"
    },
    "53": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "54": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "DUP1",
      "path": "8"
    },
    "55": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0xA0712D68"
    },
    "60": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "EQ",
      "path": "8"
    },
    "61": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1C0"
    },
    "64": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "65": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "DUP1",
      "path": "8"
    },
    "66": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0xA457C2D7"
    },
    "71": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "EQ",
      "path": "8"
    },
    "72": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1D3"
    },
    "75": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "76": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "DUP1",
      "path": "8"
    },
    "77": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0xA9059CBB"
    },
    "82": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "EQ",
      "path": "8"
    },
    "83": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1E6"
    },
    "86": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "87": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "DUP1",
      "path": "8"
    },
    "88": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0xDD62ED3E"
    },
    "93": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "EQ",
      "path": "8"
    },
    "94": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1F9"
    },
    "97": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "98": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xEA"
    },
    "101": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "JUMP",
      "path": "8"
    },
    "102": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "103": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "DUP1",
      "path": "8"
    },
    "104": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x70A08231"
    },
    "109": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "EQ",
      "path": "8"
    },
    "110": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x192"
    },
    "113": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "114": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "DUP1",
      "path": "8"
    },
    "115": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x79CC6790"
    },
    "120": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "EQ",
      "path": "8"
    },
    "121": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1A5"
    },
    "124": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "125": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "DUP1",
      "path": "8"
    },
    "126": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x95D89B41"
    },
    "131": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "EQ",
      "path": "8"
    },
    "132": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1B8"
    },
    "135": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "136": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xEA"
    },
    "139": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "JUMP",
      "path": "8"
    },
    "140": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "141": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "DUP1",
      "path": "8"
    },
    "142": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x23B872DD"
    },
    "147": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "GT",
      "path": "8"
    },
    "148": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xC8"
    },
    "151": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "152": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "DUP1",
      "path": "8"
    },
    "153": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x23B872DD"
    },
    "158": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "EQ",
      "path": "8"
    },
    "159": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x142"
    },
    "162": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "163": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "DUP1",
      "path": "8"
    },
    "164": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x313CE567"
    },
    "169": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "EQ",
      "path": "8"
    },
    "170": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x155"
    },
    "173": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "174": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "DUP1",
      "path": "8"
    },
    "175": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x39509351"
    },
    "180": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "EQ",
      "path": "8"
    },
    "181": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x16A"
    },
    "184": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "185": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "DUP1",
      "path": "8"
    },
    "186": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x42966C68"
    },
    "191": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "EQ",
      "path": "8"
    },
    "192": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x17D"
    },
    "195": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "196": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xEA"
    },
    "199": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "JUMP",
      "path": "8"
    },
    "200": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "201": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "DUP1",
      "path": "8"
    },
    "202": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x6FDDE03"
    },
    "207": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "EQ",
      "path": "8"
    },
    "208": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xEF"
    },
    "211": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "212": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "DUP1",
      "path": "8"
    },
    "213": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x95EA7B3"
    },
    "218": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "EQ",
      "path": "8"
    },
    "219": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x10D"
    },
    "222": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "223": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "DUP1",
      "path": "8"
    },
    "224": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x18160DDD"
    },
    "229": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "EQ",
      "path": "8"
    },
    "230": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x12D"
    },
    "233": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "234": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "235": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "237": {
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "DUP1",
      "path": "8"
    },
    "238": {
      "first_revert": true,
      "fn": null,
      "offset": [
        1279,
        1860
      ],
      "op": "REVERT",
      "path": "8"
    },
    "239": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "240": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xF7"
    },
    "243": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x20C"
    },
    "246": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        2074,
        2172
      ],
      "op": "JUMP",
      "path": "1"
    },
    "247": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "248": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "250": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "251": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x104"
    },
    "254": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "255": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "256": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x9C1"
    },
    "259": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        2074,
        2172
      ],
      "op": "JUMP",
      "path": "1"
    },
    "260": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "261": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "263": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "264": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "DUP1",
      "path": "1"
    },
    "265": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "266": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "SUB",
      "path": "1"
    },
    "267": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "268": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "RETURN",
      "path": "1"
    },
    "269": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "270": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x120"
    },
    "273": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x11B"
    },
    "276": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "277": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "279": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x975"
    },
    "282": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        4171,
        4337
      ],
      "op": "JUMP",
      "path": "1"
    },
    "283": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "284": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x29E"
    },
    "287": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        4171,
        4337
      ],
      "op": "JUMP",
      "path": "1"
    },
    "288": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "289": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "291": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "292": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x104"
    },
    "295": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "296": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "297": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x9B6"
    },
    "300": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        4171,
        4337
      ],
      "op": "JUMP",
      "path": "1"
    },
    "301": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3162,
        3268
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "302": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3162,
        3268
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x135"
    },
    "305": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3162,
        3268
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2BB"
    },
    "308": {
      "fn": "ERC20.totalSupply",
      "jump": "i",
      "offset": [
        3162,
        3268
      ],
      "op": "JUMP",
      "path": "1"
    },
    "309": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3162,
        3268
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "310": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3162,
        3268
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "312": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3162,
        3268
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "313": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3162,
        3268
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x104"
    },
    "316": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3162,
        3268
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "317": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3162,
        3268
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "318": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3162,
        3268
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xCF3"
    },
    "321": {
      "fn": "ERC20.totalSupply",
      "jump": "i",
      "offset": [
        3162,
        3268
      ],
      "op": "JUMP",
      "path": "1"
    },
    "322": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4804,
        5282
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "323": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4804,
        5282
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x120"
    },
    "326": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4804,
        5282
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x150"
    },
    "329": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4804,
        5282
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "330": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4804,
        5282
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "332": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4804,
        5282
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x93A"
    },
    "335": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        4804,
        5282
      ],
      "op": "JUMP",
      "path": "1"
    },
    "336": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4804,
        5282
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "337": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4804,
        5282
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2C1"
    },
    "340": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        4804,
        5282
      ],
      "op": "JUMP",
      "path": "1"
    },
    "341": {
      "fn": "BTCDOWN.decimals",
      "offset": [
        1686,
        1768
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "342": {
      "fn": "BTCDOWN.decimals",
      "offset": [
        1686,
        1768
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x15D"
    },
    "345": {
      "fn": "BTCDOWN.decimals",
      "offset": [
        1686,
        1768
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x35A"
    },
    "348": {
      "fn": "BTCDOWN.decimals",
      "jump": "i",
      "offset": [
        1686,
        1768
      ],
      "op": "JUMP",
      "path": "8"
    },
    "349": {
      "fn": "BTCDOWN.decimals",
      "offset": [
        1686,
        1768
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "350": {
      "fn": "BTCDOWN.decimals",
      "offset": [
        1686,
        1768
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "352": {
      "fn": "BTCDOWN.decimals",
      "offset": [
        1686,
        1768
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "353": {
      "fn": "BTCDOWN.decimals",
      "offset": [
        1686,
        1768
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x104"
    },
    "356": {
      "fn": "BTCDOWN.decimals",
      "offset": [
        1686,
        1768
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "357": {
      "fn": "BTCDOWN.decimals",
      "offset": [
        1686,
        1768
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "358": {
      "fn": "BTCDOWN.decimals",
      "offset": [
        1686,
        1768
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xCFC"
    },
    "361": {
      "fn": "BTCDOWN.decimals",
      "jump": "i",
      "offset": [
        1686,
        1768
      ],
      "op": "JUMP",
      "path": "8"
    },
    "362": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5677,
        5889
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "363": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5677,
        5889
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x120"
    },
    "366": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5677,
        5889
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x178"
    },
    "369": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5677,
        5889
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "370": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5677,
        5889
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "372": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5677,
        5889
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x975"
    },
    "375": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5677,
        5889
      ],
      "op": "JUMP",
      "path": "1"
    },
    "376": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5677,
        5889
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "377": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5677,
        5889
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x35F"
    },
    "380": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5677,
        5889
      ],
      "op": "JUMP",
      "path": "1"
    },
    "381": {
      "fn": "BTCDOWN.burn",
      "offset": [
        1575,
        1680
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "382": {
      "fn": "BTCDOWN.burn",
      "offset": [
        1575,
        1680
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x190"
    },
    "385": {
      "fn": "BTCDOWN.burn",
      "offset": [
        1575,
        1680
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x18B"
    },
    "388": {
      "fn": "BTCDOWN.burn",
      "offset": [
        1575,
        1680
      ],
      "op": "CALLDATASIZE",
      "path": "8"
    },
    "389": {
      "fn": "BTCDOWN.burn",
      "offset": [
        1575,
        1680
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "391": {
      "fn": "BTCDOWN.burn",
      "offset": [
        1575,
        1680
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x99E"
    },
    "394": {
      "fn": "BTCDOWN.burn",
      "jump": "i",
      "offset": [
        1575,
        1680
      ],
      "op": "JUMP",
      "path": "8"
    },
    "395": {
      "fn": "BTCDOWN.burn",
      "offset": [
        1575,
        1680
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "396": {
      "fn": "BTCDOWN.burn",
      "offset": [
        1575,
        1680
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x3B3"
    },
    "399": {
      "fn": "BTCDOWN.burn",
      "jump": "i",
      "offset": [
        1575,
        1680
      ],
      "op": "JUMP",
      "path": "8"
    },
    "400": {
      "fn": "BTCDOWN.burn",
      "offset": [
        1575,
        1680
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "401": {
      "fn": "BTCDOWN.burn",
      "offset": [
        1575,
        1680
      ],
      "op": "STOP",
      "path": "8"
    },
    "402": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3326,
        3451
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "403": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3326,
        3451
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x135"
    },
    "406": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3326,
        3451
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1A0"
    },
    "409": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3326,
        3451
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "410": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3326,
        3451
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "412": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3326,
        3451
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x8E7"
    },
    "415": {
      "fn": "ERC20.balanceOf",
      "jump": "i",
      "offset": [
        3326,
        3451
      ],
      "op": "JUMP",
      "path": "1"
    },
    "416": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3326,
        3451
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "417": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3326,
        3451
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x3D7"
    },
    "420": {
      "fn": "ERC20.balanceOf",
      "jump": "i",
      "offset": [
        3326,
        3451
      ],
      "op": "JUMP",
      "path": "1"
    },
    "421": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        882,
        1243
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "422": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        882,
        1243
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x190"
    },
    "425": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        882,
        1243
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1B3"
    },
    "428": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        882,
        1243
      ],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "429": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        882,
        1243
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "431": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        882,
        1243
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x975"
    },
    "434": {
      "fn": "ERC20Burnable.burnFrom",
      "jump": "i",
      "offset": [
        882,
        1243
      ],
      "op": "JUMP",
      "path": "3"
    },
    "435": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        882,
        1243
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "436": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        882,
        1243
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x3F6"
    },
    "439": {
      "fn": "ERC20Burnable.burnFrom",
      "jump": "i",
      "offset": [
        882,
        1243
      ],
      "op": "JUMP",
      "path": "3"
    },
    "440": {
      "fn": "ERC20.symbol",
      "offset": [
        2285,
        2387
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "441": {
      "fn": "ERC20.symbol",
      "offset": [
        2285,
        2387
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xF7"
    },
    "444": {
      "fn": "ERC20.symbol",
      "offset": [
        2285,
        2387
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x449"
    },
    "447": {
      "fn": "ERC20.symbol",
      "jump": "i",
      "offset": [
        2285,
        2387
      ],
      "op": "JUMP",
      "path": "1"
    },
    "448": {
      "fn": "BTCDOWN.mint",
      "offset": [
        1476,
        1569
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "449": {
      "fn": "BTCDOWN.mint",
      "offset": [
        1476,
        1569
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x190"
    },
    "452": {
      "fn": "BTCDOWN.mint",
      "offset": [
        1476,
        1569
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1CE"
    },
    "455": {
      "fn": "BTCDOWN.mint",
      "offset": [
        1476,
        1569
      ],
      "op": "CALLDATASIZE",
      "path": "8"
    },
    "456": {
      "fn": "BTCDOWN.mint",
      "offset": [
        1476,
        1569
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "458": {
      "fn": "BTCDOWN.mint",
      "offset": [
        1476,
        1569
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x99E"
    },
    "461": {
      "fn": "BTCDOWN.mint",
      "jump": "i",
      "offset": [
        1476,
        1569
      ],
      "op": "JUMP",
      "path": "8"
    },
    "462": {
      "fn": "BTCDOWN.mint",
      "offset": [
        1476,
        1569
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "463": {
      "fn": "BTCDOWN.mint",
      "offset": [
        1476,
        1569
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x458"
    },
    "466": {
      "fn": "BTCDOWN.mint",
      "jump": "i",
      "offset": [
        1476,
        1569
      ],
      "op": "JUMP",
      "path": "8"
    },
    "467": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6376,
        6781
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "468": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6376,
        6781
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x120"
    },
    "471": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6376,
        6781
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1E1"
    },
    "474": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6376,
        6781
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "475": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6376,
        6781
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "477": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6376,
        6781
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x975"
    },
    "480": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6376,
        6781
      ],
      "op": "JUMP",
      "path": "1"
    },
    "481": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6376,
        6781
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "482": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6376,
        6781
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x479"
    },
    "485": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6376,
        6781
      ],
      "op": "JUMP",
      "path": "1"
    },
    "486": {
      "fn": "ERC20.transfer",
      "offset": [
        3654,
        3826
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "487": {
      "fn": "ERC20.transfer",
      "offset": [
        3654,
        3826
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x120"
    },
    "490": {
      "fn": "ERC20.transfer",
      "offset": [
        3654,
        3826
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1F4"
    },
    "493": {
      "fn": "ERC20.transfer",
      "offset": [
        3654,
        3826
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "494": {
      "fn": "ERC20.transfer",
      "offset": [
        3654,
        3826
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "496": {
      "fn": "ERC20.transfer",
      "offset": [
        3654,
        3826
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x975"
    },
    "499": {
      "fn": "ERC20.transfer",
      "jump": "i",
      "offset": [
        3654,
        3826
      ],
      "op": "JUMP",
      "path": "1"
    },
    "500": {
      "fn": "ERC20.transfer",
      "offset": [
        3654,
        3826
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "501": {
      "fn": "ERC20.transfer",
      "offset": [
        3654,
        3826
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x4F2"
    },
    "504": {
      "fn": "ERC20.transfer",
      "jump": "i",
      "offset": [
        3654,
        3826
      ],
      "op": "JUMP",
      "path": "1"
    },
    "505": {
      "fn": "ERC20.allowance",
      "offset": [
        3884,
        4033
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "506": {
      "fn": "ERC20.allowance",
      "offset": [
        3884,
        4033
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x135"
    },
    "509": {
      "fn": "ERC20.allowance",
      "offset": [
        3884,
        4033
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x207"
    },
    "512": {
      "fn": "ERC20.allowance",
      "offset": [
        3884,
        4033
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "513": {
      "fn": "ERC20.allowance",
      "offset": [
        3884,
        4033
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "515": {
      "fn": "ERC20.allowance",
      "offset": [
        3884,
        4033
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x908"
    },
    "518": {
      "fn": "ERC20.allowance",
      "jump": "i",
      "offset": [
        3884,
        4033
      ],
      "op": "JUMP",
      "path": "1"
    },
    "519": {
      "fn": "ERC20.allowance",
      "offset": [
        3884,
        4033
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "520": {
      "fn": "ERC20.allowance",
      "offset": [
        3884,
        4033
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x506"
    },
    "523": {
      "fn": "ERC20.allowance",
      "jump": "i",
      "offset": [
        3884,
        4033
      ],
      "op": "JUMP",
      "path": "1"
    },
    "524": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "525": {
      "fn": "ERC20.name",
      "offset": [
        2128,
        2141
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x60"
    },
    "527": {
      "fn": "ERC20.name",
      "offset": [
        2160,
        2165
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 0,
      "value": "0x3"
    },
    "529": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP1",
      "path": "1"
    },
    "530": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "531": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x21B"
    },
    "534": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "535": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xD39"
    },
    "538": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        2153,
        2165
      ],
      "op": "JUMP",
      "path": "1"
    },
    "539": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "540": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP1",
      "path": "1"
    },
    "541": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "543": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "ADD",
      "path": "1"
    },
    "544": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "546": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP1",
      "path": "1"
    },
    "547": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "548": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DIV",
      "path": "1"
    },
    "549": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "MUL",
      "path": "1"
    },
    "550": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "552": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "ADD",
      "path": "1"
    },
    "553": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "555": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "556": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "557": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP2",
      "path": "1"
    },
    "558": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "ADD",
      "path": "1"
    },
    "559": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "561": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "562": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP1",
      "path": "1"
    },
    "563": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "564": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "565": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "566": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP2",
      "path": "1"
    },
    "567": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP2",
      "path": "1"
    },
    "568": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "569": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "571": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "ADD",
      "path": "1"
    },
    "572": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP3",
      "path": "1"
    },
    "573": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP1",
      "path": "1"
    },
    "574": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "575": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x247"
    },
    "578": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "579": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xD39"
    },
    "582": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        2153,
        2165
      ],
      "op": "JUMP",
      "path": "1"
    },
    "583": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "584": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP1",
      "path": "1"
    },
    "585": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "586": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x294"
    },
    "589": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "590": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP1",
      "path": "1"
    },
    "591": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "593": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "LT",
      "path": "1"
    },
    "594": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x269"
    },
    "597": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "598": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x100"
    },
    "601": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP1",
      "path": "1"
    },
    "602": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP4",
      "path": "1"
    },
    "603": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "604": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DIV",
      "path": "1"
    },
    "605": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "MUL",
      "path": "1"
    },
    "606": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP4",
      "path": "1"
    },
    "607": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "608": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "609": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "611": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "ADD",
      "path": "1"
    },
    "612": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "613": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x294"
    },
    "616": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "JUMP",
      "path": "1"
    },
    "617": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "618": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP3",
      "path": "1"
    },
    "619": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "ADD",
      "path": "1"
    },
    "620": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "621": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "622": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "624": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "625": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "627": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "629": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "630": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "631": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "632": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP2",
      "path": "1"
    },
    "633": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "634": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP2",
      "path": "1"
    },
    "635": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "636": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "637": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "639": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "ADD",
      "path": "1"
    },
    "640": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "641": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "643": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "ADD",
      "path": "1"
    },
    "644": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP1",
      "path": "1"
    },
    "645": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP4",
      "path": "1"
    },
    "646": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "GT",
      "path": "1"
    },
    "647": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x277"
    },
    "650": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "651": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP3",
      "path": "1"
    },
    "652": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "653": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SUB",
      "path": "1"
    },
    "654": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "656": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "AND",
      "path": "1"
    },
    "657": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP3",
      "path": "1"
    },
    "658": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "ADD",
      "path": "1"
    },
    "659": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "660": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "661": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "POP",
      "path": "1"
    },
    "662": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "POP",
      "path": "1"
    },
    "663": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "POP",
      "path": "1"
    },
    "664": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "POP",
      "path": "1"
    },
    "665": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "POP",
      "path": "1"
    },
    "666": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "667": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "POP",
      "path": "1"
    },
    "668": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "669": {
      "fn": "ERC20.name",
      "jump": "o",
      "offset": [
        2074,
        2172
      ],
      "op": "JUMP",
      "path": "1"
    },
    "670": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "671": {
      "fn": "ERC20.approve",
      "offset": [
        4254,
        4258
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "673": {
      "fn": "ERC20.approve",
      "offset": [
        4270,
        4309
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 1,
      "value": "0x2B2"
    },
    "676": {
      "fn": "ERC20.approve",
      "offset": [
        4279,
        4291
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2AB"
    },
    "679": {
      "fn": "ERC20.approve",
      "offset": [
        4279,
        4289
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x531"
    },
    "682": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        4279,
        4291
      ],
      "op": "JUMP",
      "path": "1"
    },
    "683": {
      "fn": "ERC20.approve",
      "offset": [
        4279,
        4291
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "684": {
      "fn": "ERC20.approve",
      "offset": [
        4293,
        4300
      ],
      "op": "DUP5",
      "path": "1"
    },
    "685": {
      "fn": "ERC20.approve",
      "offset": [
        4302,
        4308
      ],
      "op": "DUP5",
      "path": "1"
    },
    "686": {
      "fn": "ERC20.approve",
      "offset": [
        4270,
        4278
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x535"
    },
    "689": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        4270,
        4309
      ],
      "op": "JUMP",
      "path": "1"
    },
    "690": {
      "fn": "ERC20.approve",
      "offset": [
        4270,
        4309
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "691": {
      "op": "POP"
    },
    "692": {
      "fn": "ERC20.approve",
      "offset": [
        4326,
        4330
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 2,
      "value": "0x1"
    },
    "694": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "695": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "696": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "POP",
      "path": "1"
    },
    "697": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "POP",
      "path": "1"
    },
    "698": {
      "fn": "ERC20.approve",
      "jump": "o",
      "offset": [
        4171,
        4337
      ],
      "op": "JUMP",
      "path": "1"
    },
    "699": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3162,
        3268
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "700": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3249,
        3261
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 3,
      "value": "0x2"
    },
    "702": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3249,
        3261
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "703": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3162,
        3268
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "704": {
      "fn": "ERC20.totalSupply",
      "jump": "o",
      "offset": [
        3162,
        3268
      ],
      "op": "JUMP",
      "path": "1"
    },
    "705": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4804,
        5282
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "706": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4940,
        4944
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "708": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4956,
        4992
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 4,
      "value": "0x2CE"
    },
    "711": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4966,
        4972
      ],
      "op": "DUP5",
      "path": "1"
    },
    "712": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4974,
        4983
      ],
      "op": "DUP5",
      "path": "1"
    },
    "713": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4985,
        4991
      ],
      "op": "DUP5",
      "path": "1"
    },
    "714": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4956,
        4965
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x5E9"
    },
    "717": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        4956,
        4992
      ],
      "op": "JUMP",
      "path": "1"
    },
    "718": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4956,
        4992
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "719": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "721": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "723": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "725": {
      "op": "SHL"
    },
    "726": {
      "op": "SUB"
    },
    "727": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5049
      ],
      "op": "DUP5",
      "path": "1"
    },
    "728": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5049
      ],
      "op": "AND",
      "path": "1"
    },
    "729": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5003,
        5027
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "731": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5049
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "732": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5049
      ],
      "op": "DUP2",
      "path": "1"
    },
    "733": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5049
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "734": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "736": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5049
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "738": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5049
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "739": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5049
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "741": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5049
      ],
      "op": "DUP2",
      "path": "1"
    },
    "742": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5049
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "743": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5003,
        5027
      ],
      "op": "DUP2",
      "path": "1"
    },
    "744": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5050,
        5062
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2EF"
    },
    "747": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5050,
        5060
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x531"
    },
    "750": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        5050,
        5062
      ],
      "op": "JUMP",
      "path": "1"
    },
    "751": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5050,
        5062
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "752": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "754": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "756": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "758": {
      "op": "SHL"
    },
    "759": {
      "op": "SUB"
    },
    "760": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5063
      ],
      "op": "AND",
      "path": "1"
    },
    "761": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5063
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "763": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5063
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "765": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5063
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "767": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5063
      ],
      "op": "SHL",
      "path": "1"
    },
    "768": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5063
      ],
      "op": "SUB",
      "path": "1"
    },
    "769": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5063
      ],
      "op": "AND",
      "path": "1"
    },
    "770": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5063
      ],
      "op": "DUP2",
      "path": "1"
    },
    "771": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5063
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "772": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5063
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "774": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5063
      ],
      "op": "ADD",
      "path": "1"
    },
    "775": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5063
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "776": {
      "op": "DUP2"
    },
    "777": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5063
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "778": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5063
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "780": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5063
      ],
      "op": "ADD",
      "path": "1"
    },
    "781": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "783": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5081,
        5107
      ],
      "op": "KECCAK256",
      "path": "1",
      "statement": 5
    },
    "784": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5081,
        5107
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "785": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5081,
        5107
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "786": {
      "branch": 48,
      "fn": "ERC20.transferFrom",
      "offset": [
        5081,
        5107
      ],
      "op": "POP",
      "path": "1"
    },
    "787": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "DUP3",
      "path": "1"
    },
    "788": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "DUP2",
      "path": "1"
    },
    "789": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "LT",
      "path": "1"
    },
    "790": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "791": {
      "op": "PUSH2",
      "value": "0x33B"
    },
    "794": {
      "op": "JUMPI"
    },
    "795": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "797": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "798": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0x461BCD"
    },
    "802": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE5"
    },
    "804": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "SHL",
      "path": "1"
    },
    "805": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "DUP2",
      "path": "1"
    },
    "806": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "807": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "809": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        5073,
        5152
      ],
      "op": "ADD",
      "path": "1"
    },
    "810": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x332"
    },
    "813": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "814": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xB21"
    },
    "817": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "JUMP",
      "path": "1"
    },
    "818": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "819": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "821": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "822": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "DUP1",
      "path": "1"
    },
    "823": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "824": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5186,
        5243
      ],
      "op": "SUB",
      "path": "1",
      "statement": 6
    },
    "825": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5195,
        5201
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "826": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5203,
        5215
      ],
      "op": "REVERT",
      "path": "1"
    },
    "827": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5203,
        5213
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "828": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        5203,
        5215
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x34F"
    },
    "831": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5203,
        5215
      ],
      "op": "DUP6",
      "path": "1"
    },
    "832": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5236,
        5242
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x347"
    },
    "835": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5217,
        5233
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x531"
    },
    "838": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5217,
        5242
      ],
      "op": "JUMP",
      "path": "1"
    },
    "839": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5186,
        5194
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "840": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        5186,
        5243
      ],
      "op": "DUP6",
      "path": "1"
    },
    "841": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5186,
        5243
      ],
      "op": "DUP5",
      "path": "1"
    },
    "842": {
      "op": "SUB"
    },
    "843": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5271,
        5275
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 7,
      "value": "0x535"
    },
    "846": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5271,
        5275
      ],
      "op": "JUMP",
      "path": "1"
    },
    "847": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4804,
        5282
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "848": {
      "op": "POP"
    },
    "849": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "851": {
      "op": "SWAP5"
    },
    "852": {
      "op": "SWAP4"
    },
    "853": {
      "fn": "ERC20.transferFrom",
      "jump": "o",
      "offset": [
        4804,
        5282
      ],
      "op": "POP",
      "path": "1"
    },
    "854": {
      "fn": "BTCDOWN.decimals",
      "offset": [
        1686,
        1768
      ],
      "op": "POP",
      "path": "8"
    },
    "855": {
      "fn": "BTCDOWN.decimals",
      "offset": [
        1760,
        1761
      ],
      "op": "POP",
      "path": "8",
      "statement": 8
    },
    "856": {
      "fn": "BTCDOWN.decimals",
      "offset": [
        1686,
        1768
      ],
      "op": "POP",
      "path": "8"
    },
    "857": {
      "fn": "BTCDOWN.decimals",
      "jump": "o",
      "offset": [
        1686,
        1768
      ],
      "op": "JUMP",
      "path": "8"
    },
    "858": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5677,
        5889
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "859": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5765,
        5769
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x6"
    },
    "861": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5781,
        5861
      ],
      "op": "SWAP1",
      "path": "1",
      "statement": 9
    },
    "862": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5790,
        5802
      ],
      "op": "JUMP",
      "path": "1"
    },
    "863": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5790,
        5800
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "864": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5790,
        5802
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "866": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5790,
        5802
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2B2"
    },
    "869": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5804,
        5811
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x36C"
    },
    "872": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5850,
        5860
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x531"
    },
    "875": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5824
      ],
      "op": "JUMP",
      "path": "1"
    },
    "876": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "877": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5825,
        5837
      ],
      "op": "DUP5",
      "path": "1"
    },
    "878": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5825,
        5835
      ],
      "op": "DUP5",
      "path": "1"
    },
    "879": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5825,
        5837
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "881": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5825,
        5837
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "883": {
      "op": "PUSH2",
      "value": "0x37A"
    },
    "886": {
      "op": "PUSH2",
      "value": "0x531"
    },
    "889": {
      "op": "JUMP"
    },
    "890": {
      "op": "JUMPDEST"
    },
    "891": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "893": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "895": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "897": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "SHL",
      "path": "1"
    },
    "898": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "SUB",
      "path": "1"
    },
    "899": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "900": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "DUP2",
      "path": "1"
    },
    "901": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "AND",
      "path": "1"
    },
    "902": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "DUP3",
      "path": "1"
    },
    "903": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "904": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "906": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "DUP1",
      "path": "1"
    },
    "907": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "DUP4",
      "path": "1"
    },
    "908": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "ADD",
      "path": "1"
    },
    "909": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "910": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "911": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "912": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "913": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "915": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "916": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "DUP3",
      "path": "1"
    },
    "917": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "ADD",
      "path": "1"
    },
    "918": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5847
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "920": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5847
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "921": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5847
      ],
      "op": "DUP2",
      "path": "1"
    },
    "922": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5847
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "923": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5847
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "924": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5847
      ],
      "op": "DUP12",
      "path": "1"
    },
    "925": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5847
      ],
      "op": "AND",
      "path": "1"
    },
    "926": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5847
      ],
      "op": "DUP2",
      "path": "1"
    },
    "927": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5847
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "928": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5847
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "929": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5860
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "930": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5860
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "931": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5860
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "932": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5860
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "933": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5813,
        5860
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x3AE"
    },
    "936": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5860
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "937": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5781,
        5789
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "938": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5781,
        5861
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xD0A"
    },
    "941": {
      "fn": "BTCDOWN.burn",
      "offset": [
        1575,
        1680
      ],
      "op": "JUMP",
      "path": "8"
    },
    "942": {
      "offset": [
        1826,
        1839
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "943": {
      "fn": "BTCDOWN.burn",
      "offset": [
        1826,
        1839
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x535"
    },
    "946": {
      "op": "JUMP"
    },
    "947": {
      "op": "JUMPDEST"
    },
    "948": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "950": {
      "op": "SLOAD"
    },
    "951": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "953": {
      "offset": [
        1826,
        1839
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x1"
    },
    "955": {
      "offset": [
        1812,
        1822
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0xA0"
    },
    "957": {
      "offset": [
        1812,
        1839
      ],
      "op": "SHL",
      "path": "8"
    },
    "958": {
      "offset": [
        1804,
        1840
      ],
      "op": "SUB",
      "path": "8"
    },
    "959": {
      "fn": "BTCDOWN.burn",
      "offset": [
        1804,
        1840
      ],
      "op": "AND",
      "path": "8"
    },
    "960": {
      "fn": "BTCDOWN.burn",
      "offset": [
        1804,
        1840
      ],
      "op": "CALLER",
      "path": "8"
    },
    "961": {
      "fn": "BTCDOWN.burn",
      "offset": [
        1804,
        1840
      ],
      "op": "EQ",
      "path": "8"
    },
    "962": {
      "fn": "BTCDOWN.burn",
      "offset": [
        1804,
        1840
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x3CA"
    },
    "965": {
      "offset": [
        1804,
        1840
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "966": {
      "fn": "BTCDOWN.burn",
      "offset": [
        1644,
        1673
      ],
      "op": "PUSH1",
      "path": "8",
      "statement": 10,
      "value": "0x0"
    },
    "968": {
      "fn": "BTCDOWN.burn",
      "offset": [
        1653,
        1662
      ],
      "op": "DUP1",
      "path": "8"
    },
    "969": {
      "fn": "BTCDOWN.burn",
      "offset": [
        1664,
        1672
      ],
      "op": "REVERT",
      "path": "8"
    },
    "970": {
      "fn": "BTCDOWN.burn",
      "offset": [
        1644,
        1652
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "971": {
      "fn": "BTCDOWN.burn",
      "jump": "i",
      "offset": [
        1644,
        1673
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x3D4"
    },
    "974": {
      "fn": "BTCDOWN.burn",
      "offset": [
        1644,
        1673
      ],
      "op": "ORIGIN",
      "path": "8"
    },
    "975": {
      "fn": "BTCDOWN.burn",
      "offset": [
        1575,
        1680
      ],
      "op": "DUP3",
      "path": "8"
    },
    "976": {
      "fn": "BTCDOWN.burn",
      "jump": "o",
      "offset": [
        1575,
        1680
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x3F6"
    },
    "979": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3326,
        3451
      ],
      "op": "JUMP",
      "path": "1"
    },
    "980": {
      "op": "JUMPDEST"
    },
    "981": {
      "op": "POP"
    },
    "982": {
      "op": "JUMP"
    },
    "983": {
      "op": "JUMPDEST"
    },
    "984": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "986": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3426,
        3444
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 11,
      "value": "0x1"
    },
    "988": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3426,
        3444
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "990": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3400,
        3407
      ],
      "op": "SHL",
      "path": "1"
    },
    "991": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3426,
        3444
      ],
      "op": "SUB",
      "path": "1"
    },
    "992": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3426,
        3444
      ],
      "op": "DUP2",
      "path": "1"
    },
    "993": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3426,
        3444
      ],
      "op": "AND",
      "path": "1"
    },
    "994": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3426,
        3444
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "996": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3426,
        3444
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "997": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3426,
        3444
      ],
      "op": "DUP2",
      "path": "1"
    },
    "998": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3426,
        3444
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "999": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3426,
        3444
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1001": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3426,
        3444
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1002": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3426,
        3444
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1003": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3426,
        3444
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1004": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3326,
        3451
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1006": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3326,
        3451
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1007": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3326,
        3451
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1008": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3326,
        3451
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1009": {
      "fn": "ERC20.balanceOf",
      "jump": "o",
      "offset": [
        3326,
        3451
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1010": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        882,
        1243
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1011": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        958,
        982
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1012": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        985,
        1017
      ],
      "op": "POP",
      "path": "3"
    },
    "1013": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        995,
        1002
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1014": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1004,
        1016
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1015": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1004,
        1014
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1017": {
      "fn": "ERC20Burnable.burnFrom",
      "jump": "i",
      "offset": [
        1004,
        1016
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x404"
    },
    "1020": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        985,
        1017
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1021": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        958,
        1017
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x207"
    },
    "1024": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        958,
        1017
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x531"
    },
    "1027": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1055,
        1061
      ],
      "op": "JUMP",
      "path": "3",
      "statement": 12
    },
    "1028": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1035,
        1051
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1029": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1035,
        1061
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1030": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1035,
        1061
      ],
      "op": "POP",
      "path": "3"
    },
    "1031": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1027,
        1102
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1032": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1027,
        1102
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1033": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1027,
        1102
      ],
      "op": "LT",
      "path": "3"
    },
    "1034": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1027,
        1102
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "1035": {
      "op": "PUSH2",
      "value": "0x426"
    },
    "1038": {
      "op": "JUMPI"
    },
    "1039": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1041": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1027,
        1102
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1042": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1027,
        1102
      ],
      "op": "PUSH3",
      "path": "3",
      "value": "0x461BCD"
    },
    "1046": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1027,
        1102
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0xE5"
    },
    "1048": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1027,
        1102
      ],
      "op": "SHL",
      "path": "3"
    },
    "1049": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1027,
        1102
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1050": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1027,
        1102
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1051": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1027,
        1102
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "1053": {
      "fn": "ERC20Burnable.burnFrom",
      "jump": "i",
      "offset": [
        1027,
        1102
      ],
      "op": "ADD",
      "path": "3"
    },
    "1054": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1027,
        1102
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x332"
    },
    "1057": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1136,
        1194
      ],
      "op": "SWAP1",
      "path": "3",
      "statement": 13
    },
    "1058": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1145,
        1152
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xB69"
    },
    "1061": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1154,
        1166
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1062": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1154,
        1164
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1063": {
      "fn": "ERC20Burnable.burnFrom",
      "jump": "i",
      "offset": [
        1154,
        1166
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x43A"
    },
    "1066": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1154,
        1166
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1067": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1187,
        1193
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x432"
    },
    "1070": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1168,
        1184
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x531"
    },
    "1073": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1168,
        1193
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1074": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1136,
        1144
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1075": {
      "fn": "ERC20Burnable.burnFrom",
      "jump": "i",
      "offset": [
        1136,
        1194
      ],
      "op": "DUP5",
      "path": "3"
    },
    "1076": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1136,
        1194
      ],
      "op": "DUP5",
      "path": "3"
    },
    "1077": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1214,
        1236
      ],
      "op": "SUB",
      "path": "3",
      "statement": 14
    },
    "1078": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1220,
        1227
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x535"
    },
    "1081": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1229,
        1235
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1082": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1214,
        1219
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1083": {
      "fn": "ERC20Burnable.burnFrom",
      "jump": "i",
      "offset": [
        1214,
        1236
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x444"
    },
    "1086": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1214,
        1236
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1087": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        882,
        1243
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1088": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        882,
        1243
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x713"
    },
    "1091": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        882,
        1243
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1092": {
      "fn": "ERC20Burnable.burnFrom",
      "jump": "o",
      "offset": [
        882,
        1243
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1093": {
      "fn": "ERC20.symbol",
      "offset": [
        2285,
        2387
      ],
      "op": "POP",
      "path": "1"
    },
    "1094": {
      "fn": "ERC20.symbol",
      "offset": [
        2341,
        2354
      ],
      "op": "POP",
      "path": "1"
    },
    "1095": {
      "fn": "ERC20.symbol",
      "offset": [
        2373,
        2380
      ],
      "op": "POP",
      "path": "1",
      "statement": 15
    },
    "1096": {
      "fn": "ERC20.symbol",
      "offset": [
        2366,
        2380
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1097": {
      "fn": "ERC20.symbol",
      "offset": [
        2366,
        2380
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1098": {
      "fn": "ERC20.symbol",
      "offset": [
        2366,
        2380
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x60"
    },
    "1100": {
      "fn": "ERC20.symbol",
      "offset": [
        2366,
        2380
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1102": {
      "fn": "ERC20.symbol",
      "offset": [
        2366,
        2380
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1103": {
      "fn": "ERC20.symbol",
      "jump": "i",
      "offset": [
        2366,
        2380
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1104": {
      "fn": "BTCDOWN.mint",
      "offset": [
        1476,
        1569
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x21B"
    },
    "1107": {
      "offset": [
        1826,
        1839
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "1108": {
      "fn": "BTCDOWN.mint",
      "offset": [
        1826,
        1839
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xD39"
    },
    "1111": {
      "op": "JUMP"
    },
    "1112": {
      "op": "JUMPDEST"
    },
    "1113": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "1115": {
      "op": "SLOAD"
    },
    "1116": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1118": {
      "offset": [
        1826,
        1839
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x1"
    },
    "1120": {
      "offset": [
        1812,
        1822
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0xA0"
    },
    "1122": {
      "offset": [
        1812,
        1839
      ],
      "op": "SHL",
      "path": "8"
    },
    "1123": {
      "offset": [
        1804,
        1840
      ],
      "op": "SUB",
      "path": "8"
    },
    "1124": {
      "fn": "BTCDOWN.mint",
      "offset": [
        1804,
        1840
      ],
      "op": "AND",
      "path": "8"
    },
    "1125": {
      "fn": "BTCDOWN.mint",
      "offset": [
        1804,
        1840
      ],
      "op": "CALLER",
      "path": "8"
    },
    "1126": {
      "fn": "BTCDOWN.mint",
      "offset": [
        1804,
        1840
      ],
      "op": "EQ",
      "path": "8"
    },
    "1127": {
      "fn": "BTCDOWN.mint",
      "offset": [
        1804,
        1840
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x46F"
    },
    "1130": {
      "offset": [
        1804,
        1840
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "1131": {
      "fn": "BTCDOWN.mint",
      "offset": [
        1536,
        1562
      ],
      "op": "PUSH1",
      "path": "8",
      "statement": 16,
      "value": "0x0"
    },
    "1133": {
      "fn": "BTCDOWN.mint",
      "offset": [
        1542,
        1551
      ],
      "op": "DUP1",
      "path": "8"
    },
    "1134": {
      "fn": "BTCDOWN.mint",
      "offset": [
        1553,
        1561
      ],
      "op": "REVERT",
      "path": "8"
    },
    "1135": {
      "fn": "BTCDOWN.mint",
      "offset": [
        1536,
        1541
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "1136": {
      "fn": "BTCDOWN.mint",
      "jump": "i",
      "offset": [
        1536,
        1562
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x3D4"
    },
    "1139": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6376,
        6781
      ],
      "op": "ORIGIN",
      "path": "1"
    },
    "1140": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6469,
        6473
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1141": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6485,
        6509
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x804"
    },
    "1144": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6523
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1145": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1146": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6524,
        6536
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1148": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6524,
        6534
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1149": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6524,
        6536
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1151": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6524,
        6536
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1153": {
      "op": "PUSH2",
      "value": "0x488"
    },
    "1156": {
      "op": "PUSH2",
      "value": "0x531"
    },
    "1159": {
      "op": "JUMP"
    },
    "1160": {
      "op": "JUMPDEST"
    },
    "1161": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1163": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1165": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "1167": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "SHL",
      "path": "1"
    },
    "1168": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "SUB",
      "path": "1"
    },
    "1169": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1170": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1171": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "AND",
      "path": "1"
    },
    "1172": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1173": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1174": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1176": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1177": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1178": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "ADD",
      "path": "1"
    },
    "1179": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "1180": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1181": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "1182": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1183": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1185": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1186": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1187": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "ADD",
      "path": "1"
    },
    "1188": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6546
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1190": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6546
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1191": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6546
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1192": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6546
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1193": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6546
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1194": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6546
      ],
      "op": "DUP9",
      "path": "1"
    },
    "1195": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6546
      ],
      "op": "AND",
      "path": "1"
    },
    "1196": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6546
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1197": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6546
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1198": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6546
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "1199": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6546
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1200": {
      "op": "SWAP1"
    },
    "1201": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6564,
        6599
      ],
      "op": "KECCAK256",
      "path": "1",
      "statement": 17
    },
    "1202": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6564,
        6599
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1203": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6564,
        6599
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1204": {
      "branch": 49,
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6564,
        6599
      ],
      "op": "POP",
      "path": "1"
    },
    "1205": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6556,
        6641
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1206": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6556,
        6641
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1207": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6556,
        6641
      ],
      "op": "LT",
      "path": "1"
    },
    "1208": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6556,
        6641
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "1209": {
      "op": "PUSH2",
      "value": "0x4D4"
    },
    "1212": {
      "op": "JUMPI"
    },
    "1213": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1215": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6556,
        6641
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1216": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6556,
        6641
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0x461BCD"
    },
    "1220": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6556,
        6641
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE5"
    },
    "1222": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6556,
        6641
      ],
      "op": "SHL",
      "path": "1"
    },
    "1223": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6556,
        6641
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1224": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6556,
        6641
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1225": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6556,
        6641
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1227": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6556,
        6641
      ],
      "op": "ADD",
      "path": "1"
    },
    "1228": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6556,
        6641
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x332"
    },
    "1231": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6675,
        6742
      ],
      "op": "SWAP1",
      "path": "1",
      "statement": 18
    },
    "1232": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6684,
        6696
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xC77"
    },
    "1235": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6684,
        6694
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1236": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6684,
        6696
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1237": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6684,
        6696
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x4E8"
    },
    "1240": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6698,
        6705
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x4DF"
    },
    "1243": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6726,
        6741
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x531"
    },
    "1246": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6707,
        6723
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1247": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6707,
        6741
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1248": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6675,
        6683
      ],
      "op": "DUP6",
      "path": "1"
    },
    "1249": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6675,
        6742
      ],
      "op": "DUP6",
      "path": "1"
    },
    "1250": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6675,
        6742
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1251": {
      "op": "SUB"
    },
    "1252": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6770,
        6774
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 19,
      "value": "0x535"
    },
    "1255": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6770,
        6774
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1256": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6376,
        6781
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1257": {
      "op": "POP"
    },
    "1258": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1260": {
      "op": "SWAP4"
    },
    "1261": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "o",
      "offset": [
        6376,
        6781
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "1262": {
      "fn": "ERC20.transfer",
      "offset": [
        3654,
        3826
      ],
      "op": "POP",
      "path": "1"
    },
    "1263": {
      "fn": "ERC20.transfer",
      "offset": [
        3740,
        3744
      ],
      "op": "POP",
      "path": "1"
    },
    "1264": {
      "fn": "ERC20.transfer",
      "offset": [
        3756,
        3798
      ],
      "op": "POP",
      "path": "1",
      "statement": 20
    },
    "1265": {
      "fn": "ERC20.transfer",
      "offset": [
        3766,
        3778
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1266": {
      "fn": "ERC20.transfer",
      "offset": [
        3766,
        3776
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1267": {
      "fn": "ERC20.transfer",
      "jump": "i",
      "offset": [
        3766,
        3778
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1269": {
      "fn": "ERC20.transfer",
      "offset": [
        3766,
        3778
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2B2"
    },
    "1272": {
      "fn": "ERC20.transfer",
      "offset": [
        3780,
        3789
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x4FF"
    },
    "1275": {
      "fn": "ERC20.transfer",
      "offset": [
        3791,
        3797
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x531"
    },
    "1278": {
      "fn": "ERC20.transfer",
      "offset": [
        3756,
        3765
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1279": {
      "fn": "ERC20.transfer",
      "jump": "i",
      "offset": [
        3756,
        3798
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1280": {
      "fn": "ERC20.allowance",
      "offset": [
        3884,
        4033
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1281": {
      "op": "DUP5"
    },
    "1282": {
      "op": "PUSH2",
      "value": "0x5E9"
    },
    "1285": {
      "op": "JUMP"
    },
    "1286": {
      "op": "JUMPDEST"
    },
    "1287": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1289": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 21,
      "value": "0x1"
    },
    "1291": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "1293": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "SHL",
      "path": "1"
    },
    "1294": {
      "fn": "ERC20.allowance",
      "offset": [
        3973,
        3980
      ],
      "op": "SUB",
      "path": "1"
    },
    "1295": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1296": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1297": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "AND",
      "path": "1"
    },
    "1298": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1300": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1301": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1302": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1303": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1305": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1307": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1308": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1309": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1310": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4026
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1312": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4026
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1313": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4026
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1314": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4026
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1315": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4026
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "1316": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4026
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1317": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4026
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "1318": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4026
      ],
      "op": "AND",
      "path": "1"
    },
    "1319": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4026
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1320": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4026
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1321": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4026
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1322": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4026
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1323": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4026
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1324": {
      "fn": "ERC20.allowance",
      "jump": "o",
      "offset": [
        3884,
        4033
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1325": {
      "fn": "Context._msgSender",
      "offset": [
        586,
        682
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "1326": {
      "fn": "Context._msgSender",
      "offset": [
        665,
        675
      ],
      "op": "SLOAD",
      "path": "5",
      "statement": 22
    },
    "1327": {
      "fn": "Context._msgSender",
      "offset": [
        586,
        682
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1328": {
      "fn": "Context._msgSender",
      "jump": "o",
      "offset": [
        586,
        682
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1329": {
      "fn": "ERC20._approve",
      "offset": [
        9952,
        10322
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1330": {
      "op": "CALLER"
    },
    "1331": {
      "op": "SWAP1"
    },
    "1332": {
      "op": "JUMP"
    },
    "1333": {
      "op": "JUMPDEST"
    },
    "1334": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1336": {
      "fn": "ERC20._approve",
      "offset": [
        10083,
        10102
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 23,
      "value": "0x1"
    },
    "1338": {
      "branch": 50,
      "fn": "ERC20._approve",
      "offset": [
        10083,
        10102
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "1340": {
      "fn": "ERC20._approve",
      "offset": [
        10075,
        10143
      ],
      "op": "SHL",
      "path": "1"
    },
    "1341": {
      "fn": "ERC20._approve",
      "offset": [
        10075,
        10143
      ],
      "op": "SUB",
      "path": "1"
    },
    "1342": {
      "fn": "ERC20._approve",
      "offset": [
        10075,
        10143
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1343": {
      "fn": "ERC20._approve",
      "offset": [
        10075,
        10143
      ],
      "op": "AND",
      "path": "1"
    },
    "1344": {
      "op": "PUSH2",
      "value": "0x55B"
    },
    "1347": {
      "op": "JUMPI"
    },
    "1348": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1350": {
      "fn": "ERC20._approve",
      "offset": [
        10075,
        10143
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1351": {
      "fn": "ERC20._approve",
      "offset": [
        10075,
        10143
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0x461BCD"
    },
    "1355": {
      "fn": "ERC20._approve",
      "offset": [
        10075,
        10143
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE5"
    },
    "1357": {
      "fn": "ERC20._approve",
      "offset": [
        10075,
        10143
      ],
      "op": "SHL",
      "path": "1"
    },
    "1358": {
      "fn": "ERC20._approve",
      "offset": [
        10075,
        10143
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1359": {
      "fn": "ERC20._approve",
      "offset": [
        10075,
        10143
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1360": {
      "fn": "ERC20._approve",
      "offset": [
        10075,
        10143
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1362": {
      "fn": "ERC20._approve",
      "jump": "i",
      "offset": [
        10075,
        10143
      ],
      "op": "ADD",
      "path": "1"
    },
    "1363": {
      "fn": "ERC20._approve",
      "offset": [
        10075,
        10143
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x332"
    },
    "1366": {
      "op": "SWAP1"
    },
    "1367": {
      "op": "PUSH2",
      "value": "0xC33"
    },
    "1370": {
      "op": "JUMP"
    },
    "1371": {
      "op": "JUMPDEST"
    },
    "1372": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1374": {
      "fn": "ERC20._approve",
      "offset": [
        10161,
        10182
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 24,
      "value": "0x1"
    },
    "1376": {
      "branch": 51,
      "fn": "ERC20._approve",
      "offset": [
        10161,
        10182
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "1378": {
      "fn": "ERC20._approve",
      "offset": [
        10153,
        10221
      ],
      "op": "SHL",
      "path": "1"
    },
    "1379": {
      "fn": "ERC20._approve",
      "offset": [
        10153,
        10221
      ],
      "op": "SUB",
      "path": "1"
    },
    "1380": {
      "fn": "ERC20._approve",
      "offset": [
        10153,
        10221
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1381": {
      "fn": "ERC20._approve",
      "offset": [
        10153,
        10221
      ],
      "op": "AND",
      "path": "1"
    },
    "1382": {
      "op": "PUSH2",
      "value": "0x581"
    },
    "1385": {
      "op": "JUMPI"
    },
    "1386": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1388": {
      "fn": "ERC20._approve",
      "offset": [
        10153,
        10221
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1389": {
      "fn": "ERC20._approve",
      "offset": [
        10153,
        10221
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0x461BCD"
    },
    "1393": {
      "fn": "ERC20._approve",
      "offset": [
        10153,
        10221
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE5"
    },
    "1395": {
      "fn": "ERC20._approve",
      "offset": [
        10153,
        10221
      ],
      "op": "SHL",
      "path": "1"
    },
    "1396": {
      "fn": "ERC20._approve",
      "offset": [
        10153,
        10221
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1397": {
      "fn": "ERC20._approve",
      "offset": [
        10153,
        10221
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1398": {
      "fn": "ERC20._approve",
      "offset": [
        10153,
        10221
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1400": {
      "fn": "ERC20._approve",
      "jump": "i",
      "offset": [
        10153,
        10221
      ],
      "op": "ADD",
      "path": "1"
    },
    "1401": {
      "fn": "ERC20._approve",
      "offset": [
        10153,
        10221
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x332"
    },
    "1404": {
      "op": "SWAP1"
    },
    "1405": {
      "op": "PUSH2",
      "value": "0xA99"
    },
    "1408": {
      "op": "JUMP"
    },
    "1409": {
      "op": "JUMPDEST"
    },
    "1410": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1412": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 25,
      "value": "0x1"
    },
    "1414": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "1416": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "SHL",
      "path": "1"
    },
    "1417": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "SUB",
      "path": "1"
    },
    "1418": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1419": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1420": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "AND",
      "path": "1"
    },
    "1421": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1423": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1424": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1425": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1426": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1428": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1430": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1431": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1432": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1433": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1435": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1436": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1437": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1438": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "1439": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "DUP8",
      "path": "1"
    },
    "1440": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "AND",
      "path": "1"
    },
    "1441": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1442": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1443": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1444": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "1445": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1446": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1447": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1448": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10268
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1449": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10268
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1450": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10268
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1451": {
      "fn": "ERC20._approve",
      "offset": [
        10283,
        10315
      ],
      "op": "KECCAK256",
      "path": "1",
      "statement": 26
    },
    "1452": {
      "fn": "ERC20._approve",
      "offset": [
        10283,
        10315
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1453": {
      "fn": "ERC20._approve",
      "offset": [
        10283,
        10315
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1454": {
      "fn": "ERC20._approve",
      "offset": [
        10283,
        10315
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "1455": {
      "fn": "ERC20._approve",
      "offset": [
        10283,
        10315
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1456": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10268
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
    },
    "1489": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10268
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1490": {
      "fn": "ERC20._approve",
      "offset": [
        10283,
        10315
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x5DC"
    },
    "1493": {
      "fn": "ERC20._approve",
      "jump": "i",
      "offset": [
        10283,
        10315
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1494": {
      "fn": "ERC20._approve",
      "offset": [
        10283,
        10315
      ],
      "op": "DUP6",
      "path": "1"
    },
    "1495": {
      "fn": "ERC20._approve",
      "offset": [
        10283,
        10315
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1496": {
      "fn": "ERC20._approve",
      "offset": [
        10283,
        10315
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xCF3"
    },
    "1499": {
      "fn": "ERC20._approve",
      "offset": [
        10283,
        10315
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1500": {
      "fn": "ERC20._approve",
      "offset": [
        10283,
        10315
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1501": {
      "fn": "ERC20._approve",
      "offset": [
        10283,
        10315
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1503": {
      "fn": "ERC20._approve",
      "offset": [
        10283,
        10315
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1504": {
      "fn": "ERC20._approve",
      "offset": [
        10283,
        10315
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1505": {
      "fn": "ERC20._approve",
      "offset": [
        9952,
        10322
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1506": {
      "fn": "ERC20._approve",
      "offset": [
        9952,
        10322
      ],
      "op": "SUB",
      "path": "1"
    },
    "1507": {
      "fn": "ERC20._approve",
      "offset": [
        9952,
        10322
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1508": {
      "fn": "ERC20._approve",
      "jump": "o",
      "offset": [
        9952,
        10322
      ],
      "op": "LOG3",
      "path": "1"
    },
    "1509": {
      "fn": "ERC20._transfer",
      "offset": [
        7255,
        7968
      ],
      "op": "POP",
      "path": "1"
    },
    "1510": {
      "op": "POP"
    },
    "1511": {
      "op": "POP"
    },
    "1512": {
      "op": "JUMP"
    },
    "1513": {
      "op": "JUMPDEST"
    },
    "1514": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1516": {
      "fn": "ERC20._transfer",
      "offset": [
        7390,
        7410
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 27,
      "value": "0x1"
    },
    "1518": {
      "branch": 52,
      "fn": "ERC20._transfer",
      "offset": [
        7390,
        7410
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "1520": {
      "fn": "ERC20._transfer",
      "offset": [
        7382,
        7452
      ],
      "op": "SHL",
      "path": "1"
    },
    "1521": {
      "fn": "ERC20._transfer",
      "offset": [
        7382,
        7452
      ],
      "op": "SUB",
      "path": "1"
    },
    "1522": {
      "fn": "ERC20._transfer",
      "offset": [
        7382,
        7452
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1523": {
      "fn": "ERC20._transfer",
      "offset": [
        7382,
        7452
      ],
      "op": "AND",
      "path": "1"
    },
    "1524": {
      "op": "PUSH2",
      "value": "0x60F"
    },
    "1527": {
      "op": "JUMPI"
    },
    "1528": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1530": {
      "fn": "ERC20._transfer",
      "offset": [
        7382,
        7452
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1531": {
      "fn": "ERC20._transfer",
      "offset": [
        7382,
        7452
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0x461BCD"
    },
    "1535": {
      "fn": "ERC20._transfer",
      "offset": [
        7382,
        7452
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE5"
    },
    "1537": {
      "fn": "ERC20._transfer",
      "offset": [
        7382,
        7452
      ],
      "op": "SHL",
      "path": "1"
    },
    "1538": {
      "fn": "ERC20._transfer",
      "offset": [
        7382,
        7452
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1539": {
      "fn": "ERC20._transfer",
      "offset": [
        7382,
        7452
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1540": {
      "fn": "ERC20._transfer",
      "offset": [
        7382,
        7452
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1542": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7382,
        7452
      ],
      "op": "ADD",
      "path": "1"
    },
    "1543": {
      "fn": "ERC20._transfer",
      "offset": [
        7382,
        7452
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x332"
    },
    "1546": {
      "op": "SWAP1"
    },
    "1547": {
      "op": "PUSH2",
      "value": "0xBEE"
    },
    "1550": {
      "op": "JUMP"
    },
    "1551": {
      "op": "JUMPDEST"
    },
    "1552": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1554": {
      "fn": "ERC20._transfer",
      "offset": [
        7470,
        7493
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 28,
      "value": "0x1"
    },
    "1556": {
      "branch": 53,
      "fn": "ERC20._transfer",
      "offset": [
        7470,
        7493
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "1558": {
      "fn": "ERC20._transfer",
      "offset": [
        7462,
        7533
      ],
      "op": "SHL",
      "path": "1"
    },
    "1559": {
      "fn": "ERC20._transfer",
      "offset": [
        7462,
        7533
      ],
      "op": "SUB",
      "path": "1"
    },
    "1560": {
      "fn": "ERC20._transfer",
      "offset": [
        7462,
        7533
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1561": {
      "fn": "ERC20._transfer",
      "offset": [
        7462,
        7533
      ],
      "op": "AND",
      "path": "1"
    },
    "1562": {
      "op": "PUSH2",
      "value": "0x635"
    },
    "1565": {
      "op": "JUMPI"
    },
    "1566": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1568": {
      "fn": "ERC20._transfer",
      "offset": [
        7462,
        7533
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1569": {
      "fn": "ERC20._transfer",
      "offset": [
        7462,
        7533
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0x461BCD"
    },
    "1573": {
      "fn": "ERC20._transfer",
      "offset": [
        7462,
        7533
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE5"
    },
    "1575": {
      "fn": "ERC20._transfer",
      "offset": [
        7462,
        7533
      ],
      "op": "SHL",
      "path": "1"
    },
    "1576": {
      "fn": "ERC20._transfer",
      "offset": [
        7462,
        7533
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1577": {
      "fn": "ERC20._transfer",
      "offset": [
        7462,
        7533
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1578": {
      "fn": "ERC20._transfer",
      "offset": [
        7462,
        7533
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1580": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7462,
        7533
      ],
      "op": "ADD",
      "path": "1"
    },
    "1581": {
      "fn": "ERC20._transfer",
      "offset": [
        7462,
        7533
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x332"
    },
    "1584": {
      "fn": "ERC20._transfer",
      "offset": [
        7544,
        7591
      ],
      "op": "SWAP1",
      "path": "1",
      "statement": 29
    },
    "1585": {
      "fn": "ERC20._transfer",
      "offset": [
        7565,
        7571
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xA14"
    },
    "1588": {
      "fn": "ERC20._transfer",
      "offset": [
        7573,
        7582
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1589": {
      "fn": "ERC20._transfer",
      "offset": [
        7584,
        7590
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1590": {
      "fn": "ERC20._transfer",
      "offset": [
        7544,
        7564
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x640"
    },
    "1593": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7544,
        7591
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1594": {
      "fn": "ERC20._transfer",
      "offset": [
        7544,
        7591
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1595": {
      "op": "DUP4"
    },
    "1596": {
      "op": "PUSH2",
      "value": "0x444"
    },
    "1599": {
      "op": "JUMP"
    },
    "1600": {
      "op": "JUMPDEST"
    },
    "1601": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1603": {
      "fn": "ERC20._transfer",
      "offset": [
        7626,
        7643
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1605": {
      "fn": "ERC20._transfer",
      "offset": [
        7626,
        7643
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "1607": {
      "fn": "ERC20._transfer",
      "offset": [
        7602,
        7623
      ],
      "op": "SHL",
      "path": "1"
    },
    "1608": {
      "fn": "ERC20._transfer",
      "offset": [
        7626,
        7643
      ],
      "op": "SUB",
      "path": "1"
    },
    "1609": {
      "fn": "ERC20._transfer",
      "offset": [
        7626,
        7643
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1610": {
      "fn": "ERC20._transfer",
      "offset": [
        7626,
        7643
      ],
      "op": "AND",
      "path": "1"
    },
    "1611": {
      "fn": "ERC20._transfer",
      "offset": [
        7626,
        7643
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1613": {
      "fn": "ERC20._transfer",
      "offset": [
        7626,
        7643
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1614": {
      "fn": "ERC20._transfer",
      "offset": [
        7626,
        7643
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1615": {
      "fn": "ERC20._transfer",
      "offset": [
        7626,
        7643
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1616": {
      "fn": "ERC20._transfer",
      "offset": [
        7626,
        7643
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1618": {
      "fn": "ERC20._transfer",
      "offset": [
        7626,
        7643
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1619": {
      "fn": "ERC20._transfer",
      "offset": [
        7626,
        7643
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1620": {
      "fn": "ERC20._transfer",
      "offset": [
        7626,
        7643
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1621": {
      "fn": "ERC20._transfer",
      "offset": [
        7661,
        7684
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 30,
      "value": "0x40"
    },
    "1623": {
      "fn": "ERC20._transfer",
      "offset": [
        7661,
        7684
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1624": {
      "fn": "ERC20._transfer",
      "offset": [
        7661,
        7684
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1625": {
      "branch": 54,
      "fn": "ERC20._transfer",
      "offset": [
        7661,
        7684
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1626": {
      "fn": "ERC20._transfer",
      "offset": [
        7653,
        7727
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1627": {
      "fn": "ERC20._transfer",
      "offset": [
        7653,
        7727
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1628": {
      "fn": "ERC20._transfer",
      "offset": [
        7653,
        7727
      ],
      "op": "LT",
      "path": "1"
    },
    "1629": {
      "fn": "ERC20._transfer",
      "offset": [
        7653,
        7727
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "1630": {
      "op": "PUSH2",
      "value": "0x679"
    },
    "1633": {
      "op": "JUMPI"
    },
    "1634": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1636": {
      "fn": "ERC20._transfer",
      "offset": [
        7653,
        7727
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1637": {
      "fn": "ERC20._transfer",
      "offset": [
        7653,
        7727
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0x461BCD"
    },
    "1641": {
      "fn": "ERC20._transfer",
      "offset": [
        7653,
        7727
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE5"
    },
    "1643": {
      "fn": "ERC20._transfer",
      "offset": [
        7653,
        7727
      ],
      "op": "SHL",
      "path": "1"
    },
    "1644": {
      "fn": "ERC20._transfer",
      "offset": [
        7653,
        7727
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1645": {
      "fn": "ERC20._transfer",
      "offset": [
        7653,
        7727
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1646": {
      "fn": "ERC20._transfer",
      "offset": [
        7653,
        7727
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1648": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7653,
        7727
      ],
      "op": "ADD",
      "path": "1"
    },
    "1649": {
      "fn": "ERC20._transfer",
      "offset": [
        7653,
        7727
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x332"
    },
    "1652": {
      "op": "SWAP1"
    },
    "1653": {
      "op": "PUSH2",
      "value": "0xADB"
    },
    "1656": {
      "op": "JUMP"
    },
    "1657": {
      "op": "JUMPDEST"
    },
    "1658": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1660": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 31,
      "value": "0x1"
    },
    "1662": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "1664": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "SHL",
      "path": "1"
    },
    "1665": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7770
      ],
      "op": "SUB",
      "path": "1"
    },
    "1666": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1667": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "DUP6",
      "path": "1"
    },
    "1668": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "AND",
      "path": "1"
    },
    "1669": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1671": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1672": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1673": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1674": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1676": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1677": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1678": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1679": {
      "fn": "ERC20._transfer",
      "offset": [
        7781,
        7803
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1681": {
      "fn": "ERC20._transfer",
      "offset": [
        7781,
        7803
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1682": {
      "fn": "ERC20._transfer",
      "offset": [
        7781,
        7803
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1683": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7803
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1684": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7803
      ],
      "op": "DUP6",
      "path": "1"
    },
    "1685": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7843
      ],
      "op": "DUP6",
      "path": "1",
      "statement": 32
    },
    "1686": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7843
      ],
      "op": "SUB",
      "path": "1"
    },
    "1687": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7843
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1688": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7843
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "1689": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7843
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1690": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7843
      ],
      "op": "DUP6",
      "path": "1"
    },
    "1691": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7843
      ],
      "op": "AND",
      "path": "1"
    },
    "1692": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7843
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1693": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7853
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1694": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7853
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1695": {
      "fn": "ERC20._transfer",
      "offset": [
        7781,
        7803
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1696": {
      "fn": "ERC20._transfer",
      "offset": [
        7781,
        7803
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1697": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7770
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1698": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7853
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1699": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7853
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1700": {
      "fn": "ERC20._transfer",
      "offset": [
        7781,
        7803
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "1701": {
      "fn": "ERC20._transfer",
      "offset": [
        7781,
        7803
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1702": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7853
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x6B0"
    },
    "1705": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7823,
        7853
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1706": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7853
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1707": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7853
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1708": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7853
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xD0A"
    },
    "1711": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7853
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1712": {
      "op": "JUMPDEST"
    },
    "1713": {
      "op": "SWAP3"
    },
    "1714": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "POP",
      "path": "1",
      "statement": 33
    },
    "1715": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "POP",
      "path": "1"
    },
    "1716": {
      "op": "DUP2"
    },
    "1717": {
      "op": "SWAP1"
    },
    "1718": {
      "op": "SSTORE"
    },
    "1719": {
      "op": "POP"
    },
    "1720": {
      "op": "DUP3"
    },
    "1721": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1723": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1725": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "1727": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "SHL",
      "path": "1"
    },
    "1728": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "SUB",
      "path": "1"
    },
    "1729": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "AND",
      "path": "1"
    },
    "1730": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1731": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1733": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1735": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "1737": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "SHL",
      "path": "1"
    },
    "1738": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "SUB",
      "path": "1"
    },
    "1739": {
      "fn": "ERC20._transfer",
      "offset": [
        7897,
        7903
      ],
      "op": "AND",
      "path": "1"
    },
    "1740": {
      "fn": "ERC20._transfer",
      "offset": [
        7897,
        7903
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
    },
    "1773": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1774": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7869,
        7904
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1776": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1777": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x6FA"
    },
    "1780": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1781": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1782": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xCF3"
    },
    "1785": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1786": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1787": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1789": {
      "fn": "ERC20._transfer",
      "offset": [
        7915,
        7961
      ],
      "op": "MLOAD",
      "path": "1",
      "statement": 34
    },
    "1790": {
      "fn": "ERC20._transfer",
      "offset": [
        7935,
        7941
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1791": {
      "fn": "ERC20._transfer",
      "offset": [
        7943,
        7952
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1792": {
      "fn": "ERC20._transfer",
      "offset": [
        7954,
        7960
      ],
      "op": "SUB",
      "path": "1"
    },
    "1793": {
      "fn": "ERC20._transfer",
      "offset": [
        7915,
        7934
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1794": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7915,
        7961
      ],
      "op": "LOG3",
      "path": "1"
    },
    "1795": {
      "fn": "ERC20._transfer",
      "offset": [
        7915,
        7961
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x70D"
    },
    "1798": {
      "fn": "ERC20._transfer",
      "offset": [
        7255,
        7968
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1799": {
      "fn": "ERC20._transfer",
      "offset": [
        7255,
        7968
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1800": {
      "fn": "ERC20._transfer",
      "offset": [
        7255,
        7968
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1801": {
      "fn": "ERC20._transfer",
      "offset": [
        7255,
        7968
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x444"
    },
    "1804": {
      "fn": "ERC20._transfer",
      "jump": "o",
      "offset": [
        7255,
        7968
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1805": {
      "fn": "ERC20._burn",
      "offset": [
        8953,
        9529
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1806": {
      "op": "POP"
    },
    "1807": {
      "op": "POP"
    },
    "1808": {
      "op": "POP"
    },
    "1809": {
      "op": "POP"
    },
    "1810": {
      "op": "JUMP"
    },
    "1811": {
      "fn": "ERC20._burn",
      "offset": [
        9036,
        9057
      ],
      "op": "JUMPDEST",
      "path": "1",
      "statement": 35
    },
    "1812": {
      "branch": 55,
      "fn": "ERC20._burn",
      "offset": [
        9036,
        9057
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1814": {
      "fn": "ERC20._burn",
      "offset": [
        9028,
        9095
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1816": {
      "fn": "ERC20._burn",
      "offset": [
        9028,
        9095
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "1818": {
      "fn": "ERC20._burn",
      "offset": [
        9028,
        9095
      ],
      "op": "SHL",
      "path": "1"
    },
    "1819": {
      "fn": "ERC20._burn",
      "offset": [
        9028,
        9095
      ],
      "op": "SUB",
      "path": "1"
    },
    "1820": {
      "op": "DUP3"
    },
    "1821": {
      "op": "AND"
    },
    "1822": {
      "op": "PUSH2",
      "value": "0x739"
    },
    "1825": {
      "branch": 55,
      "fn": "ERC20._burn",
      "offset": [
        9028,
        9095
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1826": {
      "fn": "ERC20._burn",
      "offset": [
        9028,
        9095
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1828": {
      "fn": "ERC20._burn",
      "offset": [
        9028,
        9095
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1829": {
      "fn": "ERC20._burn",
      "offset": [
        9028,
        9095
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0x461BCD"
    },
    "1833": {
      "fn": "ERC20._burn",
      "offset": [
        9028,
        9095
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE5"
    },
    "1835": {
      "fn": "ERC20._burn",
      "offset": [
        9028,
        9095
      ],
      "op": "SHL",
      "path": "1"
    },
    "1836": {
      "fn": "ERC20._burn",
      "offset": [
        9028,
        9095
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1837": {
      "fn": "ERC20._burn",
      "jump": "i",
      "offset": [
        9028,
        9095
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1838": {
      "fn": "ERC20._burn",
      "offset": [
        9028,
        9095
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1840": {
      "fn": "ERC20._burn",
      "offset": [
        9106,
        9155
      ],
      "op": "ADD",
      "path": "1",
      "statement": 36
    },
    "1841": {
      "fn": "ERC20._burn",
      "offset": [
        9127,
        9134
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x332"
    },
    "1844": {
      "fn": "ERC20._burn",
      "offset": [
        9144,
        9145
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1845": {
      "fn": "ERC20._burn",
      "offset": [
        9148,
        9154
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xBAD"
    },
    "1848": {
      "fn": "ERC20._burn",
      "offset": [
        9106,
        9126
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1849": {
      "fn": "ERC20._burn",
      "jump": "i",
      "offset": [
        9106,
        9155
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1850": {
      "fn": "ERC20._burn",
      "offset": [
        9106,
        9155
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x745"
    },
    "1853": {
      "op": "DUP3"
    },
    "1854": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1856": {
      "op": "DUP4"
    },
    "1857": {
      "op": "PUSH2",
      "value": "0x444"
    },
    "1860": {
      "op": "JUMP"
    },
    "1861": {
      "fn": "ERC20._burn",
      "offset": [
        9191,
        9209
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1862": {
      "fn": "ERC20._burn",
      "offset": [
        9191,
        9209
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1864": {
      "fn": "ERC20._burn",
      "offset": [
        9166,
        9188
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1866": {
      "fn": "ERC20._burn",
      "offset": [
        9191,
        9209
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "1868": {
      "fn": "ERC20._burn",
      "offset": [
        9191,
        9209
      ],
      "op": "SHL",
      "path": "1"
    },
    "1869": {
      "fn": "ERC20._burn",
      "offset": [
        9191,
        9209
      ],
      "op": "SUB",
      "path": "1"
    },
    "1870": {
      "fn": "ERC20._burn",
      "offset": [
        9191,
        9209
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1871": {
      "fn": "ERC20._burn",
      "offset": [
        9191,
        9209
      ],
      "op": "AND",
      "path": "1"
    },
    "1872": {
      "fn": "ERC20._burn",
      "offset": [
        9191,
        9209
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1874": {
      "fn": "ERC20._burn",
      "offset": [
        9191,
        9209
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1875": {
      "fn": "ERC20._burn",
      "offset": [
        9191,
        9209
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1876": {
      "fn": "ERC20._burn",
      "offset": [
        9191,
        9209
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1877": {
      "fn": "ERC20._burn",
      "offset": [
        9191,
        9209
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1879": {
      "fn": "ERC20._burn",
      "offset": [
        9191,
        9209
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1880": {
      "fn": "ERC20._burn",
      "offset": [
        9227,
        9251
      ],
      "op": "SWAP1",
      "path": "1",
      "statement": 37
    },
    "1881": {
      "fn": "ERC20._burn",
      "offset": [
        9227,
        9251
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1882": {
      "fn": "ERC20._burn",
      "offset": [
        9227,
        9251
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1884": {
      "branch": 56,
      "fn": "ERC20._burn",
      "offset": [
        9227,
        9251
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1885": {
      "fn": "ERC20._burn",
      "offset": [
        9219,
        9290
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1886": {
      "fn": "ERC20._burn",
      "offset": [
        9219,
        9290
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1887": {
      "fn": "ERC20._burn",
      "offset": [
        9219,
        9290
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1888": {
      "fn": "ERC20._burn",
      "offset": [
        9219,
        9290
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1889": {
      "op": "LT"
    },
    "1890": {
      "op": "ISZERO"
    },
    "1891": {
      "op": "PUSH2",
      "value": "0x77E"
    },
    "1894": {
      "branch": 56,
      "fn": "ERC20._burn",
      "offset": [
        9219,
        9290
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1895": {
      "fn": "ERC20._burn",
      "offset": [
        9219,
        9290
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1897": {
      "fn": "ERC20._burn",
      "offset": [
        9219,
        9290
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1898": {
      "fn": "ERC20._burn",
      "offset": [
        9219,
        9290
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0x461BCD"
    },
    "1902": {
      "fn": "ERC20._burn",
      "offset": [
        9219,
        9290
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE5"
    },
    "1904": {
      "fn": "ERC20._burn",
      "offset": [
        9219,
        9290
      ],
      "op": "SHL",
      "path": "1"
    },
    "1905": {
      "fn": "ERC20._burn",
      "offset": [
        9219,
        9290
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1906": {
      "fn": "ERC20._burn",
      "jump": "i",
      "offset": [
        9219,
        9290
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1907": {
      "fn": "ERC20._burn",
      "offset": [
        9219,
        9290
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1909": {
      "op": "ADD"
    },
    "1910": {
      "op": "PUSH2",
      "value": "0x332"
    },
    "1913": {
      "op": "SWAP1"
    },
    "1914": {
      "op": "PUSH2",
      "value": "0xA57"
    },
    "1917": {
      "op": "JUMP"
    },
    "1918": {
      "fn": "ERC20._burn",
      "offset": [
        9324,
        9342
      ],
      "op": "JUMPDEST",
      "path": "1",
      "statement": 38
    },
    "1919": {
      "fn": "ERC20._burn",
      "offset": [
        9324,
        9342
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1921": {
      "fn": "ERC20._burn",
      "offset": [
        9324,
        9333
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1923": {
      "fn": "ERC20._burn",
      "offset": [
        9324,
        9342
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "1925": {
      "fn": "ERC20._burn",
      "offset": [
        9324,
        9342
      ],
      "op": "SHL",
      "path": "1"
    },
    "1926": {
      "fn": "ERC20._burn",
      "offset": [
        9324,
        9342
      ],
      "op": "SUB",
      "path": "1"
    },
    "1927": {
      "fn": "ERC20._burn",
      "offset": [
        9324,
        9342
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1928": {
      "fn": "ERC20._burn",
      "offset": [
        9324,
        9342
      ],
      "op": "AND",
      "path": "1"
    },
    "1929": {
      "fn": "ERC20._burn",
      "offset": [
        9324,
        9342
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1931": {
      "fn": "ERC20._burn",
      "offset": [
        9324,
        9342
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1932": {
      "fn": "ERC20._burn",
      "offset": [
        9324,
        9342
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1933": {
      "fn": "ERC20._burn",
      "offset": [
        9324,
        9342
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1934": {
      "fn": "ERC20._burn",
      "offset": [
        9324,
        9342
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1936": {
      "fn": "ERC20._burn",
      "offset": [
        9345,
        9368
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1937": {
      "fn": "ERC20._burn",
      "offset": [
        9345,
        9368
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1938": {
      "fn": "ERC20._burn",
      "offset": [
        9345,
        9368
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1939": {
      "fn": "ERC20._burn",
      "offset": [
        9324,
        9368
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1941": {
      "fn": "ERC20._burn",
      "offset": [
        9324,
        9368
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1942": {
      "fn": "ERC20._burn",
      "offset": [
        9388,
        9400
      ],
      "op": "KECCAK256",
      "path": "1",
      "statement": 39
    },
    "1943": {
      "fn": "ERC20._burn",
      "offset": [
        9388,
        9410
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1944": {
      "fn": "ERC20._burn",
      "offset": [
        9388,
        9410
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1945": {
      "fn": "ERC20._burn",
      "offset": [
        9345,
        9368
      ],
      "op": "SUB",
      "path": "1"
    },
    "1946": {
      "fn": "ERC20._burn",
      "offset": [
        9345,
        9368
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1947": {
      "fn": "ERC20._burn",
      "offset": [
        9324,
        9333
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "1948": {
      "fn": "ERC20._burn",
      "offset": [
        9388,
        9410
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2"
    },
    "1950": {
      "fn": "ERC20._burn",
      "offset": [
        9388,
        9410
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1951": {
      "fn": "ERC20._burn",
      "offset": [
        9345,
        9368
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1952": {
      "fn": "ERC20._burn",
      "offset": [
        9345,
        9368
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1953": {
      "fn": "ERC20._burn",
      "offset": [
        9388,
        9410
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "1954": {
      "fn": "ERC20._burn",
      "jump": "i",
      "offset": [
        9388,
        9410
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1955": {
      "fn": "ERC20._burn",
      "offset": [
        9388,
        9410
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x7AD"
    },
    "1958": {
      "fn": "ERC20._burn",
      "offset": [
        9388,
        9410
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1959": {
      "fn": "ERC20._burn",
      "offset": [
        9388,
        9410
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1960": {
      "fn": "ERC20._burn",
      "offset": [
        9388,
        9410
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1961": {
      "op": "PUSH2",
      "value": "0xD22"
    },
    "1964": {
      "op": "JUMP"
    },
    "1965": {
      "fn": "ERC20._burn",
      "offset": [
        9426,
        9463
      ],
      "op": "JUMPDEST",
      "path": "1",
      "statement": 40
    },
    "1966": {
      "fn": "ERC20._burn",
      "offset": [
        9426,
        9463
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1967": {
      "fn": "ERC20._burn",
      "offset": [
        9452,
        9453
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1968": {
      "fn": "ERC20._burn",
      "offset": [
        9452,
        9453
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "1969": {
      "op": "POP"
    },
    "1970": {
      "op": "POP"
    },
    "1971": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1973": {
      "op": "MLOAD"
    },
    "1974": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1976": {
      "fn": "ERC20._burn",
      "offset": [
        9426,
        9463
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1977": {
      "fn": "ERC20._burn",
      "offset": [
        9426,
        9463
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1979": {
      "fn": "ERC20._burn",
      "offset": [
        9426,
        9463
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1981": {
      "fn": "ERC20._burn",
      "offset": [
        9426,
        9463
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "1983": {
      "fn": "ERC20._burn",
      "offset": [
        9426,
        9463
      ],
      "op": "SHL",
      "path": "1"
    },
    "1984": {
      "fn": "ERC20._burn",
      "offset": [
        9426,
        9463
      ],
      "op": "SUB",
      "path": "1"
    },
    "1985": {
      "fn": "ERC20._burn",
      "offset": [
        9426,
        9463
      ],
      "op": "DUP6",
      "path": "1"
    },
    "1986": {
      "fn": "ERC20._burn",
      "offset": [
        9456,
        9462
      ],
      "op": "AND",
      "path": "1"
    },
    "1987": {
      "fn": "ERC20._burn",
      "offset": [
        9456,
        9462
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1988": {
      "fn": "ERC20._burn",
      "offset": [
        9426,
        9463
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
    },
    "2021": {
      "fn": "ERC20._burn",
      "jump": "i",
      "offset": [
        9426,
        9463
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2022": {
      "fn": "ERC20._burn",
      "offset": [
        9426,
        9463
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x7F0"
    },
    "2025": {
      "fn": "ERC20._burn",
      "offset": [
        9426,
        9463
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2026": {
      "fn": "ERC20._burn",
      "offset": [
        9426,
        9463
      ],
      "op": "DUP7",
      "path": "1"
    },
    "2027": {
      "fn": "ERC20._burn",
      "offset": [
        9426,
        9463
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2028": {
      "fn": "ERC20._burn",
      "offset": [
        9426,
        9463
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xCF3"
    },
    "2031": {
      "fn": "ERC20._burn",
      "offset": [
        9426,
        9463
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2032": {
      "fn": "ERC20._burn",
      "offset": [
        9426,
        9463
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2033": {
      "fn": "ERC20._burn",
      "offset": [
        9426,
        9463
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2035": {
      "fn": "ERC20._burn",
      "offset": [
        9474,
        9522
      ],
      "op": "MLOAD",
      "path": "1",
      "statement": 41
    },
    "2036": {
      "fn": "ERC20._burn",
      "offset": [
        9494,
        9501
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2037": {
      "fn": "ERC20._burn",
      "offset": [
        9511,
        9512
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2038": {
      "fn": "ERC20._burn",
      "offset": [
        9515,
        9521
      ],
      "op": "SUB",
      "path": "1"
    },
    "2039": {
      "fn": "ERC20._burn",
      "offset": [
        9474,
        9493
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2040": {
      "fn": "ERC20._burn",
      "jump": "i",
      "offset": [
        9474,
        9522
      ],
      "op": "LOG3",
      "path": "1"
    },
    "2041": {
      "fn": "ERC20._mint",
      "offset": [
        8244,
        8633
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x444"
    },
    "2044": {
      "op": "DUP4"
    },
    "2045": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2047": {
      "op": "DUP5"
    },
    "2048": {
      "op": "PUSH2",
      "value": "0x444"
    },
    "2051": {
      "op": "JUMP"
    },
    "2052": {
      "fn": "ERC20._mint",
      "offset": [
        8327,
        8348
      ],
      "op": "JUMPDEST",
      "path": "1",
      "statement": 42
    },
    "2053": {
      "branch": 57,
      "fn": "ERC20._mint",
      "offset": [
        8327,
        8348
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "2055": {
      "fn": "ERC20._mint",
      "offset": [
        8319,
        8384
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "2057": {
      "fn": "ERC20._mint",
      "offset": [
        8319,
        8384
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "2059": {
      "fn": "ERC20._mint",
      "offset": [
        8319,
        8384
      ],
      "op": "SHL",
      "path": "1"
    },
    "2060": {
      "fn": "ERC20._mint",
      "offset": [
        8319,
        8384
      ],
      "op": "SUB",
      "path": "1"
    },
    "2061": {
      "op": "DUP3"
    },
    "2062": {
      "op": "AND"
    },
    "2063": {
      "op": "PUSH2",
      "value": "0x82A"
    },
    "2066": {
      "branch": 57,
      "fn": "ERC20._mint",
      "offset": [
        8319,
        8384
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "2067": {
      "fn": "ERC20._mint",
      "offset": [
        8319,
        8384
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2069": {
      "fn": "ERC20._mint",
      "offset": [
        8319,
        8384
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2070": {
      "fn": "ERC20._mint",
      "offset": [
        8319,
        8384
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0x461BCD"
    },
    "2074": {
      "fn": "ERC20._mint",
      "offset": [
        8319,
        8384
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE5"
    },
    "2076": {
      "fn": "ERC20._mint",
      "offset": [
        8319,
        8384
      ],
      "op": "SHL",
      "path": "1"
    },
    "2077": {
      "fn": "ERC20._mint",
      "offset": [
        8319,
        8384
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2078": {
      "fn": "ERC20._mint",
      "jump": "i",
      "offset": [
        8319,
        8384
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2079": {
      "fn": "ERC20._mint",
      "offset": [
        8319,
        8384
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "2081": {
      "fn": "ERC20._mint",
      "offset": [
        8395,
        8444
      ],
      "op": "ADD",
      "path": "1",
      "statement": 43
    },
    "2082": {
      "fn": "ERC20._mint",
      "offset": [
        8424,
        8425
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x332"
    },
    "2085": {
      "fn": "ERC20._mint",
      "offset": [
        8428,
        8435
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2086": {
      "fn": "ERC20._mint",
      "offset": [
        8437,
        8443
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xCBC"
    },
    "2089": {
      "fn": "ERC20._mint",
      "offset": [
        8395,
        8415
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2090": {
      "fn": "ERC20._mint",
      "jump": "i",
      "offset": [
        8395,
        8444
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2091": {
      "fn": "ERC20._mint",
      "offset": [
        8395,
        8444
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x836"
    },
    "2094": {
      "fn": "ERC20._mint",
      "offset": [
        8471,
        8477
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 44,
      "value": "0x0"
    },
    "2096": {
      "fn": "ERC20._mint",
      "offset": [
        8455,
        8467
      ],
      "op": "DUP4",
      "path": "1"
    },
    "2097": {
      "fn": "ERC20._mint",
      "offset": [
        8455,
        8467
      ],
      "op": "DUP4",
      "path": "1"
    },
    "2098": {
      "fn": "ERC20._mint",
      "offset": [
        8455,
        8477
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x444"
    },
    "2101": {
      "fn": "ERC20._mint",
      "offset": [
        8455,
        8477
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2102": {
      "fn": "ERC20._mint",
      "offset": [
        8455,
        8477
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2103": {
      "fn": "ERC20._mint",
      "offset": [
        8455,
        8477
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2104": {
      "fn": "ERC20._mint",
      "offset": [
        8455,
        8477
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2"
    },
    "2106": {
      "fn": "ERC20._mint",
      "offset": [
        8455,
        8477
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2108": {
      "fn": "ERC20._mint",
      "offset": [
        8455,
        8477
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2109": {
      "fn": "ERC20._mint",
      "jump": "i",
      "offset": [
        8455,
        8477
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2110": {
      "fn": "ERC20._mint",
      "offset": [
        8455,
        8477
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "2111": {
      "fn": "ERC20._mint",
      "offset": [
        8455,
        8477
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x848"
    },
    "2114": {
      "fn": "ERC20._mint",
      "offset": [
        8455,
        8477
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2115": {
      "fn": "ERC20._mint",
      "offset": [
        8455,
        8477
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2116": {
      "op": "PUSH2",
      "value": "0xD0A"
    },
    "2119": {
      "op": "JUMP"
    },
    "2120": {
      "op": "JUMPDEST"
    },
    "2121": {
      "op": "SWAP1"
    },
    "2122": {
      "op": "SWAP2"
    },
    "2123": {
      "op": "SSTORE"
    },
    "2124": {
      "op": "POP"
    },
    "2125": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8505
      ],
      "op": "POP",
      "path": "1",
      "statement": 45
    },
    "2126": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8505
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "2128": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8496
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "2130": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8505
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "2132": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8505
      ],
      "op": "SHL",
      "path": "1"
    },
    "2133": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8505
      ],
      "op": "SUB",
      "path": "1"
    },
    "2134": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8505
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2135": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8505
      ],
      "op": "AND",
      "path": "1"
    },
    "2136": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8505
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2138": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8505
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2139": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8505
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2140": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8505
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2141": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8505
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2143": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8515
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2144": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8515
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2145": {
      "fn": "ERC20._mint",
      "offset": [
        8509,
        8515
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2146": {
      "fn": "ERC20._mint",
      "offset": [
        8509,
        8515
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2148": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8496
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2149": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8515
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "2150": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8515
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2151": {
      "fn": "ERC20._mint",
      "offset": [
        8509,
        8515
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "2152": {
      "fn": "ERC20._mint",
      "offset": [
        8509,
        8515
      ],
      "op": "DUP4",
      "path": "1"
    },
    "2153": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8515
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "2154": {
      "fn": "ERC20._mint",
      "jump": "i",
      "offset": [
        8487,
        8515
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2155": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8515
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x875"
    },
    "2158": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8515
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2159": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8515
      ],
      "op": "DUP5",
      "path": "1"
    },
    "2160": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8515
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2161": {
      "op": "PUSH2",
      "value": "0xD0A"
    },
    "2164": {
      "op": "JUMP"
    },
    "2165": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "JUMPDEST",
      "path": "1",
      "statement": 46
    },
    "2166": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2167": {
      "op": "SWAP2"
    },
    "2168": {
      "op": "SSTORE"
    },
    "2169": {
      "op": "POP"
    },
    "2170": {
      "op": "POP"
    },
    "2171": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2173": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2174": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "2176": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "2178": {
      "fn": "ERC20._mint",
      "offset": [
        8547,
        8548
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "2180": {
      "fn": "ERC20._mint",
      "offset": [
        8547,
        8548
      ],
      "op": "SHL",
      "path": "1"
    },
    "2181": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "SUB",
      "path": "1"
    },
    "2182": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "DUP4",
      "path": "1"
    },
    "2183": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "AND",
      "path": "1"
    },
    "2184": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2185": {
      "fn": "ERC20._mint",
      "offset": [
        8560,
        8566
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2187": {
      "fn": "ERC20._mint",
      "offset": [
        8560,
        8566
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2188": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
    },
    "2221": {
      "fn": "ERC20._mint",
      "jump": "i",
      "offset": [
        8530,
        8567
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2222": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x8B8"
    },
    "2225": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2226": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "DUP6",
      "path": "1"
    },
    "2227": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2228": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xCF3"
    },
    "2231": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2232": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2233": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2235": {
      "fn": "ERC20._mint",
      "offset": [
        8578,
        8626
      ],
      "op": "MLOAD",
      "path": "1",
      "statement": 47
    },
    "2236": {
      "fn": "ERC20._mint",
      "offset": [
        8606,
        8607
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2237": {
      "fn": "ERC20._mint",
      "offset": [
        8610,
        8617
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2238": {
      "fn": "ERC20._mint",
      "offset": [
        8619,
        8625
      ],
      "op": "SUB",
      "path": "1"
    },
    "2239": {
      "fn": "ERC20._mint",
      "offset": [
        8578,
        8597
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2240": {
      "fn": "ERC20._mint",
      "jump": "i",
      "offset": [
        8578,
        8626
      ],
      "op": "LOG3",
      "path": "1"
    },
    "2241": {
      "fn": "ERC20._mint",
      "offset": [
        8578,
        8626
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x8CC"
    },
    "2244": {
      "fn": "ERC20._mint",
      "offset": [
        8244,
        8633
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2246": {
      "fn": "ERC20._mint",
      "offset": [
        8244,
        8633
      ],
      "op": "DUP4",
      "path": "1"
    },
    "2247": {
      "fn": "ERC20._mint",
      "jump": "o",
      "offset": [
        8244,
        8633
      ],
      "op": "DUP4",
      "path": "1"
    },
    "2248": {
      "op": "PUSH2",
      "value": "0x444"
    },
    "2251": {
      "op": "JUMP"
    },
    "2252": {
      "op": "JUMPDEST"
    },
    "2253": {
      "op": "POP"
    },
    "2254": {
      "op": "POP"
    },
    "2255": {
      "op": "JUMP"
    },
    "2256": {
      "op": "JUMPDEST"
    },
    "2257": {
      "op": "DUP1"
    },
    "2258": {
      "op": "CALLDATALOAD"
    },
    "2259": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2261": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2263": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2265": {
      "op": "SHL"
    },
    "2266": {
      "op": "SUB"
    },
    "2267": {
      "op": "DUP2"
    },
    "2268": {
      "op": "AND"
    },
    "2269": {
      "op": "DUP2"
    },
    "2270": {
      "op": "EQ"
    },
    "2271": {
      "op": "PUSH2",
      "value": "0x3F1"
    },
    "2274": {
      "op": "JUMPI"
    },
    "2275": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2277": {
      "op": "DUP1"
    },
    "2278": {
      "op": "REVERT"
    },
    "2279": {
      "op": "JUMPDEST"
    },
    "2280": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2282": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2284": {
      "op": "DUP3"
    },
    "2285": {
      "op": "DUP5"
    },
    "2286": {
      "op": "SUB"
    },
    "2287": {
      "op": "SLT"
    },
    "2288": {
      "op": "ISZERO"
    },
    "2289": {
      "op": "PUSH2",
      "value": "0x8F8"
    },
    "2292": {
      "op": "JUMPI"
    },
    "2293": {
      "op": "DUP1"
    },
    "2294": {
      "jump": "i",
      "op": "DUP2"
    },
    "2295": {
      "op": "REVERT"
    },
    "2296": {
      "op": "JUMPDEST"
    },
    "2297": {
      "op": "PUSH2",
      "value": "0x901"
    },
    "2300": {
      "op": "DUP3"
    },
    "2301": {
      "op": "PUSH2",
      "value": "0x8D0"
    },
    "2304": {
      "op": "JUMP"
    },
    "2305": {
      "jump": "o",
      "op": "JUMPDEST"
    },
    "2306": {
      "op": "SWAP4"
    },
    "2307": {
      "op": "SWAP3"
    },
    "2308": {
      "op": "POP"
    },
    "2309": {
      "op": "POP"
    },
    "2310": {
      "op": "POP"
    },
    "2311": {
      "op": "JUMP"
    },
    "2312": {
      "op": "JUMPDEST"
    },
    "2313": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2315": {
      "op": "DUP1"
    },
    "2316": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2318": {
      "op": "DUP4"
    },
    "2319": {
      "op": "DUP6"
    },
    "2320": {
      "op": "SUB"
    },
    "2321": {
      "op": "SLT"
    },
    "2322": {
      "op": "ISZERO"
    },
    "2323": {
      "op": "PUSH2",
      "value": "0x91A"
    },
    "2326": {
      "op": "JUMPI"
    },
    "2327": {
      "op": "DUP1"
    },
    "2328": {
      "jump": "i",
      "op": "DUP2"
    },
    "2329": {
      "op": "REVERT"
    },
    "2330": {
      "op": "JUMPDEST"
    },
    "2331": {
      "op": "PUSH2",
      "value": "0x923"
    },
    "2334": {
      "op": "DUP4"
    },
    "2335": {
      "op": "PUSH2",
      "value": "0x8D0"
    },
    "2338": {
      "op": "JUMP"
    },
    "2339": {
      "op": "JUMPDEST"
    },
    "2340": {
      "op": "SWAP2"
    },
    "2341": {
      "jump": "i",
      "op": "POP"
    },
    "2342": {
      "op": "PUSH2",
      "value": "0x931"
    },
    "2345": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2347": {
      "op": "DUP5"
    },
    "2348": {
      "op": "ADD"
    },
    "2349": {
      "op": "PUSH2",
      "value": "0x8D0"
    },
    "2352": {
      "op": "JUMP"
    },
    "2353": {
      "op": "JUMPDEST"
    },
    "2354": {
      "op": "SWAP1"
    },
    "2355": {
      "jump": "o",
      "op": "POP"
    },
    "2356": {
      "op": "SWAP3"
    },
    "2357": {
      "op": "POP"
    },
    "2358": {
      "op": "SWAP3"
    },
    "2359": {
      "op": "SWAP1"
    },
    "2360": {
      "op": "POP"
    },
    "2361": {
      "op": "JUMP"
    },
    "2362": {
      "op": "JUMPDEST"
    },
    "2363": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2365": {
      "op": "DUP1"
    },
    "2366": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2368": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2370": {
      "op": "DUP5"
    },
    "2371": {
      "op": "DUP7"
    },
    "2372": {
      "op": "SUB"
    },
    "2373": {
      "op": "SLT"
    },
    "2374": {
      "op": "ISZERO"
    },
    "2375": {
      "op": "PUSH2",
      "value": "0x94E"
    },
    "2378": {
      "op": "JUMPI"
    },
    "2379": {
      "op": "DUP1"
    },
    "2380": {
      "jump": "i",
      "op": "DUP2"
    },
    "2381": {
      "op": "REVERT"
    },
    "2382": {
      "op": "JUMPDEST"
    },
    "2383": {
      "op": "PUSH2",
      "value": "0x957"
    },
    "2386": {
      "op": "DUP5"
    },
    "2387": {
      "op": "PUSH2",
      "value": "0x8D0"
    },
    "2390": {
      "op": "JUMP"
    },
    "2391": {
      "op": "JUMPDEST"
    },
    "2392": {
      "op": "SWAP3"
    },
    "2393": {
      "jump": "i",
      "op": "POP"
    },
    "2394": {
      "op": "PUSH2",
      "value": "0x965"
    },
    "2397": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2399": {
      "op": "DUP6"
    },
    "2400": {
      "op": "ADD"
    },
    "2401": {
      "op": "PUSH2",
      "value": "0x8D0"
    },
    "2404": {
      "op": "JUMP"
    },
    "2405": {
      "op": "JUMPDEST"
    },
    "2406": {
      "op": "SWAP2"
    },
    "2407": {
      "op": "POP"
    },
    "2408": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2410": {
      "op": "DUP5"
    },
    "2411": {
      "op": "ADD"
    },
    "2412": {
      "op": "CALLDATALOAD"
    },
    "2413": {
      "op": "SWAP1"
    },
    "2414": {
      "jump": "o",
      "op": "POP"
    },
    "2415": {
      "op": "SWAP3"
    },
    "2416": {
      "op": "POP"
    },
    "2417": {
      "op": "SWAP3"
    },
    "2418": {
      "op": "POP"
    },
    "2419": {
      "op": "SWAP3"
    },
    "2420": {
      "op": "JUMP"
    },
    "2421": {
      "op": "JUMPDEST"
    },
    "2422": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2424": {
      "op": "DUP1"
    },
    "2425": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2427": {
      "op": "DUP4"
    },
    "2428": {
      "op": "DUP6"
    },
    "2429": {
      "op": "SUB"
    },
    "2430": {
      "op": "SLT"
    },
    "2431": {
      "op": "ISZERO"
    },
    "2432": {
      "op": "PUSH2",
      "value": "0x987"
    },
    "2435": {
      "op": "JUMPI"
    },
    "2436": {
      "op": "DUP2"
    },
    "2437": {
      "jump": "i",
      "op": "DUP3"
    },
    "2438": {
      "op": "REVERT"
    },
    "2439": {
      "op": "JUMPDEST"
    },
    "2440": {
      "op": "PUSH2",
      "value": "0x990"
    },
    "2443": {
      "op": "DUP4"
    },
    "2444": {
      "op": "PUSH2",
      "value": "0x8D0"
    },
    "2447": {
      "op": "JUMP"
    },
    "2448": {
      "op": "JUMPDEST"
    },
    "2449": {
      "op": "SWAP5"
    },
    "2450": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2452": {
      "op": "SWAP4"
    },
    "2453": {
      "op": "SWAP1"
    },
    "2454": {
      "op": "SWAP4"
    },
    "2455": {
      "jump": "o",
      "op": "ADD"
    },
    "2456": {
      "op": "CALLDATALOAD"
    },
    "2457": {
      "op": "SWAP4"
    },
    "2458": {
      "op": "POP"
    },
    "2459": {
      "op": "POP"
    },
    "2460": {
      "op": "POP"
    },
    "2461": {
      "op": "JUMP"
    },
    "2462": {
      "op": "JUMPDEST"
    },
    "2463": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2465": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2467": {
      "op": "DUP3"
    },
    "2468": {
      "op": "DUP5"
    },
    "2469": {
      "op": "SUB"
    },
    "2470": {
      "op": "SLT"
    },
    "2471": {
      "op": "ISZERO"
    },
    "2472": {
      "op": "PUSH2",
      "value": "0x9AF"
    },
    "2475": {
      "op": "JUMPI"
    },
    "2476": {
      "op": "DUP1"
    },
    "2477": {
      "op": "DUP2"
    },
    "2478": {
      "op": "REVERT"
    },
    "2479": {
      "jump": "o",
      "op": "JUMPDEST"
    },
    "2480": {
      "op": "POP"
    },
    "2481": {
      "op": "CALLDATALOAD"
    },
    "2482": {
      "op": "SWAP2"
    },
    "2483": {
      "op": "SWAP1"
    },
    "2484": {
      "op": "POP"
    },
    "2485": {
      "op": "JUMP"
    },
    "2486": {
      "op": "JUMPDEST"
    },
    "2487": {
      "op": "SWAP1"
    },
    "2488": {
      "op": "ISZERO"
    },
    "2489": {
      "jump": "o",
      "op": "ISZERO"
    },
    "2490": {
      "op": "DUP2"
    },
    "2491": {
      "op": "MSTORE"
    },
    "2492": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2494": {
      "op": "ADD"
    },
    "2495": {
      "op": "SWAP1"
    },
    "2496": {
      "op": "JUMP"
    },
    "2497": {
      "op": "JUMPDEST"
    },
    "2498": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2500": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2502": {
      "op": "DUP1"
    },
    "2503": {
      "op": "DUP4"
    },
    "2504": {
      "op": "MSTORE"
    },
    "2505": {
      "op": "DUP4"
    },
    "2506": {
      "op": "MLOAD"
    },
    "2507": {
      "op": "DUP1"
    },
    "2508": {
      "op": "DUP3"
    },
    "2509": {
      "op": "DUP6"
    },
    "2510": {
      "op": "ADD"
    },
    "2511": {
      "op": "MSTORE"
    },
    "2512": {
      "op": "DUP3"
    },
    "2513": {
      "op": "JUMPDEST"
    },
    "2514": {
      "op": "DUP2"
    },
    "2515": {
      "op": "DUP2"
    },
    "2516": {
      "op": "LT"
    },
    "2517": {
      "op": "ISZERO"
    },
    "2518": {
      "op": "PUSH2",
      "value": "0x9ED"
    },
    "2521": {
      "op": "JUMPI"
    },
    "2522": {
      "op": "DUP6"
    },
    "2523": {
      "op": "DUP2"
    },
    "2524": {
      "op": "ADD"
    },
    "2525": {
      "op": "DUP4"
    },
    "2526": {
      "op": "ADD"
    },
    "2527": {
      "op": "MLOAD"
    },
    "2528": {
      "op": "DUP6"
    },
    "2529": {
      "op": "DUP3"
    },
    "2530": {
      "op": "ADD"
    },
    "2531": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2533": {
      "op": "ADD"
    },
    "2534": {
      "op": "MSTORE"
    },
    "2535": {
      "op": "DUP3"
    },
    "2536": {
      "op": "ADD"
    },
    "2537": {
      "op": "PUSH2",
      "value": "0x9D1"
    },
    "2540": {
      "op": "JUMP"
    },
    "2541": {
      "op": "JUMPDEST"
    },
    "2542": {
      "op": "DUP2"
    },
    "2543": {
      "op": "DUP2"
    },
    "2544": {
      "op": "GT"
    },
    "2545": {
      "op": "ISZERO"
    },
    "2546": {
      "op": "PUSH2",
      "value": "0x9FE"
    },
    "2549": {
      "op": "JUMPI"
    },
    "2550": {
      "op": "DUP4"
    },
    "2551": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2553": {
      "op": "DUP4"
    },
    "2554": {
      "op": "DUP8"
    },
    "2555": {
      "op": "ADD"
    },
    "2556": {
      "op": "ADD"
    },
    "2557": {
      "op": "MSTORE"
    },
    "2558": {
      "op": "JUMPDEST"
    },
    "2559": {
      "op": "POP"
    },
    "2560": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2562": {
      "op": "ADD"
    },
    "2563": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2565": {
      "op": "NOT"
    },
    "2566": {
      "op": "AND"
    },
    "2567": {
      "op": "SWAP3"
    },
    "2568": {
      "op": "SWAP1"
    },
    "2569": {
      "op": "SWAP3"
    },
    "2570": {
      "op": "ADD"
    },
    "2571": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2573": {
      "jump": "o",
      "op": "ADD"
    },
    "2574": {
      "op": "SWAP4"
    },
    "2575": {
      "op": "SWAP3"
    },
    "2576": {
      "op": "POP"
    },
    "2577": {
      "op": "POP"
    },
    "2578": {
      "op": "POP"
    },
    "2579": {
      "op": "JUMP"
    },
    "2580": {
      "op": "JUMPDEST"
    },
    "2581": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2583": {
      "op": "DUP1"
    },
    "2584": {
      "op": "DUP3"
    },
    "2585": {
      "op": "MSTORE"
    },
    "2586": {
      "op": "PUSH1",
      "value": "0x23"
    },
    "2588": {
      "op": "SWAP1"
    },
    "2589": {
      "op": "DUP3"
    },
    "2590": {
      "op": "ADD"
    },
    "2591": {
      "op": "MSTORE"
    },
    "2592": {
      "op": "PUSH32",
      "value": "0x45524332303A207472616E7366657220746F20746865207A65726F2061646472"
    },
    "2625": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2627": {
      "op": "DUP3"
    },
    "2628": {
      "op": "ADD"
    },
    "2629": {
      "op": "MSTORE"
    },
    "2630": {
      "op": "PUSH3",
      "value": "0x657373"
    },
    "2634": {
      "op": "PUSH1",
      "value": "0xE8"
    },
    "2636": {
      "op": "SHL"
    },
    "2637": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2639": {
      "jump": "o",
      "op": "DUP3"
    },
    "2640": {
      "op": "ADD"
    },
    "2641": {
      "op": "MSTORE"
    },
    "2642": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2644": {
      "op": "ADD"
    },
    "2645": {
      "op": "SWAP1"
    },
    "2646": {
      "op": "JUMP"
    },
    "2647": {
      "op": "JUMPDEST"
    },
    "2648": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2650": {
      "op": "DUP1"
    },
    "2651": {
      "op": "DUP3"
    },
    "2652": {
      "op": "MSTORE"
    },
    "2653": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "2655": {
      "op": "SWAP1"
    },
    "2656": {
      "op": "DUP3"
    },
    "2657": {
      "op": "ADD"
    },
    "2658": {
      "op": "MSTORE"
    },
    "2659": {
      "op": "PUSH32",
      "value": "0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E"
    },
    "2692": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2694": {
      "op": "DUP3"
    },
    "2695": {
      "op": "ADD"
    },
    "2696": {
      "op": "MSTORE"
    },
    "2697": {
      "op": "PUSH2",
      "value": "0x6365"
    },
    "2700": {
      "op": "PUSH1",
      "value": "0xF0"
    },
    "2702": {
      "op": "SHL"
    },
    "2703": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2705": {
      "jump": "o",
      "op": "DUP3"
    },
    "2706": {
      "op": "ADD"
    },
    "2707": {
      "op": "MSTORE"
    },
    "2708": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2710": {
      "op": "ADD"
    },
    "2711": {
      "op": "SWAP1"
    },
    "2712": {
      "op": "JUMP"
    },
    "2713": {
      "op": "JUMPDEST"
    },
    "2714": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2716": {
      "op": "DUP1"
    },
    "2717": {
      "op": "DUP3"
    },
    "2718": {
      "op": "MSTORE"
    },
    "2719": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "2721": {
      "op": "SWAP1"
    },
    "2722": {
      "op": "DUP3"
    },
    "2723": {
      "op": "ADD"
    },
    "2724": {
      "op": "MSTORE"
    },
    "2725": {
      "op": "PUSH32",
      "value": "0x45524332303A20617070726F766520746F20746865207A65726F206164647265"
    },
    "2758": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2760": {
      "op": "DUP3"
    },
    "2761": {
      "op": "ADD"
    },
    "2762": {
      "op": "MSTORE"
    },
    "2763": {
      "op": "PUSH2",
      "value": "0x7373"
    },
    "2766": {
      "op": "PUSH1",
      "value": "0xF0"
    },
    "2768": {
      "op": "SHL"
    },
    "2769": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2771": {
      "jump": "o",
      "op": "DUP3"
    },
    "2772": {
      "op": "ADD"
    },
    "2773": {
      "op": "MSTORE"
    },
    "2774": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2776": {
      "op": "ADD"
    },
    "2777": {
      "op": "SWAP1"
    },
    "2778": {
      "op": "JUMP"
    },
    "2779": {
      "op": "JUMPDEST"
    },
    "2780": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2782": {
      "op": "DUP1"
    },
    "2783": {
      "op": "DUP3"
    },
    "2784": {
      "op": "MSTORE"
    },
    "2785": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "2787": {
      "op": "SWAP1"
    },
    "2788": {
      "op": "DUP3"
    },
    "2789": {
      "op": "ADD"
    },
    "2790": {
      "op": "MSTORE"
    },
    "2791": {
      "op": "PUSH32",
      "value": "0x45524332303A207472616E7366657220616D6F756E7420657863656564732062"
    },
    "2824": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2826": {
      "op": "DUP3"
    },
    "2827": {
      "op": "ADD"
    },
    "2828": {
      "op": "MSTORE"
    },
    "2829": {
      "op": "PUSH6",
      "value": "0x616C616E6365"
    },
    "2836": {
      "op": "PUSH1",
      "value": "0xD0"
    },
    "2838": {
      "op": "SHL"
    },
    "2839": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2841": {
      "jump": "o",
      "op": "DUP3"
    },
    "2842": {
      "op": "ADD"
    },
    "2843": {
      "op": "MSTORE"
    },
    "2844": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2846": {
      "op": "ADD"
    },
    "2847": {
      "op": "SWAP1"
    },
    "2848": {
      "op": "JUMP"
    },
    "2849": {
      "op": "JUMPDEST"
    },
    "2850": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2852": {
      "op": "DUP1"
    },
    "2853": {
      "op": "DUP3"
    },
    "2854": {
      "op": "MSTORE"
    },
    "2855": {
      "op": "PUSH1",
      "value": "0x28"
    },
    "2857": {
      "op": "SWAP1"
    },
    "2858": {
      "op": "DUP3"
    },
    "2859": {
      "op": "ADD"
    },
    "2860": {
      "op": "MSTORE"
    },
    "2861": {
      "op": "PUSH32",
      "value": "0x45524332303A207472616E7366657220616D6F756E7420657863656564732061"
    },
    "2894": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2896": {
      "op": "DUP3"
    },
    "2897": {
      "op": "ADD"
    },
    "2898": {
      "op": "MSTORE"
    },
    "2899": {
      "op": "PUSH8",
      "value": "0x6C6C6F77616E6365"
    },
    "2908": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "2910": {
      "op": "SHL"
    },
    "2911": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2913": {
      "jump": "o",
      "op": "DUP3"
    },
    "2914": {
      "op": "ADD"
    },
    "2915": {
      "op": "MSTORE"
    },
    "2916": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2918": {
      "op": "ADD"
    },
    "2919": {
      "op": "SWAP1"
    },
    "2920": {
      "op": "JUMP"
    },
    "2921": {
      "op": "JUMPDEST"
    },
    "2922": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2924": {
      "op": "DUP1"
    },
    "2925": {
      "op": "DUP3"
    },
    "2926": {
      "op": "MSTORE"
    },
    "2927": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2929": {
      "op": "SWAP1"
    },
    "2930": {
      "op": "DUP3"
    },
    "2931": {
      "op": "ADD"
    },
    "2932": {
      "op": "MSTORE"
    },
    "2933": {
      "op": "PUSH32",
      "value": "0x45524332303A206275726E20616D6F756E74206578636565647320616C6C6F77"
    },
    "2966": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2968": {
      "op": "DUP3"
    },
    "2969": {
      "op": "ADD"
    },
    "2970": {
      "op": "MSTORE"
    },
    "2971": {
      "op": "PUSH4",
      "value": "0x616E6365"
    },
    "2976": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2978": {
      "op": "SHL"
    },
    "2979": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2981": {
      "jump": "o",
      "op": "DUP3"
    },
    "2982": {
      "op": "ADD"
    },
    "2983": {
      "op": "MSTORE"
    },
    "2984": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2986": {
      "op": "ADD"
    },
    "2987": {
      "op": "SWAP1"
    },
    "2988": {
      "op": "JUMP"
    },
    "2989": {
      "op": "JUMPDEST"
    },
    "2990": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2992": {
      "op": "DUP1"
    },
    "2993": {
      "op": "DUP3"
    },
    "2994": {
      "op": "MSTORE"
    },
    "2995": {
      "op": "PUSH1",
      "value": "0x21"
    },
    "2997": {
      "op": "SWAP1"
    },
    "2998": {
      "op": "DUP3"
    },
    "2999": {
      "op": "ADD"
    },
    "3000": {
      "op": "MSTORE"
    },
    "3001": {
      "op": "PUSH32",
      "value": "0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573"
    },
    "3034": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3036": {
      "op": "DUP3"
    },
    "3037": {
      "op": "ADD"
    },
    "3038": {
      "op": "MSTORE"
    },
    "3039": {
      "op": "PUSH1",
      "value": "0x73"
    },
    "3041": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "3043": {
      "op": "SHL"
    },
    "3044": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3046": {
      "jump": "o",
      "op": "DUP3"
    },
    "3047": {
      "op": "ADD"
    },
    "3048": {
      "op": "MSTORE"
    },
    "3049": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3051": {
      "op": "ADD"
    },
    "3052": {
      "op": "SWAP1"
    },
    "3053": {
      "op": "JUMP"
    },
    "3054": {
      "op": "JUMPDEST"
    },
    "3055": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3057": {
      "op": "DUP1"
    },
    "3058": {
      "op": "DUP3"
    },
    "3059": {
      "op": "MSTORE"
    },
    "3060": {
      "op": "PUSH1",
      "value": "0x25"
    },
    "3062": {
      "op": "SWAP1"
    },
    "3063": {
      "op": "DUP3"
    },
    "3064": {
      "op": "ADD"
    },
    "3065": {
      "op": "MSTORE"
    },
    "3066": {
      "op": "PUSH32",
      "value": "0x45524332303A207472616E736665722066726F6D20746865207A65726F206164"
    },
    "3099": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3101": {
      "op": "DUP3"
    },
    "3102": {
      "op": "ADD"
    },
    "3103": {
      "op": "MSTORE"
    },
    "3104": {
      "op": "PUSH5",
      "value": "0x6472657373"
    },
    "3110": {
      "op": "PUSH1",
      "value": "0xD8"
    },
    "3112": {
      "op": "SHL"
    },
    "3113": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3115": {
      "jump": "o",
      "op": "DUP3"
    },
    "3116": {
      "op": "ADD"
    },
    "3117": {
      "op": "MSTORE"
    },
    "3118": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3120": {
      "op": "ADD"
    },
    "3121": {
      "op": "SWAP1"
    },
    "3122": {
      "op": "JUMP"
    },
    "3123": {
      "op": "JUMPDEST"
    },
    "3124": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3126": {
      "op": "DUP1"
    },
    "3127": {
      "op": "DUP3"
    },
    "3128": {
      "op": "MSTORE"
    },
    "3129": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3131": {
      "op": "SWAP1"
    },
    "3132": {
      "op": "DUP3"
    },
    "3133": {
      "op": "ADD"
    },
    "3134": {
      "op": "MSTORE"
    },
    "3135": {
      "op": "PUSH32",
      "value": "0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
    },
    "3168": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3170": {
      "op": "DUP3"
    },
    "3171": {
      "op": "ADD"
    },
    "3172": {
      "op": "MSTORE"
    },
    "3173": {
      "op": "PUSH4",
      "value": "0x72657373"
    },
    "3178": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3180": {
      "op": "SHL"
    },
    "3181": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3183": {
      "jump": "o",
      "op": "DUP3"
    },
    "3184": {
      "op": "ADD"
    },
    "3185": {
      "op": "MSTORE"
    },
    "3186": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3188": {
      "op": "ADD"
    },
    "3189": {
      "op": "SWAP1"
    },
    "3190": {
      "op": "JUMP"
    },
    "3191": {
      "op": "JUMPDEST"
    },
    "3192": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3194": {
      "op": "DUP1"
    },
    "3195": {
      "op": "DUP3"
    },
    "3196": {
      "op": "MSTORE"
    },
    "3197": {
      "op": "PUSH1",
      "value": "0x25"
    },
    "3199": {
      "op": "SWAP1"
    },
    "3200": {
      "op": "DUP3"
    },
    "3201": {
      "op": "ADD"
    },
    "3202": {
      "op": "MSTORE"
    },
    "3203": {
      "op": "PUSH32",
      "value": "0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
    },
    "3236": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3238": {
      "op": "DUP3"
    },
    "3239": {
      "op": "ADD"
    },
    "3240": {
      "op": "MSTORE"
    },
    "3241": {
      "op": "PUSH5",
      "value": "0x207A65726F"
    },
    "3247": {
      "op": "PUSH1",
      "value": "0xD8"
    },
    "3249": {
      "op": "SHL"
    },
    "3250": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3252": {
      "jump": "o",
      "op": "DUP3"
    },
    "3253": {
      "op": "ADD"
    },
    "3254": {
      "op": "MSTORE"
    },
    "3255": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3257": {
      "op": "ADD"
    },
    "3258": {
      "op": "SWAP1"
    },
    "3259": {
      "op": "JUMP"
    },
    "3260": {
      "op": "JUMPDEST"
    },
    "3261": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3263": {
      "op": "DUP1"
    },
    "3264": {
      "op": "DUP3"
    },
    "3265": {
      "op": "MSTORE"
    },
    "3266": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3268": {
      "op": "SWAP1"
    },
    "3269": {
      "op": "DUP3"
    },
    "3270": {
      "op": "ADD"
    },
    "3271": {
      "op": "MSTORE"
    },
    "3272": {
      "op": "PUSH32",
      "value": "0x45524332303A206D696E7420746F20746865207A65726F206164647265737300"
    },
    "3305": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3307": {
      "jump": "o",
      "op": "DUP3"
    },
    "3308": {
      "op": "ADD"
    },
    "3309": {
      "op": "MSTORE"
    },
    "3310": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3312": {
      "op": "ADD"
    },
    "3313": {
      "op": "SWAP1"
    },
    "3314": {
      "op": "JUMP"
    },
    "3315": {
      "op": "JUMPDEST"
    },
    "3316": {
      "jump": "o",
      "op": "SWAP1"
    },
    "3317": {
      "op": "DUP2"
    },
    "3318": {
      "op": "MSTORE"
    },
    "3319": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3321": {
      "op": "ADD"
    },
    "3322": {
      "op": "SWAP1"
    },
    "3323": {
      "op": "JUMP"
    },
    "3324": {
      "op": "JUMPDEST"
    },
    "3325": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "3327": {
      "op": "SWAP2"
    },
    "3328": {
      "op": "SWAP1"
    },
    "3329": {
      "op": "SWAP2"
    },
    "3330": {
      "jump": "o",
      "op": "AND"
    },
    "3331": {
      "op": "DUP2"
    },
    "3332": {
      "op": "MSTORE"
    },
    "3333": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3335": {
      "op": "ADD"
    },
    "3336": {
      "op": "SWAP1"
    },
    "3337": {
      "op": "JUMP"
    },
    "3338": {
      "op": "JUMPDEST"
    },
    "3339": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3341": {
      "op": "DUP3"
    },
    "3342": {
      "op": "NOT"
    },
    "3343": {
      "op": "DUP3"
    },
    "3344": {
      "jump": "i",
      "op": "GT"
    },
    "3345": {
      "op": "ISZERO"
    },
    "3346": {
      "op": "PUSH2",
      "value": "0xD1D"
    },
    "3349": {
      "op": "JUMPI"
    },
    "3350": {
      "op": "PUSH2",
      "value": "0xD1D"
    },
    "3353": {
      "jump": "o",
      "op": "PUSH2",
      "value": "0xD74"
    },
    "3356": {
      "op": "JUMP"
    },
    "3357": {
      "op": "JUMPDEST"
    },
    "3358": {
      "op": "POP"
    },
    "3359": {
      "op": "ADD"
    },
    "3360": {
      "op": "SWAP1"
    },
    "3361": {
      "op": "JUMP"
    },
    "3362": {
      "op": "JUMPDEST"
    },
    "3363": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3365": {
      "op": "DUP3"
    },
    "3366": {
      "op": "DUP3"
    },
    "3367": {
      "jump": "i",
      "op": "LT"
    },
    "3368": {
      "op": "ISZERO"
    },
    "3369": {
      "op": "PUSH2",
      "value": "0xD34"
    },
    "3372": {
      "op": "JUMPI"
    },
    "3373": {
      "op": "PUSH2",
      "value": "0xD34"
    },
    "3376": {
      "jump": "o",
      "op": "PUSH2",
      "value": "0xD74"
    },
    "3379": {
      "op": "JUMP"
    },
    "3380": {
      "op": "JUMPDEST"
    },
    "3381": {
      "op": "POP"
    },
    "3382": {
      "op": "SUB"
    },
    "3383": {
      "op": "SWAP1"
    },
    "3384": {
      "op": "JUMP"
    },
    "3385": {
      "op": "JUMPDEST"
    },
    "3386": {
      "op": "PUSH1",
      "value": "0x2"
    },
    "3388": {
      "op": "DUP2"
    },
    "3389": {
      "op": "DIV"
    },
    "3390": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3392": {
      "op": "DUP3"
    },
    "3393": {
      "op": "AND"
    },
    "3394": {
      "op": "DUP1"
    },
    "3395": {
      "op": "PUSH2",
      "value": "0xD4D"
    },
    "3398": {
      "op": "JUMPI"
    },
    "3399": {
      "op": "PUSH1",
      "value": "0x7F"
    },
    "3401": {
      "op": "DUP3"
    },
    "3402": {
      "op": "AND"
    },
    "3403": {
      "op": "SWAP2"
    },
    "3404": {
      "op": "POP"
    },
    "3405": {
      "op": "JUMPDEST"
    },
    "3406": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3408": {
      "op": "DUP3"
    },
    "3409": {
      "op": "LT"
    },
    "3410": {
      "op": "DUP2"
    },
    "3411": {
      "op": "EQ"
    },
    "3412": {
      "op": "ISZERO"
    },
    "3413": {
      "op": "PUSH2",
      "value": "0xD6E"
    },
    "3416": {
      "op": "JUMPI"
    },
    "3417": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "3422": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3424": {
      "op": "SHL"
    },
    "3425": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3427": {
      "op": "MSTORE"
    },
    "3428": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "3430": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "3432": {
      "op": "MSTORE"
    },
    "3433": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3435": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3437": {
      "jump": "o",
      "op": "REVERT"
    },
    "3438": {
      "op": "JUMPDEST"
    },
    "3439": {
      "op": "POP"
    },
    "3440": {
      "op": "SWAP2"
    },
    "3441": {
      "op": "SWAP1"
    },
    "3442": {
      "op": "POP"
    },
    "3443": {
      "op": "JUMP"
    },
    "3444": {
      "op": "JUMPDEST"
    },
    "3445": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "3450": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3452": {
      "op": "SHL"
    },
    "3453": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3455": {
      "op": "MSTORE"
    },
    "3456": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "3458": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "3460": {
      "op": "MSTORE"
    },
    "3461": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3463": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3465": {
      "op": "REVERT"
    }
  },
  "sha1": "929dd75fae3fcc587c23505153556e17e8802f12",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport  {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport  {ERC20Burnable} from \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n\ninterface IERC20 {\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    function approve(address spender, uint256 amount) external returns (bool);\n}\n\n\ncontract BTCUP is  ERC20, ERC20Burnable {\n    address parentAddress;\n\n    constructor(address _parentAddress) ERC20(\"Bitcoin Up\", \"BTCUP\") {\n        parentAddress = _parentAddress;\n    }\n\n    function mint(uint256 quantity) public onlyParent {\n        _mint(tx.origin, quantity);\n    }\n\n    function burn(uint256 quantity) public override onlyParent {\n        burnFrom(tx.origin, quantity);\n    }\n\n    function decimals() public view override returns (uint8) {\n        return 6;\n    }\n\n    modifier onlyParent {\n        require(msg.sender == parentAddress);\n        _;\n    }\n}\n\n\ncontract BTCDOWN is ERC20, ERC20Burnable {\n    address parentAddress;\n\n    constructor(address _parentAddress) ERC20(\"Bitcoin Down\", \"BTCDOWN\") {\n        parentAddress = _parentAddress;\n    }\n\n    function mint(uint256 quantity) public onlyParent {\n        _mint(tx.origin, quantity);\n    }\n\n    function burn(uint256 quantity) public override onlyParent {\n        burnFrom(tx.origin, quantity);\n    }\n\n    function decimals() public view override returns (uint8) {\n        return 6;\n    }\n\n    modifier onlyParent {\n        require(msg.sender == parentAddress);\n        _;\n    }\n}\n\n\ncontract LeveragedTrading is Ownable {\n    using SafeMath for uint256;\n\n    uint256 public priceBtcUp = 10 ** 6;\n    uint256 public priceBtcDown = 10 ** 6;        // 6 decimals\n\n    uint256 public collateralBtcUp = 0;          //6 decimals\n    uint256 public collateralBtcDown = 0;\n\n    uint256 public amountBtcUp = 0;           // 6 decimals\n    uint256 public amountBtcDown = 0;         // 6 decimals\n\n    uint256 public lastBtcPrice = 0;       // 8 decimals, chainlink conventions\n\n    bool public poolIsInitialized = false;\n\n    address addressUsdc = 0xb7a4F3E9097C08dA09517b5aB877F7a917224ede;  // <- Kovan  //0xeb8f08a975Ab53E34D8a0330E0D34de942C95926;\n    address addressBtcUSDFeed =  0x6135b13325bfC4B00278B4abC5e20bbce2D6580e; // <- Kovan          // 0xECe365B379E1dD183B20fc5f022230C044d51404;\n\n    BTCUP btcUp;\n    BTCDOWN btcDown;\n\n    function initializePool(uint256 amountUsdc) public onlyOwner {\n        require(!poolIsInitialized, \"The pool was already initiated.\");\n\n        btcUp = new BTCUP(address(this));\n        btcDown = new BTCDOWN(address(this));\n\n        issueBtcUp(amountUsdc.div(2));\n        issueBtcDown(amountUsdc.div(2));\n\n        poolIsInitialized = true;\n    }\n\n    function issueBtcUp(uint256 amountUsdc) public {\n        rebalanceLeveragedTokens();\n        \n        priceBtcUp = getBtcUpPrice();\n        uint256 amountLeveragedTokens = amountUsdc.mul(10 ** 6).div(priceBtcUp);\n\n        btcUp.mint(amountLeveragedTokens);\n        amountBtcUp = amountBtcUp.add(amountLeveragedTokens);\n        collateralBtcUp = collateralBtcUp.add(amountUsdc);\n\n        IERC20 usdc = IERC20(addressUsdc);\n        require(usdc.transferFrom(msg.sender, address(this), amountUsdc), \"You don't have enough USDC.\");\n    }\n\n    function issueBtcDown(uint256 amountUsdc) public {\n        rebalanceLeveragedTokens();\n        \n        priceBtcDown = getBtcDownPrice();\n        uint256 amountLeveragedTokens = amountUsdc.mul(10 ** 6).div(priceBtcDown);\n\n        btcDown.mint(amountLeveragedTokens);\n        amountBtcDown = amountBtcDown.add(amountLeveragedTokens);\n        collateralBtcDown = collateralBtcDown.add(amountUsdc);\n\n        IERC20 usdc = IERC20(addressUsdc);\n        require(usdc.transferFrom(msg.sender, address(this), amountUsdc), \"You don't have enough USDC.\");\n    }\n\n    function redeemBtcUp(uint256 amountLeveragedTokens) public {\n        rebalanceLeveragedTokens();\n        btcUp.burn(amountLeveragedTokens);\n\n        priceBtcUp = getBtcUpPrice();\n        uint256 amountUsdc = amountLeveragedTokens.mul(priceBtcUp).div(10 ** 6);\n\n        amountBtcUp = amountBtcUp.sub(amountLeveragedTokens);\n        collateralBtcUp = collateralBtcUp.sub(amountUsdc);\n\n        IERC20 usdc = IERC20(addressUsdc);\n        assert(usdc.transfer(msg.sender, amountUsdc));\n    }\n\n    function redeemBtcDown(uint256 amountLeveragedTokens) public {\n        rebalanceLeveragedTokens();\n        btcDown.burn(amountLeveragedTokens);\n\n        priceBtcDown = getBtcDownPrice();\n        uint256 amountUsdc = amountLeveragedTokens.mul(priceBtcDown).div(10 ** 6);\n        \n        amountBtcDown = amountBtcDown.sub(amountLeveragedTokens);\n        collateralBtcDown = collateralBtcDown.sub(amountUsdc);\n\n        IERC20 usdc = IERC20(addressUsdc);\n        assert(usdc.transfer(msg.sender,  amountUsdc));\n    }\n\n    function rebalanceLeveragedTokens() public {\n        uint256 btcPrice = getBtcPrice();\n        if ((collateralBtcUp > 0) && (collateralBtcDown > 0)) {\n            uint256 rebalanceAmount = getRebalanceAmount(btcPrice);\n            if (getSign(btcPrice) > 0) {\n                collateralBtcUp = collateralBtcUp.add(rebalanceAmount);\n                collateralBtcDown = collateralBtcDown.sub(rebalanceAmount);\n            }\n\n            else {\n                collateralBtcUp = collateralBtcUp.sub(rebalanceAmount);\n                collateralBtcDown = collateralBtcDown.add(rebalanceAmount);\n            }\n\n        }\n        lastBtcPrice = btcPrice;\n    }\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    function getSign(uint256 btcPrice) internal view returns (int256) {\n        if (btcPrice > lastBtcPrice) {\n            return 1;\n        }\n        else {\n            return -1;\n        }\n    }\n \n    function getRebalanceAmount(uint256 priceBtc) internal view returns (uint256) {\n        uint256 priceDiff = getPriceDiff(priceBtc);\n\n        return min(collateralBtcUp, collateralBtcDown).mul(L(priceDiff)).div(10 ** 6);\n    }\n\n// getBtcUpPrice() 6 decimals\n    function getBtcUpPrice() public view returns (uint256) {\n        return amountBtcUp == 0 ?  priceBtcUp : collateralBtcUp.mul(10 ** 6).div(amountBtcUp);\n    }\n\n// getBtcDownPrice() 6 decimals\n    function getBtcDownPrice() public view returns (uint256) {//6 decimals\n        return amountBtcDown == 0 ?  priceBtcDown : collateralBtcDown.mul(10 ** 6).div(amountBtcDown);\n    }\n\n// get the price of our asset with 8 decimals\n    function getBtcPrice() public view returns (uint256) {\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(addressBtcUSDFeed);\n        (,int256 answer,,,) = priceFeed.latestRoundData();\n\n         return uint256(answer);             // we call chainlink oracle to get the price of the asset\n         \n    }\n    \n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a <= b ? a : b;\n    }\n\n    function L(uint256 x) internal pure returns (uint256) {            //6  decimals\n\n        uint256 denom = 9 * (x ** 2 / 10 ** 6)  + 3 * x + 10 ** 6;\n        uint256 num = 10 ** 12;\n\n        return 10 ** 6 - num / denom;\n    }\n\n    function getPriceDiff(uint256 btcPrice) internal view returns (uint256) {     //6 decimals\n        if (btcPrice > lastBtcPrice) {\n            return btcPrice.mul(10 ** 6).div(lastBtcPrice).sub(10 ** 6);\n        }\n\n        else {\n            return lastBtcPrice.mul(10 ** 6).div(btcPrice).sub(10 ** 6);\n        }\n\n    }\n\n    function getBtcupBalance() public view returns(uint256) {\n        return btcUp.balanceOf(msg.sender);\n    }\n\n    function getBtcdownBalance() public view returns(uint256) {\n        return btcDown.balanceOf(msg.sender);\n    }\n\n\n}\n\n\n\n\n\n\n",
  "sourceMap": "1279:581:8:-:0;;;1354:116;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1896:113:1;;;;;;;;;;;-1:-1:-1;;;1896:113:1;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1896:113:1;;;;1962:13;;1896:113;;;1962:13;;:5;;:13;:::i;:::-;-1:-1:-1;1985:17:1;;;;:7;;:17;;;;;:::i;:::-;-1:-1:-1;;1433:13:8::1;:30:::0;;-1:-1:-1;;;;;;1433:30:8::1;-1:-1:-1::0;;;;;1433:30:8;;;::::1;::::0;;;::::1;::::0;;;-1:-1:-1;1279:581:8;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1279:581:8;;;-1:-1:-1;1279:581:8;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:310:9;;137:2;125:9;116:7;112:23;108:32;105:2;;;158:6;150;143:22;105:2;189:16;;-1:-1:-1;;;;;234:31:9;;224:42;;214:2;;285:6;277;270:22;214:2;313:5;95:229;-1:-1:-1;;;95:229:9:o;329:380::-;414:1;404:12;;461:1;451:12;;;472:2;;526:4;518:6;514:17;504:27;;472:2;579;571:6;568:14;548:18;545:38;542:2;;;625:10;620:3;616:20;613:1;606:31;660:4;657:1;650:15;688:4;685:1;678:15;542:2;;384:325;;;:::o;:::-;1279:581:8;;;;;;",
  "sourcePath": "contracts/LeveragedTrading.sol",
  "type": "contract"
}
},{}],2:[function(require,module,exports){
module.exports={
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_parentAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "1": "/home/alex/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/token/ERC20/ERC20.sol",
    "2": "/home/alex/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/token/ERC20/IERC20.sol",
    "3": "/home/alex/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/token/ERC20/extensions/ERC20Burnable.sol",
    "4": "/home/alex/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/token/ERC20/extensions/IERC20Metadata.sol",
    "5": "/home/alex/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/utils/Context.sol",
    "8": "contracts/LeveragedTrading.sol"
  },
  "ast": {
    "absolutePath": "contracts/LeveragedTrading.sol",
    "exportedSymbols": {
      "AggregatorV3Interface": [
        1914
      ],
      "BTCDOWN": [
        178
      ],
      "BTCUP": [
        108
      ],
      "Context": [
        1935
      ],
      "ERC20": [
        1494
      ],
      "ERC20Burnable": [
        1556
      ],
      "IERC20": [
        38
      ],
      "LeveragedTrading": [
        844
      ],
      "Ownable": [
        948
      ],
      "SafeMath": [
        1868
      ]
    },
    "id": 845,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:8"
      },
      {
        "absolutePath": "/home/alex/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/token/ERC20/ERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        "id": 3,
        "nodeType": "ImportDirective",
        "scope": 845,
        "sourceUnit": 1495,
        "src": "57:69:8",
        "symbolAliases": [
          {
            "foreign": {
              "id": 2,
              "name": "ERC20",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "src": "66:5:8",
              "typeDescriptions": {}
            }
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/alex/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/token/ERC20/extensions/ERC20Burnable.sol",
        "file": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
        "id": 5,
        "nodeType": "ImportDirective",
        "scope": 845,
        "sourceUnit": 1557,
        "src": "127:96:8",
        "symbolAliases": [
          {
            "foreign": {
              "id": 4,
              "name": "ERC20Burnable",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "src": "136:13:8",
              "typeDescriptions": {}
            }
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/alex/.brownie/packages/smartcontractkit/chainlink@1.3.0/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol",
        "file": "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol",
        "id": 6,
        "nodeType": "ImportDirective",
        "scope": 845,
        "sourceUnit": 1915,
        "src": "224:76:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/alex/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/utils/math/SafeMath.sol",
        "file": "@openzeppelin/contracts/utils/math/SafeMath.sol",
        "id": 7,
        "nodeType": "ImportDirective",
        "scope": 845,
        "sourceUnit": 1869,
        "src": "301:57:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/alex/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/access/Ownable.sol",
        "file": "@openzeppelin/contracts/access/Ownable.sol",
        "id": 8,
        "nodeType": "ImportDirective",
        "scope": 845,
        "sourceUnit": 949,
        "src": "359:52:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "id": 38,
        "linearizedBaseContracts": [
          38
        ],
        "name": "IERC20",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "functionSelector": "a9059cbb",
            "id": 17,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "transfer",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nodeType": "VariableDeclaration",
                  "scope": 17,
                  "src": "455:17:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 9,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "455:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 17,
                  "src": "474:14:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 11,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "474:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "454:35:8"
            },
            "returnParameters": {
              "id": 16,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 15,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 17,
                  "src": "508:4:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 14,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "508:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "507:6:8"
            },
            "scope": 38,
            "src": "437:77:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "functionSelector": "23b872dd",
            "id": 28,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "transferFrom",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 24,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19,
                  "mutability": "mutable",
                  "name": "sender",
                  "nodeType": "VariableDeclaration",
                  "scope": 28,
                  "src": "541:14:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 18,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "541:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 21,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nodeType": "VariableDeclaration",
                  "scope": 28,
                  "src": "557:17:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 20,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "557:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 23,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 28,
                  "src": "576:14:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 22,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "576:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "540:51:8"
            },
            "returnParameters": {
              "id": 27,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 28,
                  "src": "610:4:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 25,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "610:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "609:6:8"
            },
            "scope": 38,
            "src": "519:97:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "functionSelector": "095ea7b3",
            "id": 37,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "approve",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 33,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 30,
                  "mutability": "mutable",
                  "name": "spender",
                  "nodeType": "VariableDeclaration",
                  "scope": 37,
                  "src": "638:15:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 29,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "638:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 32,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 37,
                  "src": "655:14:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 31,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "655:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "637:33:8"
            },
            "returnParameters": {
              "id": 36,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 35,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 37,
                  "src": "689:4:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 34,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "689:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "688:6:8"
            },
            "scope": 38,
            "src": "621:74:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 845,
        "src": "414:283:8"
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 39,
              "name": "ERC20",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1494,
              "src": "719:5:8"
            },
            "id": 40,
            "nodeType": "InheritanceSpecifier",
            "src": "719:5:8"
          },
          {
            "baseName": {
              "id": 41,
              "name": "ERC20Burnable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1556,
              "src": "726:13:8"
            },
            "id": 42,
            "nodeType": "InheritanceSpecifier",
            "src": "726:13:8"
          }
        ],
        "contractDependencies": [
          1494,
          1556,
          1935,
          2013,
          2038
        ],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 108,
        "linearizedBaseContracts": [
          108,
          1556,
          1494,
          2038,
          2013,
          1935
        ],
        "name": "BTCUP",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 44,
            "mutability": "mutable",
            "name": "parentAddress",
            "nodeType": "VariableDeclaration",
            "scope": 108,
            "src": "746:21:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 43,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "746:7:8",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 57,
              "nodeType": "Block",
              "src": "839:47:8",
              "statements": [
                {
                  "expression": {
                    "id": 55,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 53,
                      "name": "parentAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 44,
                      "src": "849:13:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 54,
                      "name": "_parentAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 46,
                      "src": "865:14:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "849:30:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 56,
                  "nodeType": "ExpressionStatement",
                  "src": "849:30:8"
                }
              ]
            },
            "id": 58,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "426974636f696e205570",
                    "id": 49,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "816:12:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_9cbc1d0721872492c3eae100dd6a7dad3b4b199dc4e72a46010b2b1c98a11964",
                      "typeString": "literal_string \"Bitcoin Up\""
                    },
                    "value": "Bitcoin Up"
                  },
                  {
                    "hexValue": "4254435550",
                    "id": 50,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "830:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_f92903022a172a42cae03bdc1621474c2ab6bc2b8980d8251e05283c61f8c975",
                      "typeString": "literal_string \"BTCUP\""
                    },
                    "value": "BTCUP"
                  }
                ],
                "id": 51,
                "modifierName": {
                  "id": 48,
                  "name": "ERC20",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 1494,
                  "src": "810:5:8"
                },
                "nodeType": "ModifierInvocation",
                "src": "810:28:8"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 47,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 46,
                  "mutability": "mutable",
                  "name": "_parentAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 58,
                  "src": "786:22:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 45,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "786:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "785:24:8"
            },
            "returnParameters": {
              "id": 52,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "839:0:8"
            },
            "scope": 108,
            "src": "774:112:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 71,
              "nodeType": "Block",
              "src": "942:43:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 66,
                          "name": "tx",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -26,
                          "src": "958:2:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_transaction",
                            "typeString": "tx"
                          }
                        },
                        "id": 67,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "origin",
                        "nodeType": "MemberAccess",
                        "src": "958:9:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 68,
                        "name": "quantity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60,
                        "src": "969:8:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 65,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1354,
                      "src": "952:5:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 69,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "952:26:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 70,
                  "nodeType": "ExpressionStatement",
                  "src": "952:26:8"
                }
              ]
            },
            "functionSelector": "a0712d68",
            "id": 72,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 63,
                "modifierName": {
                  "id": 62,
                  "name": "onlyParent",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 107,
                  "src": "931:10:8"
                },
                "nodeType": "ModifierInvocation",
                "src": "931:10:8"
              }
            ],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 61,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60,
                  "mutability": "mutable",
                  "name": "quantity",
                  "nodeType": "VariableDeclaration",
                  "scope": 72,
                  "src": "906:16:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 59,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "906:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "905:18:8"
            },
            "returnParameters": {
              "id": 64,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "942:0:8"
            },
            "scope": 108,
            "src": "892:93:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1516
            ],
            "body": {
              "id": 86,
              "nodeType": "Block",
              "src": "1050:46:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 81,
                          "name": "tx",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -26,
                          "src": "1069:2:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_transaction",
                            "typeString": "tx"
                          }
                        },
                        "id": 82,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "origin",
                        "nodeType": "MemberAccess",
                        "src": "1069:9:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 83,
                        "name": "quantity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 74,
                        "src": "1080:8:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 80,
                      "name": "burnFrom",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1555,
                      "src": "1060:8:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 84,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1060:29:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 85,
                  "nodeType": "ExpressionStatement",
                  "src": "1060:29:8"
                }
              ]
            },
            "functionSelector": "42966c68",
            "id": 87,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 78,
                "modifierName": {
                  "id": 77,
                  "name": "onlyParent",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 107,
                  "src": "1039:10:8"
                },
                "nodeType": "ModifierInvocation",
                "src": "1039:10:8"
              }
            ],
            "name": "burn",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 76,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1030:8:8"
            },
            "parameters": {
              "id": 75,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 74,
                  "mutability": "mutable",
                  "name": "quantity",
                  "nodeType": "VariableDeclaration",
                  "scope": 87,
                  "src": "1005:16:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 73,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1005:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1004:18:8"
            },
            "returnParameters": {
              "id": 79,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1050:0:8"
            },
            "scope": 108,
            "src": "991:105:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1023
            ],
            "body": {
              "id": 95,
              "nodeType": "Block",
              "src": "1159:25:8",
              "statements": [
                {
                  "expression": {
                    "hexValue": "36",
                    "id": 93,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1176:1:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_6_by_1",
                      "typeString": "int_const 6"
                    },
                    "value": "6"
                  },
                  "functionReturnParameters": 92,
                  "id": 94,
                  "nodeType": "Return",
                  "src": "1169:8:8"
                }
              ]
            },
            "functionSelector": "313ce567",
            "id": 96,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "decimals",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 89,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1134:8:8"
            },
            "parameters": {
              "id": 88,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1119:2:8"
            },
            "returnParameters": {
              "id": 92,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 91,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 96,
                  "src": "1152:5:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 90,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "1152:5:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1151:7:8"
            },
            "scope": 108,
            "src": "1102:82:8",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 106,
              "nodeType": "Block",
              "src": "1210:64:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 102,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 99,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1228:3:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 100,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "1228:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 101,
                          "name": "parentAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 44,
                          "src": "1242:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1228:27:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 98,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1220:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 103,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1220:36:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 104,
                  "nodeType": "ExpressionStatement",
                  "src": "1220:36:8"
                },
                {
                  "id": 105,
                  "nodeType": "PlaceholderStatement",
                  "src": "1266:1:8"
                }
              ]
            },
            "id": 107,
            "name": "onlyParent",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 97,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1210:0:8"
            },
            "src": "1190:84:8",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 845,
        "src": "700:576:8"
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 109,
              "name": "ERC20",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1494,
              "src": "1299:5:8"
            },
            "id": 110,
            "nodeType": "InheritanceSpecifier",
            "src": "1299:5:8"
          },
          {
            "baseName": {
              "id": 111,
              "name": "ERC20Burnable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1556,
              "src": "1306:13:8"
            },
            "id": 112,
            "nodeType": "InheritanceSpecifier",
            "src": "1306:13:8"
          }
        ],
        "contractDependencies": [
          1494,
          1556,
          1935,
          2013,
          2038
        ],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 178,
        "linearizedBaseContracts": [
          178,
          1556,
          1494,
          2038,
          2013,
          1935
        ],
        "name": "BTCDOWN",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 114,
            "mutability": "mutable",
            "name": "parentAddress",
            "nodeType": "VariableDeclaration",
            "scope": 178,
            "src": "1326:21:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 113,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1326:7:8",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 127,
              "nodeType": "Block",
              "src": "1423:47:8",
              "statements": [
                {
                  "expression": {
                    "id": 125,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 123,
                      "name": "parentAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 114,
                      "src": "1433:13:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 124,
                      "name": "_parentAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 116,
                      "src": "1449:14:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "1433:30:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 126,
                  "nodeType": "ExpressionStatement",
                  "src": "1433:30:8"
                }
              ]
            },
            "id": 128,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "426974636f696e20446f776e",
                    "id": 119,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1396:14:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_165fe89d7acd7320260d3007f731660e2a452d2e9dbef2c2e44ee15c6b8bc1ec",
                      "typeString": "literal_string \"Bitcoin Down\""
                    },
                    "value": "Bitcoin Down"
                  },
                  {
                    "hexValue": "425443444f574e",
                    "id": 120,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1412:9:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_72f3d7098f717fcc170dbb6c7dad0b9049f1ed825e03177180edf7a0240d28f2",
                      "typeString": "literal_string \"BTCDOWN\""
                    },
                    "value": "BTCDOWN"
                  }
                ],
                "id": 121,
                "modifierName": {
                  "id": 118,
                  "name": "ERC20",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 1494,
                  "src": "1390:5:8"
                },
                "nodeType": "ModifierInvocation",
                "src": "1390:32:8"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 117,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 116,
                  "mutability": "mutable",
                  "name": "_parentAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 128,
                  "src": "1366:22:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 115,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1366:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1365:24:8"
            },
            "returnParameters": {
              "id": 122,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1423:0:8"
            },
            "scope": 178,
            "src": "1354:116:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 141,
              "nodeType": "Block",
              "src": "1526:43:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 136,
                          "name": "tx",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -26,
                          "src": "1542:2:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_transaction",
                            "typeString": "tx"
                          }
                        },
                        "id": 137,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "origin",
                        "nodeType": "MemberAccess",
                        "src": "1542:9:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 138,
                        "name": "quantity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 130,
                        "src": "1553:8:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 135,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1354,
                      "src": "1536:5:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 139,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1536:26:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 140,
                  "nodeType": "ExpressionStatement",
                  "src": "1536:26:8"
                }
              ]
            },
            "functionSelector": "a0712d68",
            "id": 142,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 133,
                "modifierName": {
                  "id": 132,
                  "name": "onlyParent",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 177,
                  "src": "1515:10:8"
                },
                "nodeType": "ModifierInvocation",
                "src": "1515:10:8"
              }
            ],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 131,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 130,
                  "mutability": "mutable",
                  "name": "quantity",
                  "nodeType": "VariableDeclaration",
                  "scope": 142,
                  "src": "1490:16:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 129,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1490:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1489:18:8"
            },
            "returnParameters": {
              "id": 134,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1526:0:8"
            },
            "scope": 178,
            "src": "1476:93:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1516
            ],
            "body": {
              "id": 156,
              "nodeType": "Block",
              "src": "1634:46:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 151,
                          "name": "tx",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -26,
                          "src": "1653:2:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_transaction",
                            "typeString": "tx"
                          }
                        },
                        "id": 152,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "origin",
                        "nodeType": "MemberAccess",
                        "src": "1653:9:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 153,
                        "name": "quantity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 144,
                        "src": "1664:8:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 150,
                      "name": "burnFrom",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1555,
                      "src": "1644:8:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 154,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1644:29:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 155,
                  "nodeType": "ExpressionStatement",
                  "src": "1644:29:8"
                }
              ]
            },
            "functionSelector": "42966c68",
            "id": 157,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 148,
                "modifierName": {
                  "id": 147,
                  "name": "onlyParent",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 177,
                  "src": "1623:10:8"
                },
                "nodeType": "ModifierInvocation",
                "src": "1623:10:8"
              }
            ],
            "name": "burn",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 146,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1614:8:8"
            },
            "parameters": {
              "id": 145,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 144,
                  "mutability": "mutable",
                  "name": "quantity",
                  "nodeType": "VariableDeclaration",
                  "scope": 157,
                  "src": "1589:16:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 143,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1589:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1588:18:8"
            },
            "returnParameters": {
              "id": 149,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1634:0:8"
            },
            "scope": 178,
            "src": "1575:105:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1023
            ],
            "body": {
              "id": 165,
              "nodeType": "Block",
              "src": "1743:25:8",
              "statements": [
                {
                  "expression": {
                    "hexValue": "36",
                    "id": 163,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1760:1:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_6_by_1",
                      "typeString": "int_const 6"
                    },
                    "value": "6"
                  },
                  "functionReturnParameters": 162,
                  "id": 164,
                  "nodeType": "Return",
                  "src": "1753:8:8"
                }
              ]
            },
            "functionSelector": "313ce567",
            "id": 166,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "decimals",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 159,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1718:8:8"
            },
            "parameters": {
              "id": 158,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1703:2:8"
            },
            "returnParameters": {
              "id": 162,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 161,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 166,
                  "src": "1736:5:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 160,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "1736:5:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1735:7:8"
            },
            "scope": 178,
            "src": "1686:82:8",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 176,
              "nodeType": "Block",
              "src": "1794:64:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 172,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 169,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1812:3:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 170,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "1812:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 171,
                          "name": "parentAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 114,
                          "src": "1826:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1812:27:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 168,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1804:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 173,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1804:36:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 174,
                  "nodeType": "ExpressionStatement",
                  "src": "1804:36:8"
                },
                {
                  "id": 175,
                  "nodeType": "PlaceholderStatement",
                  "src": "1850:1:8"
                }
              ]
            },
            "id": 177,
            "name": "onlyParent",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 167,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1794:0:8"
            },
            "src": "1774:84:8",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 845,
        "src": "1279:581:8"
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 179,
              "name": "Ownable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 948,
              "src": "1892:7:8"
            },
            "id": 180,
            "nodeType": "InheritanceSpecifier",
            "src": "1892:7:8"
          }
        ],
        "contractDependencies": [
          108,
          178,
          948,
          1935
        ],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 844,
        "linearizedBaseContracts": [
          844,
          948,
          1935
        ],
        "name": "LeveragedTrading",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 183,
            "libraryName": {
              "id": 181,
              "name": "SafeMath",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1868,
              "src": "1912:8:8"
            },
            "nodeType": "UsingForDirective",
            "src": "1906:27:8",
            "typeName": {
              "id": 182,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1925:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "constant": false,
            "functionSelector": "f0156e8a",
            "id": 188,
            "mutability": "mutable",
            "name": "priceBtcUp",
            "nodeType": "VariableDeclaration",
            "scope": 844,
            "src": "1939:35:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 184,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1939:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "commonType": {
                "typeIdentifier": "t_rational_1000000_by_1",
                "typeString": "int_const 1000000"
              },
              "id": 187,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "lValueRequested": false,
              "leftExpression": {
                "hexValue": "3130",
                "id": 185,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "1967:2:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_10_by_1",
                  "typeString": "int_const 10"
                },
                "value": "10"
              },
              "nodeType": "BinaryOperation",
              "operator": "**",
              "rightExpression": {
                "hexValue": "36",
                "id": 186,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "1973:1:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_6_by_1",
                  "typeString": "int_const 6"
                },
                "value": "6"
              },
              "src": "1967:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1000000_by_1",
                "typeString": "int_const 1000000"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "0c3e5343",
            "id": 193,
            "mutability": "mutable",
            "name": "priceBtcDown",
            "nodeType": "VariableDeclaration",
            "scope": 844,
            "src": "1980:37:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 189,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1980:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "commonType": {
                "typeIdentifier": "t_rational_1000000_by_1",
                "typeString": "int_const 1000000"
              },
              "id": 192,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "lValueRequested": false,
              "leftExpression": {
                "hexValue": "3130",
                "id": 190,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "2010:2:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_10_by_1",
                  "typeString": "int_const 10"
                },
                "value": "10"
              },
              "nodeType": "BinaryOperation",
              "operator": "**",
              "rightExpression": {
                "hexValue": "36",
                "id": 191,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "2016:1:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_6_by_1",
                  "typeString": "int_const 6"
                },
                "value": "6"
              },
              "src": "2010:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1000000_by_1",
                "typeString": "int_const 1000000"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "dde7be2c",
            "id": 196,
            "mutability": "mutable",
            "name": "collateralBtcUp",
            "nodeType": "VariableDeclaration",
            "scope": 844,
            "src": "2045:34:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 194,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "2045:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "30",
              "id": 195,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "2078:1:8",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_0_by_1",
                "typeString": "int_const 0"
              },
              "value": "0"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "14d7c6d2",
            "id": 199,
            "mutability": "mutable",
            "name": "collateralBtcDown",
            "nodeType": "VariableDeclaration",
            "scope": 844,
            "src": "2107:36:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 197,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "2107:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "30",
              "id": 198,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "2142:1:8",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_0_by_1",
                "typeString": "int_const 0"
              },
              "value": "0"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "0034b9cc",
            "id": 202,
            "mutability": "mutable",
            "name": "amountBtcUp",
            "nodeType": "VariableDeclaration",
            "scope": 844,
            "src": "2150:30:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 200,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "2150:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "30",
              "id": 201,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "2179:1:8",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_0_by_1",
                "typeString": "int_const 0"
              },
              "value": "0"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "b75cbe0b",
            "id": 205,
            "mutability": "mutable",
            "name": "amountBtcDown",
            "nodeType": "VariableDeclaration",
            "scope": 844,
            "src": "2210:32:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 203,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "2210:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "30",
              "id": 204,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "2241:1:8",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_0_by_1",
                "typeString": "int_const 0"
              },
              "value": "0"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "f4352c57",
            "id": 208,
            "mutability": "mutable",
            "name": "lastBtcPrice",
            "nodeType": "VariableDeclaration",
            "scope": 844,
            "src": "2271:31:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 206,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "2271:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "30",
              "id": 207,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "2301:1:8",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_0_by_1",
                "typeString": "int_const 0"
              },
              "value": "0"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "feae67b0",
            "id": 211,
            "mutability": "mutable",
            "name": "poolIsInitialized",
            "nodeType": "VariableDeclaration",
            "scope": 844,
            "src": "2352:37:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 209,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "2352:4:8",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": {
              "hexValue": "66616c7365",
              "id": 210,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "bool",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "2384:5:8",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              },
              "value": "false"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 214,
            "mutability": "mutable",
            "name": "addressUsdc",
            "nodeType": "VariableDeclaration",
            "scope": 844,
            "src": "2396:64:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 212,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "2396:7:8",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": {
              "hexValue": "307862376134463345393039374330386441303935313762356142383737463761393137323234656465",
              "id": 213,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "2418:42:8",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              },
              "value": "0xb7a4F3E9097C08dA09517b5aB877F7a917224ede"
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 217,
            "mutability": "mutable",
            "name": "addressBtcUSDFeed",
            "nodeType": "VariableDeclaration",
            "scope": 844,
            "src": "2526:71:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 215,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "2526:7:8",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": {
              "hexValue": "307836313335623133333235626643344230303237384234616243356532306262636532443635383065",
              "id": 216,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "2555:42:8",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              },
              "value": "0x6135b13325bfC4B00278B4abC5e20bbce2D6580e"
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 220,
            "mutability": "mutable",
            "name": "btcUp",
            "nodeType": "VariableDeclaration",
            "scope": 844,
            "src": "2672:11:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_BTCUP_$108",
              "typeString": "contract BTCUP"
            },
            "typeName": {
              "id": 219,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 218,
                "name": "BTCUP",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 108,
                "src": "2672:5:8"
              },
              "referencedDeclaration": 108,
              "src": "2672:5:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_BTCUP_$108",
                "typeString": "contract BTCUP"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 223,
            "mutability": "mutable",
            "name": "btcDown",
            "nodeType": "VariableDeclaration",
            "scope": 844,
            "src": "2689:15:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_BTCDOWN_$178",
              "typeString": "contract BTCDOWN"
            },
            "typeName": {
              "id": 222,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 221,
                "name": "BTCDOWN",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 178,
                "src": "2689:7:8"
              },
              "referencedDeclaration": 178,
              "src": "2689:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_BTCDOWN_$178",
                "typeString": "contract BTCDOWN"
              }
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 276,
              "nodeType": "Block",
              "src": "2772:284:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 232,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "2790:18:8",
                        "subExpression": {
                          "id": 231,
                          "name": "poolIsInitialized",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 211,
                          "src": "2791:17:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "54686520706f6f6c2077617320616c726561647920696e697469617465642e",
                        "id": 233,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2810:33:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_580e872a0bf3ae438081ad6284342a647742aae71fdfc53b8a10245734a22e81",
                          "typeString": "literal_string \"The pool was already initiated.\""
                        },
                        "value": "The pool was already initiated."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_580e872a0bf3ae438081ad6284342a647742aae71fdfc53b8a10245734a22e81",
                          "typeString": "literal_string \"The pool was already initiated.\""
                        }
                      ],
                      "id": 230,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2782:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 234,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2782:62:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 235,
                  "nodeType": "ExpressionStatement",
                  "src": "2782:62:8"
                },
                {
                  "expression": {
                    "id": 245,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 236,
                      "name": "btcUp",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 220,
                      "src": "2855:5:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_BTCUP_$108",
                        "typeString": "contract BTCUP"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "id": 242,
                              "name": "this",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -28,
                              "src": "2881:4:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_LeveragedTrading_$844",
                                "typeString": "contract LeveragedTrading"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_LeveragedTrading_$844",
                                "typeString": "contract LeveragedTrading"
                              }
                            ],
                            "id": 241,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2873:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 240,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "2873:7:8",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 243,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2873:13:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 239,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "2863:9:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_creation_nonpayable$_t_address_$returns$_t_contract$_BTCUP_$108_$",
                          "typeString": "function (address) returns (contract BTCUP)"
                        },
                        "typeName": {
                          "id": 238,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 237,
                            "name": "BTCUP",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 108,
                            "src": "2867:5:8"
                          },
                          "referencedDeclaration": 108,
                          "src": "2867:5:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_BTCUP_$108",
                            "typeString": "contract BTCUP"
                          }
                        }
                      },
                      "id": 244,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2863:24:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_BTCUP_$108",
                        "typeString": "contract BTCUP"
                      }
                    },
                    "src": "2855:32:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_BTCUP_$108",
                      "typeString": "contract BTCUP"
                    }
                  },
                  "id": 246,
                  "nodeType": "ExpressionStatement",
                  "src": "2855:32:8"
                },
                {
                  "expression": {
                    "id": 256,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 247,
                      "name": "btcDown",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 223,
                      "src": "2897:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_BTCDOWN_$178",
                        "typeString": "contract BTCDOWN"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "id": 253,
                              "name": "this",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -28,
                              "src": "2927:4:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_LeveragedTrading_$844",
                                "typeString": "contract LeveragedTrading"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_LeveragedTrading_$844",
                                "typeString": "contract LeveragedTrading"
                              }
                            ],
                            "id": 252,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2919:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 251,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "2919:7:8",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 254,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2919:13:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 250,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "2907:11:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_creation_nonpayable$_t_address_$returns$_t_contract$_BTCDOWN_$178_$",
                          "typeString": "function (address) returns (contract BTCDOWN)"
                        },
                        "typeName": {
                          "id": 249,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 248,
                            "name": "BTCDOWN",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 178,
                            "src": "2911:7:8"
                          },
                          "referencedDeclaration": 178,
                          "src": "2911:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_BTCDOWN_$178",
                            "typeString": "contract BTCDOWN"
                          }
                        }
                      },
                      "id": 255,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2907:26:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_BTCDOWN_$178",
                        "typeString": "contract BTCDOWN"
                      }
                    },
                    "src": "2897:36:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_BTCDOWN_$178",
                      "typeString": "contract BTCDOWN"
                    }
                  },
                  "id": 257,
                  "nodeType": "ExpressionStatement",
                  "src": "2897:36:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "32",
                            "id": 261,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2970:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_2_by_1",
                              "typeString": "int_const 2"
                            },
                            "value": "2"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_2_by_1",
                              "typeString": "int_const 2"
                            }
                          ],
                          "expression": {
                            "id": 259,
                            "name": "amountUsdc",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 225,
                            "src": "2955:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 260,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "div",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1777,
                          "src": "2955:14:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 262,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2955:17:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 258,
                      "name": "issueBtcUp",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 344,
                      "src": "2944:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 263,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2944:29:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 264,
                  "nodeType": "ExpressionStatement",
                  "src": "2944:29:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "32",
                            "id": 268,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3011:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_2_by_1",
                              "typeString": "int_const 2"
                            },
                            "value": "2"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_2_by_1",
                              "typeString": "int_const 2"
                            }
                          ],
                          "expression": {
                            "id": 266,
                            "name": "amountUsdc",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 225,
                            "src": "2996:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 267,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "div",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1777,
                          "src": "2996:14:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 269,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2996:17:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 265,
                      "name": "issueBtcDown",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 411,
                      "src": "2983:12:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 270,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2983:31:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 271,
                  "nodeType": "ExpressionStatement",
                  "src": "2983:31:8"
                },
                {
                  "expression": {
                    "id": 274,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 272,
                      "name": "poolIsInitialized",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 211,
                      "src": "3025:17:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 273,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3045:4:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "3025:24:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 275,
                  "nodeType": "ExpressionStatement",
                  "src": "3025:24:8"
                }
              ]
            },
            "functionSelector": "98881bc9",
            "id": 277,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 228,
                "modifierName": {
                  "id": 227,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 891,
                  "src": "2762:9:8"
                },
                "nodeType": "ModifierInvocation",
                "src": "2762:9:8"
              }
            ],
            "name": "initializePool",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 226,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 225,
                  "mutability": "mutable",
                  "name": "amountUsdc",
                  "nodeType": "VariableDeclaration",
                  "scope": 277,
                  "src": "2735:18:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 224,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2735:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2734:20:8"
            },
            "returnParameters": {
              "id": 229,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2772:0:8"
            },
            "scope": 844,
            "src": "2711:345:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 343,
              "nodeType": "Block",
              "src": "3109:486:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 282,
                      "name": "rebalanceLeveragedTokens",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 601,
                      "src": "3119:24:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 283,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3119:26:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 284,
                  "nodeType": "ExpressionStatement",
                  "src": "3119:26:8"
                },
                {
                  "expression": {
                    "id": 288,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 285,
                      "name": "priceBtcUp",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 188,
                      "src": "3164:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 286,
                        "name": "getBtcUpPrice",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 670,
                        "src": "3177:13:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                          "typeString": "function () view returns (uint256)"
                        }
                      },
                      "id": 287,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3177:15:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3164:28:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 289,
                  "nodeType": "ExpressionStatement",
                  "src": "3164:28:8"
                },
                {
                  "assignments": [
                    291
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 291,
                      "mutability": "mutable",
                      "name": "amountLeveragedTokens",
                      "nodeType": "VariableDeclaration",
                      "scope": 343,
                      "src": "3202:29:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 290,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3202:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 301,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 299,
                        "name": "priceBtcUp",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 188,
                        "src": "3262:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_rational_1000000_by_1",
                              "typeString": "int_const 1000000"
                            },
                            "id": 296,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "leftExpression": {
                              "hexValue": "3130",
                              "id": 294,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3249:2:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_10_by_1",
                                "typeString": "int_const 10"
                              },
                              "value": "10"
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "**",
                            "rightExpression": {
                              "hexValue": "36",
                              "id": 295,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3255:1:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_6_by_1",
                                "typeString": "int_const 6"
                              },
                              "value": "6"
                            },
                            "src": "3249:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1000000_by_1",
                              "typeString": "int_const 1000000"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_1000000_by_1",
                              "typeString": "int_const 1000000"
                            }
                          ],
                          "expression": {
                            "id": 292,
                            "name": "amountUsdc",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 279,
                            "src": "3234:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 293,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "mul",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1762,
                          "src": "3234:14:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 297,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3234:23:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 298,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "div",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1777,
                      "src": "3234:27:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                        "typeString": "function (uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 300,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3234:39:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3202:71:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 305,
                        "name": "amountLeveragedTokens",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 291,
                        "src": "3295:21:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 302,
                        "name": "btcUp",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 220,
                        "src": "3284:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_BTCUP_$108",
                          "typeString": "contract BTCUP"
                        }
                      },
                      "id": 304,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "mint",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 72,
                      "src": "3284:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256) external"
                      }
                    },
                    "id": 306,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3284:33:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 307,
                  "nodeType": "ExpressionStatement",
                  "src": "3284:33:8"
                },
                {
                  "expression": {
                    "id": 313,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 308,
                      "name": "amountBtcUp",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 202,
                      "src": "3327:11:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 311,
                          "name": "amountLeveragedTokens",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 291,
                          "src": "3357:21:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "id": 309,
                          "name": "amountBtcUp",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 202,
                          "src": "3341:11:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 310,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "add",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1732,
                        "src": "3341:15:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 312,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3341:38:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3327:52:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 314,
                  "nodeType": "ExpressionStatement",
                  "src": "3327:52:8"
                },
                {
                  "expression": {
                    "id": 320,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 315,
                      "name": "collateralBtcUp",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 196,
                      "src": "3389:15:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 318,
                          "name": "amountUsdc",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 279,
                          "src": "3427:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "id": 316,
                          "name": "collateralBtcUp",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 196,
                          "src": "3407:15:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 317,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "add",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1732,
                        "src": "3407:19:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 319,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3407:31:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3389:49:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 321,
                  "nodeType": "ExpressionStatement",
                  "src": "3389:49:8"
                },
                {
                  "assignments": [
                    324
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 324,
                      "mutability": "mutable",
                      "name": "usdc",
                      "nodeType": "VariableDeclaration",
                      "scope": 343,
                      "src": "3449:11:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$38",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "id": 323,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 322,
                          "name": "IERC20",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 38,
                          "src": "3449:6:8"
                        },
                        "referencedDeclaration": 38,
                        "src": "3449:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$38",
                          "typeString": "contract IERC20"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 328,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 326,
                        "name": "addressUsdc",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 214,
                        "src": "3470:11:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 325,
                      "name": "IERC20",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 38,
                      "src": "3463:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IERC20_$38_$",
                        "typeString": "type(contract IERC20)"
                      }
                    },
                    "id": 327,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3463:19:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$38",
                      "typeString": "contract IERC20"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3449:33:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 332,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "3518:3:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 333,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "3518:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "id": 336,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "3538:4:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_LeveragedTrading_$844",
                                  "typeString": "contract LeveragedTrading"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_LeveragedTrading_$844",
                                  "typeString": "contract LeveragedTrading"
                                }
                              ],
                              "id": 335,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "3530:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 334,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "3530:7:8",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 337,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3530:13:8",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 338,
                            "name": "amountUsdc",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 279,
                            "src": "3545:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 330,
                            "name": "usdc",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 324,
                            "src": "3500:4:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$38",
                              "typeString": "contract IERC20"
                            }
                          },
                          "id": 331,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "transferFrom",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 28,
                          "src": "3500:17:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,address,uint256) external returns (bool)"
                          }
                        },
                        "id": 339,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3500:56:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "596f7520646f6e2774206861766520656e6f75676820555344432e",
                        "id": 340,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3558:29:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_fa81e2605579e88471722381a01380eff7db3c869a8b4d6c5142c052f717215d",
                          "typeString": "literal_string \"You don't have enough USDC.\""
                        },
                        "value": "You don't have enough USDC."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_fa81e2605579e88471722381a01380eff7db3c869a8b4d6c5142c052f717215d",
                          "typeString": "literal_string \"You don't have enough USDC.\""
                        }
                      ],
                      "id": 329,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3492:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 341,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3492:96:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 342,
                  "nodeType": "ExpressionStatement",
                  "src": "3492:96:8"
                }
              ]
            },
            "functionSelector": "f530c04a",
            "id": 344,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "issueBtcUp",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 280,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 279,
                  "mutability": "mutable",
                  "name": "amountUsdc",
                  "nodeType": "VariableDeclaration",
                  "scope": 344,
                  "src": "3082:18:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 278,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3082:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3081:20:8"
            },
            "returnParameters": {
              "id": 281,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3109:0:8"
            },
            "scope": 844,
            "src": "3062:533:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 410,
              "nodeType": "Block",
              "src": "3650:502:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 349,
                      "name": "rebalanceLeveragedTokens",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 601,
                      "src": "3660:24:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 350,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3660:26:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 351,
                  "nodeType": "ExpressionStatement",
                  "src": "3660:26:8"
                },
                {
                  "expression": {
                    "id": 355,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 352,
                      "name": "priceBtcDown",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 193,
                      "src": "3705:12:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 353,
                        "name": "getBtcDownPrice",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 691,
                        "src": "3720:15:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                          "typeString": "function () view returns (uint256)"
                        }
                      },
                      "id": 354,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3720:17:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3705:32:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 356,
                  "nodeType": "ExpressionStatement",
                  "src": "3705:32:8"
                },
                {
                  "assignments": [
                    358
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 358,
                      "mutability": "mutable",
                      "name": "amountLeveragedTokens",
                      "nodeType": "VariableDeclaration",
                      "scope": 410,
                      "src": "3747:29:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 357,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3747:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 368,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 366,
                        "name": "priceBtcDown",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 193,
                        "src": "3807:12:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_rational_1000000_by_1",
                              "typeString": "int_const 1000000"
                            },
                            "id": 363,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "leftExpression": {
                              "hexValue": "3130",
                              "id": 361,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3794:2:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_10_by_1",
                                "typeString": "int_const 10"
                              },
                              "value": "10"
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "**",
                            "rightExpression": {
                              "hexValue": "36",
                              "id": 362,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3800:1:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_6_by_1",
                                "typeString": "int_const 6"
                              },
                              "value": "6"
                            },
                            "src": "3794:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1000000_by_1",
                              "typeString": "int_const 1000000"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_1000000_by_1",
                              "typeString": "int_const 1000000"
                            }
                          ],
                          "expression": {
                            "id": 359,
                            "name": "amountUsdc",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 346,
                            "src": "3779:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 360,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "mul",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1762,
                          "src": "3779:14:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 364,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3779:23:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 365,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "div",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1777,
                      "src": "3779:27:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                        "typeString": "function (uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 367,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3779:41:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3747:73:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 372,
                        "name": "amountLeveragedTokens",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 358,
                        "src": "3844:21:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 369,
                        "name": "btcDown",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 223,
                        "src": "3831:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_BTCDOWN_$178",
                          "typeString": "contract BTCDOWN"
                        }
                      },
                      "id": 371,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "mint",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 142,
                      "src": "3831:12:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256) external"
                      }
                    },
                    "id": 373,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3831:35:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 374,
                  "nodeType": "ExpressionStatement",
                  "src": "3831:35:8"
                },
                {
                  "expression": {
                    "id": 380,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 375,
                      "name": "amountBtcDown",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 205,
                      "src": "3876:13:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 378,
                          "name": "amountLeveragedTokens",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 358,
                          "src": "3910:21:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "id": 376,
                          "name": "amountBtcDown",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 205,
                          "src": "3892:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 377,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "add",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1732,
                        "src": "3892:17:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 379,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3892:40:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3876:56:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 381,
                  "nodeType": "ExpressionStatement",
                  "src": "3876:56:8"
                },
                {
                  "expression": {
                    "id": 387,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 382,
                      "name": "collateralBtcDown",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 199,
                      "src": "3942:17:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 385,
                          "name": "amountUsdc",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 346,
                          "src": "3984:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "id": 383,
                          "name": "collateralBtcDown",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 199,
                          "src": "3962:17:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 384,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "add",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1732,
                        "src": "3962:21:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 386,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3962:33:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3942:53:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 388,
                  "nodeType": "ExpressionStatement",
                  "src": "3942:53:8"
                },
                {
                  "assignments": [
                    391
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 391,
                      "mutability": "mutable",
                      "name": "usdc",
                      "nodeType": "VariableDeclaration",
                      "scope": 410,
                      "src": "4006:11:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$38",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "id": 390,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 389,
                          "name": "IERC20",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 38,
                          "src": "4006:6:8"
                        },
                        "referencedDeclaration": 38,
                        "src": "4006:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$38",
                          "typeString": "contract IERC20"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 395,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 393,
                        "name": "addressUsdc",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 214,
                        "src": "4027:11:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 392,
                      "name": "IERC20",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 38,
                      "src": "4020:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IERC20_$38_$",
                        "typeString": "type(contract IERC20)"
                      }
                    },
                    "id": 394,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4020:19:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$38",
                      "typeString": "contract IERC20"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4006:33:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 399,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "4075:3:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 400,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "4075:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "id": 403,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "4095:4:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_LeveragedTrading_$844",
                                  "typeString": "contract LeveragedTrading"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_LeveragedTrading_$844",
                                  "typeString": "contract LeveragedTrading"
                                }
                              ],
                              "id": 402,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "4087:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 401,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "4087:7:8",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 404,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4087:13:8",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 405,
                            "name": "amountUsdc",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 346,
                            "src": "4102:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 397,
                            "name": "usdc",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 391,
                            "src": "4057:4:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$38",
                              "typeString": "contract IERC20"
                            }
                          },
                          "id": 398,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "transferFrom",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 28,
                          "src": "4057:17:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,address,uint256) external returns (bool)"
                          }
                        },
                        "id": 406,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4057:56:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "596f7520646f6e2774206861766520656e6f75676820555344432e",
                        "id": 407,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4115:29:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_fa81e2605579e88471722381a01380eff7db3c869a8b4d6c5142c052f717215d",
                          "typeString": "literal_string \"You don't have enough USDC.\""
                        },
                        "value": "You don't have enough USDC."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_fa81e2605579e88471722381a01380eff7db3c869a8b4d6c5142c052f717215d",
                          "typeString": "literal_string \"You don't have enough USDC.\""
                        }
                      ],
                      "id": 396,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4049:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 408,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4049:96:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 409,
                  "nodeType": "ExpressionStatement",
                  "src": "4049:96:8"
                }
              ]
            },
            "functionSelector": "c46d4f09",
            "id": 411,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "issueBtcDown",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 347,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 346,
                  "mutability": "mutable",
                  "name": "amountUsdc",
                  "nodeType": "VariableDeclaration",
                  "scope": 411,
                  "src": "3623:18:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 345,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3623:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3622:20:8"
            },
            "returnParameters": {
              "id": 348,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3650:0:8"
            },
            "scope": 844,
            "src": "3601:551:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 472,
              "nodeType": "Block",
              "src": "4217:427:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 416,
                      "name": "rebalanceLeveragedTokens",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 601,
                      "src": "4227:24:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 417,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4227:26:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 418,
                  "nodeType": "ExpressionStatement",
                  "src": "4227:26:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 422,
                        "name": "amountLeveragedTokens",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 413,
                        "src": "4274:21:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 419,
                        "name": "btcUp",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 220,
                        "src": "4263:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_BTCUP_$108",
                          "typeString": "contract BTCUP"
                        }
                      },
                      "id": 421,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "burn",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 87,
                      "src": "4263:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256) external"
                      }
                    },
                    "id": 423,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4263:33:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 424,
                  "nodeType": "ExpressionStatement",
                  "src": "4263:33:8"
                },
                {
                  "expression": {
                    "id": 428,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 425,
                      "name": "priceBtcUp",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 188,
                      "src": "4307:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 426,
                        "name": "getBtcUpPrice",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 670,
                        "src": "4320:13:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                          "typeString": "function () view returns (uint256)"
                        }
                      },
                      "id": 427,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4320:15:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4307:28:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 429,
                  "nodeType": "ExpressionStatement",
                  "src": "4307:28:8"
                },
                {
                  "assignments": [
                    431
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 431,
                      "mutability": "mutable",
                      "name": "amountUsdc",
                      "nodeType": "VariableDeclaration",
                      "scope": 472,
                      "src": "4345:18:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 430,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4345:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 441,
                  "initialValue": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_rational_1000000_by_1",
                          "typeString": "int_const 1000000"
                        },
                        "id": 439,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "leftExpression": {
                          "hexValue": "3130",
                          "id": 437,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4408:2:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_10_by_1",
                            "typeString": "int_const 10"
                          },
                          "value": "10"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "**",
                        "rightExpression": {
                          "hexValue": "36",
                          "id": 438,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4414:1:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_6_by_1",
                            "typeString": "int_const 6"
                          },
                          "value": "6"
                        },
                        "src": "4408:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1000000_by_1",
                          "typeString": "int_const 1000000"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_rational_1000000_by_1",
                          "typeString": "int_const 1000000"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "id": 434,
                            "name": "priceBtcUp",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 188,
                            "src": "4392:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 432,
                            "name": "amountLeveragedTokens",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 413,
                            "src": "4366:21:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 433,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "mul",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1762,
                          "src": "4366:25:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 435,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4366:37:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 436,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "div",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1777,
                      "src": "4366:41:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                        "typeString": "function (uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 440,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4366:50:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4345:71:8"
                },
                {
                  "expression": {
                    "id": 447,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 442,
                      "name": "amountBtcUp",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 202,
                      "src": "4427:11:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 445,
                          "name": "amountLeveragedTokens",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 413,
                          "src": "4457:21:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "id": 443,
                          "name": "amountBtcUp",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 202,
                          "src": "4441:11:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 444,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sub",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1747,
                        "src": "4441:15:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 446,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4441:38:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4427:52:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 448,
                  "nodeType": "ExpressionStatement",
                  "src": "4427:52:8"
                },
                {
                  "expression": {
                    "id": 454,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 449,
                      "name": "collateralBtcUp",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 196,
                      "src": "4489:15:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 452,
                          "name": "amountUsdc",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 431,
                          "src": "4527:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "id": 450,
                          "name": "collateralBtcUp",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 196,
                          "src": "4507:15:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 451,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sub",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1747,
                        "src": "4507:19:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 453,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4507:31:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4489:49:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 455,
                  "nodeType": "ExpressionStatement",
                  "src": "4489:49:8"
                },
                {
                  "assignments": [
                    458
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 458,
                      "mutability": "mutable",
                      "name": "usdc",
                      "nodeType": "VariableDeclaration",
                      "scope": 472,
                      "src": "4549:11:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$38",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "id": 457,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 456,
                          "name": "IERC20",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 38,
                          "src": "4549:6:8"
                        },
                        "referencedDeclaration": 38,
                        "src": "4549:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$38",
                          "typeString": "contract IERC20"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 462,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 460,
                        "name": "addressUsdc",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 214,
                        "src": "4570:11:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 459,
                      "name": "IERC20",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 38,
                      "src": "4563:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IERC20_$38_$",
                        "typeString": "type(contract IERC20)"
                      }
                    },
                    "id": 461,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4563:19:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$38",
                      "typeString": "contract IERC20"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4549:33:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 466,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "4613:3:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 467,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "4613:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 468,
                            "name": "amountUsdc",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 431,
                            "src": "4625:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 464,
                            "name": "usdc",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 458,
                            "src": "4599:4:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$38",
                              "typeString": "contract IERC20"
                            }
                          },
                          "id": 465,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "transfer",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 17,
                          "src": "4599:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) external returns (bool)"
                          }
                        },
                        "id": 469,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4599:37:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 463,
                      "name": "assert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -3,
                      "src": "4592:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 470,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4592:45:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 471,
                  "nodeType": "ExpressionStatement",
                  "src": "4592:45:8"
                }
              ]
            },
            "functionSelector": "d1ee539d",
            "id": 473,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "redeemBtcUp",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 414,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 413,
                  "mutability": "mutable",
                  "name": "amountLeveragedTokens",
                  "nodeType": "VariableDeclaration",
                  "scope": 473,
                  "src": "4179:29:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 412,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4179:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4178:31:8"
            },
            "returnParameters": {
              "id": 415,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4217:0:8"
            },
            "scope": 844,
            "src": "4158:486:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 534,
              "nodeType": "Block",
              "src": "4711:452:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 478,
                      "name": "rebalanceLeveragedTokens",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 601,
                      "src": "4721:24:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 479,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4721:26:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 480,
                  "nodeType": "ExpressionStatement",
                  "src": "4721:26:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 484,
                        "name": "amountLeveragedTokens",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 475,
                        "src": "4770:21:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 481,
                        "name": "btcDown",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 223,
                        "src": "4757:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_BTCDOWN_$178",
                          "typeString": "contract BTCDOWN"
                        }
                      },
                      "id": 483,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "burn",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 157,
                      "src": "4757:12:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256) external"
                      }
                    },
                    "id": 485,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4757:35:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 486,
                  "nodeType": "ExpressionStatement",
                  "src": "4757:35:8"
                },
                {
                  "expression": {
                    "id": 490,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 487,
                      "name": "priceBtcDown",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 193,
                      "src": "4803:12:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 488,
                        "name": "getBtcDownPrice",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 691,
                        "src": "4818:15:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                          "typeString": "function () view returns (uint256)"
                        }
                      },
                      "id": 489,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4818:17:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4803:32:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 491,
                  "nodeType": "ExpressionStatement",
                  "src": "4803:32:8"
                },
                {
                  "assignments": [
                    493
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 493,
                      "mutability": "mutable",
                      "name": "amountUsdc",
                      "nodeType": "VariableDeclaration",
                      "scope": 534,
                      "src": "4845:18:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 492,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4845:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 503,
                  "initialValue": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_rational_1000000_by_1",
                          "typeString": "int_const 1000000"
                        },
                        "id": 501,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "leftExpression": {
                          "hexValue": "3130",
                          "id": 499,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4910:2:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_10_by_1",
                            "typeString": "int_const 10"
                          },
                          "value": "10"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "**",
                        "rightExpression": {
                          "hexValue": "36",
                          "id": 500,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4916:1:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_6_by_1",
                            "typeString": "int_const 6"
                          },
                          "value": "6"
                        },
                        "src": "4910:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1000000_by_1",
                          "typeString": "int_const 1000000"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_rational_1000000_by_1",
                          "typeString": "int_const 1000000"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "id": 496,
                            "name": "priceBtcDown",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 193,
                            "src": "4892:12:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 494,
                            "name": "amountLeveragedTokens",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 475,
                            "src": "4866:21:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 495,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "mul",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1762,
                          "src": "4866:25:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 497,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4866:39:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 498,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "div",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1777,
                      "src": "4866:43:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                        "typeString": "function (uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 502,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4866:52:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4845:73:8"
                },
                {
                  "expression": {
                    "id": 509,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 504,
                      "name": "amountBtcDown",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 205,
                      "src": "4937:13:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 507,
                          "name": "amountLeveragedTokens",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 475,
                          "src": "4971:21:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "id": 505,
                          "name": "amountBtcDown",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 205,
                          "src": "4953:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 506,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sub",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1747,
                        "src": "4953:17:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 508,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4953:40:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4937:56:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 510,
                  "nodeType": "ExpressionStatement",
                  "src": "4937:56:8"
                },
                {
                  "expression": {
                    "id": 516,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 511,
                      "name": "collateralBtcDown",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 199,
                      "src": "5003:17:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 514,
                          "name": "amountUsdc",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 493,
                          "src": "5045:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "id": 512,
                          "name": "collateralBtcDown",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 199,
                          "src": "5023:17:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 513,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sub",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1747,
                        "src": "5023:21:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 515,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5023:33:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5003:53:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 517,
                  "nodeType": "ExpressionStatement",
                  "src": "5003:53:8"
                },
                {
                  "assignments": [
                    520
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 520,
                      "mutability": "mutable",
                      "name": "usdc",
                      "nodeType": "VariableDeclaration",
                      "scope": 534,
                      "src": "5067:11:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$38",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "id": 519,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 518,
                          "name": "IERC20",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 38,
                          "src": "5067:6:8"
                        },
                        "referencedDeclaration": 38,
                        "src": "5067:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$38",
                          "typeString": "contract IERC20"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 524,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 522,
                        "name": "addressUsdc",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 214,
                        "src": "5088:11:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 521,
                      "name": "IERC20",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 38,
                      "src": "5081:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IERC20_$38_$",
                        "typeString": "type(contract IERC20)"
                      }
                    },
                    "id": 523,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5081:19:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$38",
                      "typeString": "contract IERC20"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5067:33:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 528,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "5131:3:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 529,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "5131:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 530,
                            "name": "amountUsdc",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 493,
                            "src": "5144:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 526,
                            "name": "usdc",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 520,
                            "src": "5117:4:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$38",
                              "typeString": "contract IERC20"
                            }
                          },
                          "id": 527,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "transfer",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 17,
                          "src": "5117:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) external returns (bool)"
                          }
                        },
                        "id": 531,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5117:38:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 525,
                      "name": "assert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -3,
                      "src": "5110:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 532,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5110:46:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 533,
                  "nodeType": "ExpressionStatement",
                  "src": "5110:46:8"
                }
              ]
            },
            "functionSelector": "a14274e8",
            "id": 535,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "redeemBtcDown",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 476,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 475,
                  "mutability": "mutable",
                  "name": "amountLeveragedTokens",
                  "nodeType": "VariableDeclaration",
                  "scope": 535,
                  "src": "4673:29:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 474,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4673:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4672:31:8"
            },
            "returnParameters": {
              "id": 477,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4711:0:8"
            },
            "scope": 844,
            "src": "4650:513:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 600,
              "nodeType": "Block",
              "src": "5212:610:8",
              "statements": [
                {
                  "assignments": [
                    539
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 539,
                      "mutability": "mutable",
                      "name": "btcPrice",
                      "nodeType": "VariableDeclaration",
                      "scope": 600,
                      "src": "5222:16:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 538,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5222:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 542,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 540,
                      "name": "getBtcPrice",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 715,
                      "src": "5241:11:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                        "typeString": "function () view returns (uint256)"
                      }
                    },
                    "id": 541,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5241:13:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5222:32:8"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 551,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 545,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 543,
                            "name": "collateralBtcUp",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 196,
                            "src": "5269:15:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 544,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5287:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "5269:19:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        }
                      ],
                      "id": 546,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "5268:21:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "&&",
                    "rightExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 549,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 547,
                            "name": "collateralBtcDown",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 199,
                            "src": "5294:17:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 548,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5314:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "5294:21:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        }
                      ],
                      "id": 550,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "5293:23:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "5268:48:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 595,
                  "nodeType": "IfStatement",
                  "src": "5264:519:8",
                  "trueBody": {
                    "id": 594,
                    "nodeType": "Block",
                    "src": "5318:465:8",
                    "statements": [
                      {
                        "assignments": [
                          553
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 553,
                            "mutability": "mutable",
                            "name": "rebalanceAmount",
                            "nodeType": "VariableDeclaration",
                            "scope": 594,
                            "src": "5332:23:8",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 552,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "5332:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 557,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 555,
                              "name": "btcPrice",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 539,
                              "src": "5377:8:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 554,
                            "name": "getRebalanceAmount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 649,
                            "src": "5358:18:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (uint256) view returns (uint256)"
                            }
                          },
                          "id": 556,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5358:28:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5332:54:8"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          },
                          "id": 562,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "arguments": [
                              {
                                "id": 559,
                                "name": "btcPrice",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 539,
                                "src": "5412:8:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 558,
                              "name": "getSign",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 620,
                              "src": "5404:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_int256_$",
                                "typeString": "function (uint256) view returns (int256)"
                              }
                            },
                            "id": 560,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5404:17:8",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_int256",
                              "typeString": "int256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 561,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5424:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "5404:21:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 592,
                          "nodeType": "Block",
                          "src": "5609:163:8",
                          "statements": [
                            {
                              "expression": {
                                "id": 583,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 578,
                                  "name": "collateralBtcUp",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 196,
                                  "src": "5627:15:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "id": 581,
                                      "name": "rebalanceAmount",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 553,
                                      "src": "5665:15:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "expression": {
                                      "id": 579,
                                      "name": "collateralBtcUp",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 196,
                                      "src": "5645:15:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 580,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "sub",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1747,
                                    "src": "5645:19:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 582,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "5645:36:8",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "5627:54:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 584,
                              "nodeType": "ExpressionStatement",
                              "src": "5627:54:8"
                            },
                            {
                              "expression": {
                                "id": 590,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 585,
                                  "name": "collateralBtcDown",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 199,
                                  "src": "5699:17:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "id": 588,
                                      "name": "rebalanceAmount",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 553,
                                      "src": "5741:15:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "expression": {
                                      "id": 586,
                                      "name": "collateralBtcDown",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 199,
                                      "src": "5719:17:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 587,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "add",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1732,
                                    "src": "5719:21:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 589,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "5719:38:8",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "5699:58:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 591,
                              "nodeType": "ExpressionStatement",
                              "src": "5699:58:8"
                            }
                          ]
                        },
                        "id": 593,
                        "nodeType": "IfStatement",
                        "src": "5400:372:8",
                        "trueBody": {
                          "id": 577,
                          "nodeType": "Block",
                          "src": "5427:163:8",
                          "statements": [
                            {
                              "expression": {
                                "id": 568,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 563,
                                  "name": "collateralBtcUp",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 196,
                                  "src": "5445:15:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "id": 566,
                                      "name": "rebalanceAmount",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 553,
                                      "src": "5483:15:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "expression": {
                                      "id": 564,
                                      "name": "collateralBtcUp",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 196,
                                      "src": "5463:15:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 565,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "add",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1732,
                                    "src": "5463:19:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 567,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "5463:36:8",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "5445:54:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 569,
                              "nodeType": "ExpressionStatement",
                              "src": "5445:54:8"
                            },
                            {
                              "expression": {
                                "id": 575,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 570,
                                  "name": "collateralBtcDown",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 199,
                                  "src": "5517:17:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "id": 573,
                                      "name": "rebalanceAmount",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 553,
                                      "src": "5559:15:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "expression": {
                                      "id": 571,
                                      "name": "collateralBtcDown",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 199,
                                      "src": "5537:17:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 572,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "sub",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1747,
                                    "src": "5537:21:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 574,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "5537:38:8",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "5517:58:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 576,
                              "nodeType": "ExpressionStatement",
                              "src": "5517:58:8"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "id": 598,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 596,
                      "name": "lastBtcPrice",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 208,
                      "src": "5792:12:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 597,
                      "name": "btcPrice",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 539,
                      "src": "5807:8:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5792:23:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 599,
                  "nodeType": "ExpressionStatement",
                  "src": "5792:23:8"
                }
              ]
            },
            "functionSelector": "6e5d6615",
            "id": 601,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "rebalanceLeveragedTokens",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 536,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5202:2:8"
            },
            "returnParameters": {
              "id": 537,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5212:0:8"
            },
            "scope": 844,
            "src": "5169:653:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 619,
              "nodeType": "Block",
              "src": "6065:126:8",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 610,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 608,
                      "name": "btcPrice",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 603,
                      "src": "6079:8:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "id": 609,
                      "name": "lastBtcPrice",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 208,
                      "src": "6090:12:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "6079:23:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 617,
                    "nodeType": "Block",
                    "src": "6151:34:8",
                    "statements": [
                      {
                        "expression": {
                          "id": 615,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "-",
                          "prefix": true,
                          "src": "6172:2:8",
                          "subExpression": {
                            "hexValue": "31",
                            "id": 614,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "6173:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_minus_1_by_1",
                            "typeString": "int_const -1"
                          }
                        },
                        "functionReturnParameters": 607,
                        "id": 616,
                        "nodeType": "Return",
                        "src": "6165:9:8"
                      }
                    ]
                  },
                  "id": 618,
                  "nodeType": "IfStatement",
                  "src": "6075:110:8",
                  "trueBody": {
                    "id": 613,
                    "nodeType": "Block",
                    "src": "6104:33:8",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "31",
                          "id": 611,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6125:1:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          },
                          "value": "1"
                        },
                        "functionReturnParameters": 607,
                        "id": 612,
                        "nodeType": "Return",
                        "src": "6118:8:8"
                      }
                    ]
                  }
                }
              ]
            },
            "id": 620,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getSign",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 604,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 603,
                  "mutability": "mutable",
                  "name": "btcPrice",
                  "nodeType": "VariableDeclaration",
                  "scope": 620,
                  "src": "6016:16:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 602,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6016:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6015:18:8"
            },
            "returnParameters": {
              "id": 607,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 606,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 620,
                  "src": "6057:6:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  },
                  "typeName": {
                    "id": 605,
                    "name": "int256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6057:6:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6056:8:8"
            },
            "scope": 844,
            "src": "5999:192:8",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 648,
              "nodeType": "Block",
              "src": "6276:147:8",
              "statements": [
                {
                  "assignments": [
                    628
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 628,
                      "mutability": "mutable",
                      "name": "priceDiff",
                      "nodeType": "VariableDeclaration",
                      "scope": 648,
                      "src": "6286:17:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 627,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6286:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 632,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 630,
                        "name": "priceBtc",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 622,
                        "src": "6319:8:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 629,
                      "name": "getPriceDiff",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 819,
                      "src": "6306:12:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256) view returns (uint256)"
                      }
                    },
                    "id": 631,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6306:22:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6286:42:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_rational_1000000_by_1",
                          "typeString": "int_const 1000000"
                        },
                        "id": 645,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "leftExpression": {
                          "hexValue": "3130",
                          "id": 643,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6408:2:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_10_by_1",
                            "typeString": "int_const 10"
                          },
                          "value": "10"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "**",
                        "rightExpression": {
                          "hexValue": "36",
                          "id": 644,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6414:1:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_6_by_1",
                            "typeString": "int_const 6"
                          },
                          "value": "6"
                        },
                        "src": "6408:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1000000_by_1",
                          "typeString": "int_const 1000000"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_rational_1000000_by_1",
                          "typeString": "int_const 1000000"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "id": 639,
                                "name": "priceDiff",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 628,
                                "src": "6392:9:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 638,
                              "name": "L",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 775,
                              "src": "6390:1:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (uint256) pure returns (uint256)"
                              }
                            },
                            "id": 640,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6390:12:8",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "id": 634,
                                "name": "collateralBtcUp",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 196,
                                "src": "6350:15:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 635,
                                "name": "collateralBtcDown",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 199,
                                "src": "6367:17:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 633,
                              "name": "min",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 732,
                              "src": "6346:3:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 636,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6346:39:8",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 637,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "mul",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1762,
                          "src": "6346:43:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 641,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6346:57:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 642,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "div",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1777,
                      "src": "6346:61:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                        "typeString": "function (uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 646,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6346:70:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 626,
                  "id": 647,
                  "nodeType": "Return",
                  "src": "6339:77:8"
                }
              ]
            },
            "id": 649,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getRebalanceAmount",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 623,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 622,
                  "mutability": "mutable",
                  "name": "priceBtc",
                  "nodeType": "VariableDeclaration",
                  "scope": 649,
                  "src": "6226:16:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 621,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6226:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6225:18:8"
            },
            "returnParameters": {
              "id": 626,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 625,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 649,
                  "src": "6267:7:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 624,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6267:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6266:9:8"
            },
            "scope": 844,
            "src": "6198:225:8",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 669,
              "nodeType": "Block",
              "src": "6514:102:8",
              "statements": [
                {
                  "expression": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 656,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 654,
                        "name": "amountBtcUp",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 202,
                        "src": "6531:11:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "hexValue": "30",
                        "id": 655,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6546:1:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "src": "6531:16:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseExpression": {
                      "arguments": [
                        {
                          "id": 665,
                          "name": "amountBtcUp",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 202,
                          "src": "6597:11:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_rational_1000000_by_1",
                                "typeString": "int_const 1000000"
                              },
                              "id": 662,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "leftExpression": {
                                "hexValue": "3130",
                                "id": 660,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "6584:2:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_10_by_1",
                                  "typeString": "int_const 10"
                                },
                                "value": "10"
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "**",
                              "rightExpression": {
                                "hexValue": "36",
                                "id": 661,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "6590:1:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_6_by_1",
                                  "typeString": "int_const 6"
                                },
                                "value": "6"
                              },
                              "src": "6584:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1000000_by_1",
                                "typeString": "int_const 1000000"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_1000000_by_1",
                                "typeString": "int_const 1000000"
                              }
                            ],
                            "expression": {
                              "id": 658,
                              "name": "collateralBtcUp",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 196,
                              "src": "6564:15:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 659,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "mul",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1762,
                            "src": "6564:19:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 663,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6564:28:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 664,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "div",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1777,
                        "src": "6564:32:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 666,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "6564:45:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 667,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "Conditional",
                    "src": "6531:78:8",
                    "trueExpression": {
                      "id": 657,
                      "name": "priceBtcUp",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 188,
                      "src": "6551:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 653,
                  "id": 668,
                  "nodeType": "Return",
                  "src": "6524:85:8"
                }
              ]
            },
            "functionSelector": "f06847d6",
            "id": 670,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getBtcUpPrice",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 650,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6481:2:8"
            },
            "returnParameters": {
              "id": 653,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 652,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 670,
                  "src": "6505:7:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 651,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6505:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6504:9:8"
            },
            "scope": 844,
            "src": "6459:157:8",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 690,
              "nodeType": "Block",
              "src": "6711:122:8",
              "statements": [
                {
                  "expression": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 677,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 675,
                        "name": "amountBtcDown",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 205,
                        "src": "6740:13:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "hexValue": "30",
                        "id": 676,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6757:1:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "src": "6740:18:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseExpression": {
                      "arguments": [
                        {
                          "id": 686,
                          "name": "amountBtcDown",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 205,
                          "src": "6812:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_rational_1000000_by_1",
                                "typeString": "int_const 1000000"
                              },
                              "id": 683,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "leftExpression": {
                                "hexValue": "3130",
                                "id": 681,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "6799:2:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_10_by_1",
                                  "typeString": "int_const 10"
                                },
                                "value": "10"
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "**",
                              "rightExpression": {
                                "hexValue": "36",
                                "id": 682,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "6805:1:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_6_by_1",
                                  "typeString": "int_const 6"
                                },
                                "value": "6"
                              },
                              "src": "6799:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1000000_by_1",
                                "typeString": "int_const 1000000"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_1000000_by_1",
                                "typeString": "int_const 1000000"
                              }
                            ],
                            "expression": {
                              "id": 679,
                              "name": "collateralBtcDown",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 199,
                              "src": "6777:17:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 680,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "mul",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1762,
                            "src": "6777:21:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 684,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6777:30:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 685,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "div",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1777,
                        "src": "6777:34:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 687,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "6777:49:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 688,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "Conditional",
                    "src": "6740:86:8",
                    "trueExpression": {
                      "id": 678,
                      "name": "priceBtcDown",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 193,
                      "src": "6762:12:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 674,
                  "id": 689,
                  "nodeType": "Return",
                  "src": "6733:93:8"
                }
              ]
            },
            "functionSelector": "81c2b29b",
            "id": 691,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getBtcDownPrice",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 671,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6678:2:8"
            },
            "returnParameters": {
              "id": 674,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 673,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 691,
                  "src": "6702:7:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 672,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6702:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6701:9:8"
            },
            "scope": 844,
            "src": "6654:179:8",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 714,
              "nodeType": "Block",
              "src": "6938:264:8",
              "statements": [
                {
                  "assignments": [
                    698
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 698,
                      "mutability": "mutable",
                      "name": "priceFeed",
                      "nodeType": "VariableDeclaration",
                      "scope": 714,
                      "src": "6948:31:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_AggregatorV3Interface_$1914",
                        "typeString": "contract AggregatorV3Interface"
                      },
                      "typeName": {
                        "id": 697,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 696,
                          "name": "AggregatorV3Interface",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 1914,
                          "src": "6948:21:8"
                        },
                        "referencedDeclaration": 1914,
                        "src": "6948:21:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_AggregatorV3Interface_$1914",
                          "typeString": "contract AggregatorV3Interface"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 702,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 700,
                        "name": "addressBtcUSDFeed",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 217,
                        "src": "7004:17:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 699,
                      "name": "AggregatorV3Interface",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1914,
                      "src": "6982:21:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_AggregatorV3Interface_$1914_$",
                        "typeString": "type(contract AggregatorV3Interface)"
                      }
                    },
                    "id": 701,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6982:40:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_AggregatorV3Interface_$1914",
                      "typeString": "contract AggregatorV3Interface"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6948:74:8"
                },
                {
                  "assignments": [
                    null,
                    704,
                    null,
                    null,
                    null
                  ],
                  "declarations": [
                    null,
                    {
                      "constant": false,
                      "id": 704,
                      "mutability": "mutable",
                      "name": "answer",
                      "nodeType": "VariableDeclaration",
                      "scope": 714,
                      "src": "7034:13:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_int256",
                        "typeString": "int256"
                      },
                      "typeName": {
                        "id": 703,
                        "name": "int256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7034:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        }
                      },
                      "visibility": "internal"
                    },
                    null,
                    null,
                    null
                  ],
                  "id": 708,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 705,
                        "name": "priceFeed",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 698,
                        "src": "7054:9:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_AggregatorV3Interface_$1914",
                          "typeString": "contract AggregatorV3Interface"
                        }
                      },
                      "id": 706,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "latestRoundData",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1913,
                      "src": "7054:25:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$__$returns$_t_uint80_$_t_int256_$_t_uint256_$_t_uint256_$_t_uint80_$",
                        "typeString": "function () view external returns (uint80,int256,uint256,uint256,uint80)"
                      }
                    },
                    "id": 707,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7054:27:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_uint80_$_t_int256_$_t_uint256_$_t_uint256_$_t_uint80_$",
                      "typeString": "tuple(uint80,int256,uint256,uint256,uint80)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7032:49:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 711,
                        "name": "answer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 704,
                        "src": "7108:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        }
                      ],
                      "id": 710,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "7100:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_uint256_$",
                        "typeString": "type(uint256)"
                      },
                      "typeName": {
                        "id": 709,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7100:7:8",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 712,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7100:15:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 695,
                  "id": 713,
                  "nodeType": "Return",
                  "src": "7093:22:8"
                }
              ]
            },
            "functionSelector": "3a3610bc",
            "id": 715,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getBtcPrice",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 692,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6905:2:8"
            },
            "returnParameters": {
              "id": 695,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 694,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 715,
                  "src": "6929:7:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 693,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6929:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6928:9:8"
            },
            "scope": 844,
            "src": "6885:317:8",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 731,
              "nodeType": "Block",
              "src": "7279:38:8",
              "statements": [
                {
                  "expression": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 726,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 724,
                        "name": "a",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 717,
                        "src": "7296:1:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "<=",
                      "rightExpression": {
                        "id": 725,
                        "name": "b",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 719,
                        "src": "7301:1:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "7296:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseExpression": {
                      "id": 728,
                      "name": "b",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 719,
                      "src": "7309:1:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 729,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "Conditional",
                    "src": "7296:14:8",
                    "trueExpression": {
                      "id": 727,
                      "name": "a",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 717,
                      "src": "7305:1:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 723,
                  "id": 730,
                  "nodeType": "Return",
                  "src": "7289:21:8"
                }
              ]
            },
            "id": 732,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "min",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 720,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 717,
                  "mutability": "mutable",
                  "name": "a",
                  "nodeType": "VariableDeclaration",
                  "scope": 732,
                  "src": "7225:9:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 716,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7225:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 719,
                  "mutability": "mutable",
                  "name": "b",
                  "nodeType": "VariableDeclaration",
                  "scope": 732,
                  "src": "7236:9:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 718,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7236:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7224:22:8"
            },
            "returnParameters": {
              "id": 723,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 722,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 732,
                  "src": "7270:7:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 721,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7270:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7269:9:8"
            },
            "scope": 844,
            "src": "7212:105:8",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 774,
              "nodeType": "Block",
              "src": "7377:171:8",
              "statements": [
                {
                  "assignments": [
                    740
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 740,
                      "mutability": "mutable",
                      "name": "denom",
                      "nodeType": "VariableDeclaration",
                      "scope": 774,
                      "src": "7413:13:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 739,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7413:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 759,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 758,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 754,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 750,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "hexValue": "39",
                          "id": 741,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "7429:1:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_9_by_1",
                            "typeString": "int_const 9"
                          },
                          "value": "9"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "*",
                        "rightExpression": {
                          "components": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 748,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 744,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 742,
                                  "name": "x",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 734,
                                  "src": "7434:1:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "**",
                                "rightExpression": {
                                  "hexValue": "32",
                                  "id": 743,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "7439:1:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_2_by_1",
                                    "typeString": "int_const 2"
                                  },
                                  "value": "2"
                                },
                                "src": "7434:6:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "/",
                              "rightExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_rational_1000000_by_1",
                                  "typeString": "int_const 1000000"
                                },
                                "id": 747,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "hexValue": "3130",
                                  "id": 745,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "7443:2:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_10_by_1",
                                    "typeString": "int_const 10"
                                  },
                                  "value": "10"
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "**",
                                "rightExpression": {
                                  "hexValue": "36",
                                  "id": 746,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "7449:1:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_6_by_1",
                                    "typeString": "int_const 6"
                                  },
                                  "value": "6"
                                },
                                "src": "7443:7:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1000000_by_1",
                                  "typeString": "int_const 1000000"
                                }
                              },
                              "src": "7434:16:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "id": 749,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "7433:18:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "7429:22:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "+",
                      "rightExpression": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 753,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "hexValue": "33",
                          "id": 751,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "7455:1:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_3_by_1",
                            "typeString": "int_const 3"
                          },
                          "value": "3"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "*",
                        "rightExpression": {
                          "id": 752,
                          "name": "x",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 734,
                          "src": "7459:1:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "7455:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "7429:31:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "+",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_rational_1000000_by_1",
                        "typeString": "int_const 1000000"
                      },
                      "id": 757,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "leftExpression": {
                        "hexValue": "3130",
                        "id": 755,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7463:2:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_10_by_1",
                          "typeString": "int_const 10"
                        },
                        "value": "10"
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "**",
                      "rightExpression": {
                        "hexValue": "36",
                        "id": 756,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7469:1:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_6_by_1",
                          "typeString": "int_const 6"
                        },
                        "value": "6"
                      },
                      "src": "7463:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1000000_by_1",
                        "typeString": "int_const 1000000"
                      }
                    },
                    "src": "7429:41:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7413:57:8"
                },
                {
                  "assignments": [
                    761
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 761,
                      "mutability": "mutable",
                      "name": "num",
                      "nodeType": "VariableDeclaration",
                      "scope": 774,
                      "src": "7480:11:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 760,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7480:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 765,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_rational_1000000000000_by_1",
                      "typeString": "int_const 1000000000000"
                    },
                    "id": 764,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "leftExpression": {
                      "hexValue": "3130",
                      "id": 762,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "7494:2:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_10_by_1",
                        "typeString": "int_const 10"
                      },
                      "value": "10"
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "**",
                    "rightExpression": {
                      "hexValue": "3132",
                      "id": 763,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "7500:2:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_12_by_1",
                        "typeString": "int_const 12"
                      },
                      "value": "12"
                    },
                    "src": "7494:8:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_1000000000000_by_1",
                      "typeString": "int_const 1000000000000"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7480:22:8"
                },
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 772,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_rational_1000000_by_1",
                        "typeString": "int_const 1000000"
                      },
                      "id": 768,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "leftExpression": {
                        "hexValue": "3130",
                        "id": 766,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7520:2:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_10_by_1",
                          "typeString": "int_const 10"
                        },
                        "value": "10"
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "**",
                      "rightExpression": {
                        "hexValue": "36",
                        "id": 767,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7526:1:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_6_by_1",
                          "typeString": "int_const 6"
                        },
                        "value": "6"
                      },
                      "src": "7520:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1000000_by_1",
                        "typeString": "int_const 1000000"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "-",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 771,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 769,
                        "name": "num",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 761,
                        "src": "7530:3:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "/",
                      "rightExpression": {
                        "id": 770,
                        "name": "denom",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 740,
                        "src": "7536:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "7530:11:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7520:21:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 738,
                  "id": 773,
                  "nodeType": "Return",
                  "src": "7513:28:8"
                }
              ]
            },
            "id": 775,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "L",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 735,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 734,
                  "mutability": "mutable",
                  "name": "x",
                  "nodeType": "VariableDeclaration",
                  "scope": 775,
                  "src": "7334:9:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 733,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7334:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7333:11:8"
            },
            "returnParameters": {
              "id": 738,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 737,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 775,
                  "src": "7368:7:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 736,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7368:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7367:9:8"
            },
            "scope": 844,
            "src": "7323:225:8",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 818,
              "nodeType": "Block",
              "src": "7626:246:8",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 784,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 782,
                      "name": "btcPrice",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 777,
                      "src": "7657:8:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "id": 783,
                      "name": "lastBtcPrice",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 208,
                      "src": "7668:12:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7657:23:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 816,
                    "nodeType": "Block",
                    "src": "7781:84:8",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_rational_1000000_by_1",
                                "typeString": "int_const 1000000"
                              },
                              "id": 813,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "leftExpression": {
                                "hexValue": "3130",
                                "id": 811,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "7846:2:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_10_by_1",
                                  "typeString": "int_const 10"
                                },
                                "value": "10"
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "**",
                              "rightExpression": {
                                "hexValue": "36",
                                "id": 812,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "7852:1:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_6_by_1",
                                  "typeString": "int_const 6"
                                },
                                "value": "6"
                              },
                              "src": "7846:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1000000_by_1",
                                "typeString": "int_const 1000000"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_1000000_by_1",
                                "typeString": "int_const 1000000"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 808,
                                  "name": "btcPrice",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 777,
                                  "src": "7832:8:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "arguments": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_rational_1000000_by_1",
                                        "typeString": "int_const 1000000"
                                      },
                                      "id": 805,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "hexValue": "3130",
                                        "id": 803,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "7819:2:8",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_10_by_1",
                                          "typeString": "int_const 10"
                                        },
                                        "value": "10"
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "**",
                                      "rightExpression": {
                                        "hexValue": "36",
                                        "id": 804,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "7825:1:8",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_6_by_1",
                                          "typeString": "int_const 6"
                                        },
                                        "value": "6"
                                      },
                                      "src": "7819:7:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_1000000_by_1",
                                        "typeString": "int_const 1000000"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_1000000_by_1",
                                        "typeString": "int_const 1000000"
                                      }
                                    ],
                                    "expression": {
                                      "id": 801,
                                      "name": "lastBtcPrice",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 208,
                                      "src": "7802:12:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 802,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "mul",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1762,
                                    "src": "7802:16:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 806,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "7802:25:8",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 807,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "div",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1777,
                                "src": "7802:29:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                  "typeString": "function (uint256,uint256) pure returns (uint256)"
                                }
                              },
                              "id": 809,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "7802:39:8",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 810,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sub",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1747,
                            "src": "7802:43:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 814,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7802:52:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 781,
                        "id": 815,
                        "nodeType": "Return",
                        "src": "7795:59:8"
                      }
                    ]
                  },
                  "id": 817,
                  "nodeType": "IfStatement",
                  "src": "7653:212:8",
                  "trueBody": {
                    "id": 800,
                    "nodeType": "Block",
                    "src": "7682:84:8",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_rational_1000000_by_1",
                                "typeString": "int_const 1000000"
                              },
                              "id": 797,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "leftExpression": {
                                "hexValue": "3130",
                                "id": 795,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "7747:2:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_10_by_1",
                                  "typeString": "int_const 10"
                                },
                                "value": "10"
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "**",
                              "rightExpression": {
                                "hexValue": "36",
                                "id": 796,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "7753:1:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_6_by_1",
                                  "typeString": "int_const 6"
                                },
                                "value": "6"
                              },
                              "src": "7747:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1000000_by_1",
                                "typeString": "int_const 1000000"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_1000000_by_1",
                                "typeString": "int_const 1000000"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 792,
                                  "name": "lastBtcPrice",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 208,
                                  "src": "7729:12:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "arguments": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_rational_1000000_by_1",
                                        "typeString": "int_const 1000000"
                                      },
                                      "id": 789,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "hexValue": "3130",
                                        "id": 787,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "7716:2:8",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_10_by_1",
                                          "typeString": "int_const 10"
                                        },
                                        "value": "10"
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "**",
                                      "rightExpression": {
                                        "hexValue": "36",
                                        "id": 788,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "7722:1:8",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_6_by_1",
                                          "typeString": "int_const 6"
                                        },
                                        "value": "6"
                                      },
                                      "src": "7716:7:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_1000000_by_1",
                                        "typeString": "int_const 1000000"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_1000000_by_1",
                                        "typeString": "int_const 1000000"
                                      }
                                    ],
                                    "expression": {
                                      "id": 785,
                                      "name": "btcPrice",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 777,
                                      "src": "7703:8:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 786,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "mul",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1762,
                                    "src": "7703:12:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 790,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "7703:21:8",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 791,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "div",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1777,
                                "src": "7703:25:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                  "typeString": "function (uint256,uint256) pure returns (uint256)"
                                }
                              },
                              "id": 793,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "7703:39:8",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 794,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sub",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1747,
                            "src": "7703:43:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 798,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7703:52:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 781,
                        "id": 799,
                        "nodeType": "Return",
                        "src": "7696:59:8"
                      }
                    ]
                  }
                }
              ]
            },
            "id": 819,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getPriceDiff",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 778,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 777,
                  "mutability": "mutable",
                  "name": "btcPrice",
                  "nodeType": "VariableDeclaration",
                  "scope": 819,
                  "src": "7576:16:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 776,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7576:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7575:18:8"
            },
            "returnParameters": {
              "id": 781,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 780,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 819,
                  "src": "7617:7:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 779,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7617:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7616:9:8"
            },
            "scope": 844,
            "src": "7554:318:8",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 830,
              "nodeType": "Block",
              "src": "7934:51:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 826,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "7967:3:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 827,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "7967:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 824,
                        "name": "btcUp",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 220,
                        "src": "7951:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_BTCUP_$108",
                          "typeString": "contract BTCUP"
                        }
                      },
                      "id": 825,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "balanceOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1047,
                      "src": "7951:15:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 828,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7951:27:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 823,
                  "id": 829,
                  "nodeType": "Return",
                  "src": "7944:34:8"
                }
              ]
            },
            "functionSelector": "157d0129",
            "id": 831,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getBtcupBalance",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 820,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7902:2:8"
            },
            "returnParameters": {
              "id": 823,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 822,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 831,
                  "src": "7925:7:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 821,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7925:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7924:9:8"
            },
            "scope": 844,
            "src": "7878:107:8",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 842,
              "nodeType": "Block",
              "src": "8049:53:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 838,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "8084:3:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 839,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "8084:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 836,
                        "name": "btcDown",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 223,
                        "src": "8066:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_BTCDOWN_$178",
                          "typeString": "contract BTCDOWN"
                        }
                      },
                      "id": 837,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "balanceOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1047,
                      "src": "8066:17:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 840,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8066:29:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 835,
                  "id": 841,
                  "nodeType": "Return",
                  "src": "8059:36:8"
                }
              ]
            },
            "functionSelector": "c7e3b124",
            "id": 843,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getBtcdownBalance",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 832,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8017:2:8"
            },
            "returnParameters": {
              "id": 835,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 834,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 843,
                  "src": "8040:7:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 833,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8040:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8039:9:8"
            },
            "scope": 844,
            "src": "7991:111:8",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 845,
        "src": "1863:6243:8"
      }
    ],
    "src": "32:8081:8"
  },
  "bytecode": "60806040523480156200001157600080fd5b5060405162000fa638038062000fa6833981016040819052620000349162000169565b604080518082018252600a8152690426974636f696e2055760b41b602080830191825283518085019094526005845264042544355560dc1b9084015281519192916200008391600391620000c3565b50805162000099906004906020840190620000c3565b5050600580546001600160a01b0319166001600160a01b03939093169290921790915550620001d6565b828054620000d19062000199565b90600052602060002090601f016020900481019282620000f5576000855562000140565b82601f106200011057805160ff191683800117855562000140565b8280016001018555821562000140579182015b828111156200014057825182559160200191906001019062000123565b506200014e92915062000152565b5090565b5b808211156200014e576000815560010162000153565b6000602082840312156200017b578081fd5b81516001600160a01b038116811462000192578182fd5b9392505050565b600281046001821680620001ae57607f821691505b60208210811415620001d057634e487b7160e01b600052602260045260246000fd5b50919050565b610dc080620001e66000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806370a082311161008c578063a0712d6811610066578063a0712d68146101c0578063a457c2d7146101d3578063a9059cbb146101e6578063dd62ed3e146101f9576100ea565b806370a082311461019257806379cc6790146101a557806395d89b41146101b8576100ea565b806323b872dd116100c857806323b872dd14610142578063313ce56714610155578063395093511461016a57806342966c681461017d576100ea565b806306fdde03146100ef578063095ea7b31461010d57806318160ddd1461012d575b600080fd5b6100f761020c565b60405161010491906109c1565b60405180910390f35b61012061011b366004610975565b61029e565b60405161010491906109b6565b6101356102bb565b6040516101049190610cf3565b61012061015036600461093a565b6102c1565b61015d61035a565b6040516101049190610cfc565b610120610178366004610975565b61035f565b61019061018b36600461099e565b6103b3565b005b6101356101a03660046108e7565b6103d7565b6101906101b3366004610975565b6103f6565b6100f7610449565b6101906101ce36600461099e565b610458565b6101206101e1366004610975565b610479565b6101206101f4366004610975565b6104f2565b610135610207366004610908565b610506565b60606003805461021b90610d39565b80601f016020809104026020016040519081016040528092919081815260200182805461024790610d39565b80156102945780601f1061026957610100808354040283529160200191610294565b820191906000526020600020905b81548152906001019060200180831161027757829003601f168201915b5050505050905090565b60006102b26102ab610531565b8484610535565b50600192915050565b60025490565b60006102ce8484846105e9565b6001600160a01b0384166000908152600160205260408120816102ef610531565b6001600160a01b03166001600160a01b031681526020019081526020016000205490508281101561033b5760405162461bcd60e51b815260040161033290610b21565b60405180910390fd5b61034f85610347610531565b858403610535565b506001949350505050565b600690565b60006102b261036c610531565b84846001600061037a610531565b6001600160a01b03908116825260208083019390935260409182016000908120918b16815292529020546103ae9190610d0a565b610535565b6005546001600160a01b031633146103ca57600080fd5b6103d432826103f6565b50565b6001600160a01b0381166000908152602081905260409020545b919050565b600061040483610207610531565b9050818110156104265760405162461bcd60e51b815260040161033290610b69565b61043a83610432610531565b848403610535565b6104448383610713565b505050565b60606004805461021b90610d39565b6005546001600160a01b0316331461046f57600080fd5b6103d43282610804565b60008060016000610488610531565b6001600160a01b03908116825260208083019390935260409182016000908120918816815292529020549050828110156104d45760405162461bcd60e51b815260040161033290610c77565b6104e86104df610531565b85858403610535565b5060019392505050565b60006102b26104ff610531565b84846105e9565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3390565b6001600160a01b03831661055b5760405162461bcd60e51b815260040161033290610c33565b6001600160a01b0382166105815760405162461bcd60e51b815260040161033290610a99565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906105dc908590610cf3565b60405180910390a3505050565b6001600160a01b03831661060f5760405162461bcd60e51b815260040161033290610bee565b6001600160a01b0382166106355760405162461bcd60e51b815260040161033290610a14565b610640838383610444565b6001600160a01b038316600090815260208190526040902054818110156106795760405162461bcd60e51b815260040161033290610adb565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906106b0908490610d0a565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106fa9190610cf3565b60405180910390a361070d848484610444565b50505050565b6001600160a01b0382166107395760405162461bcd60e51b815260040161033290610bad565b61074582600083610444565b6001600160a01b0382166000908152602081905260409020548181101561077e5760405162461bcd60e51b815260040161033290610a57565b6001600160a01b03831660009081526020819052604081208383039055600280548492906107ad908490610d22565b90915550506040516000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906107f0908690610cf3565b60405180910390a361044483600084610444565b6001600160a01b03821661082a5760405162461bcd60e51b815260040161033290610cbc565b61083660008383610444565b80600260008282546108489190610d0a565b90915550506001600160a01b03821660009081526020819052604081208054839290610875908490610d0a565b90915550506040516001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906108b8908590610cf3565b60405180910390a36108cc60008383610444565b5050565b80356001600160a01b03811681146103f157600080fd5b6000602082840312156108f8578081fd5b610901826108d0565b9392505050565b6000806040838503121561091a578081fd5b610923836108d0565b9150610931602084016108d0565b90509250929050565b60008060006060848603121561094e578081fd5b610957846108d0565b9250610965602085016108d0565b9150604084013590509250925092565b60008060408385031215610987578182fd5b610990836108d0565b946020939093013593505050565b6000602082840312156109af578081fd5b5035919050565b901515815260200190565b6000602080835283518082850152825b818110156109ed578581018301518582016040015282016109d1565b818111156109fe5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526022908201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604082015261636560f01b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526026908201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604082015265616c616e636560d01b606082015260800190565b60208082526028908201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616040820152676c6c6f77616e636560c01b606082015260800190565b60208082526024908201527f45524332303a206275726e20616d6f756e74206578636565647320616c6c6f77604082015263616e636560e01b606082015260800190565b60208082526021908201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526025908201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604082015264207a65726f60d81b606082015260800190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b90815260200190565b60ff91909116815260200190565b60008219821115610d1d57610d1d610d74565b500190565b600082821015610d3457610d34610d74565b500390565b600281046001821680610d4d57607f821691505b60208210811415610d6e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea26469706673582212204b56f0cf37d0c33c8e1f8790574f12511ae6d7a93357d34f6358125da763b44c64736f6c63430008000033",
  "bytecodeSha1": "2b0409a3e0be2a07b8a8034857ac44e934b45326",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.0+commit.c7dfd78e"
  },
  "contractName": "BTCUP",
  "coverageMap": {
    "branches": {
      "1": {
        "ERC20._approve": {
          "50": [
            10083,
            10102,
            true
          ],
          "51": [
            10161,
            10182,
            true
          ]
        },
        "ERC20._burn": {
          "55": [
            9036,
            9057,
            true
          ],
          "56": [
            9227,
            9251,
            true
          ]
        },
        "ERC20._mint": {
          "57": [
            8327,
            8348,
            true
          ]
        },
        "ERC20._transfer": {
          "52": [
            7390,
            7410,
            true
          ],
          "53": [
            7470,
            7493,
            true
          ],
          "54": [
            7661,
            7684,
            true
          ]
        },
        "ERC20.decreaseAllowance": {
          "49": [
            6564,
            6599,
            true
          ]
        },
        "ERC20.transferFrom": {
          "48": [
            5081,
            5107,
            true
          ]
        }
      },
      "2": {},
      "3": {},
      "4": {},
      "5": {},
      "8": {}
    },
    "statements": {
      "1": {
        "ERC20._approve": {
          "23": [
            10075,
            10143
          ],
          "24": [
            10153,
            10221
          ],
          "25": [
            10232,
            10268
          ],
          "26": [
            10278,
            10315
          ]
        },
        "ERC20._burn": {
          "35": [
            9028,
            9095
          ],
          "36": [
            9106,
            9155
          ],
          "37": [
            9219,
            9290
          ],
          "38": [
            9324,
            9368
          ],
          "39": [
            9388,
            9410
          ],
          "40": [
            9421,
            9463
          ],
          "41": [
            9474,
            9522
          ]
        },
        "ERC20._mint": {
          "42": [
            8319,
            8384
          ],
          "43": [
            8395,
            8444
          ],
          "44": [
            8455,
            8477
          ],
          "45": [
            8487,
            8515
          ],
          "46": [
            8525,
            8567
          ],
          "47": [
            8578,
            8626
          ]
        },
        "ERC20._transfer": {
          "27": [
            7382,
            7452
          ],
          "28": [
            7462,
            7533
          ],
          "29": [
            7544,
            7591
          ],
          "30": [
            7653,
            7727
          ],
          "31": [
            7761,
            7803
          ],
          "32": [
            7823,
            7853
          ],
          "33": [
            7864,
            7904
          ],
          "34": [
            7915,
            7961
          ]
        },
        "ERC20.allowance": {
          "21": [
            3992,
            4026
          ]
        },
        "ERC20.approve": {
          "1": [
            4270,
            4309
          ],
          "2": [
            4319,
            4330
          ]
        },
        "ERC20.balanceOf": {
          "11": [
            3419,
            3444
          ]
        },
        "ERC20.decreaseAllowance": {
          "17": [
            6556,
            6641
          ],
          "18": [
            6675,
            6742
          ],
          "19": [
            6763,
            6774
          ]
        },
        "ERC20.increaseAllowance": {
          "9": [
            5781,
            5861
          ]
        },
        "ERC20.name": {
          "0": [
            2153,
            2165
          ]
        },
        "ERC20.symbol": {
          "15": [
            2366,
            2380
          ]
        },
        "ERC20.totalSupply": {
          "3": [
            3242,
            3261
          ]
        },
        "ERC20.transfer": {
          "20": [
            3756,
            3798
          ]
        },
        "ERC20.transferFrom": {
          "4": [
            4956,
            4992
          ],
          "5": [
            5073,
            5152
          ],
          "6": [
            5186,
            5243
          ],
          "7": [
            5264,
            5275
          ]
        }
      },
      "2": {},
      "3": {
        "ERC20Burnable.burnFrom": {
          "12": [
            1027,
            1102
          ],
          "13": [
            1136,
            1194
          ],
          "14": [
            1214,
            1236
          ]
        }
      },
      "4": {},
      "5": {
        "Context._msgSender": {
          "22": [
            658,
            675
          ]
        }
      },
      "8": {
        "BTCUP.burn": {
          "10": [
            1060,
            1089
          ]
        },
        "BTCUP.decimals": {
          "8": [
            1169,
            1177
          ]
        },
        "BTCUP.mint": {
          "16": [
            952,
            978
          ]
        }
      }
    }
  },
  "dependencies": [
    "OpenZeppelin/openzeppelin-contracts@4.2.0/Context",
    "OpenZeppelin/openzeppelin-contracts@4.2.0/ERC20",
    "OpenZeppelin/openzeppelin-contracts@4.2.0/ERC20Burnable",
    "OpenZeppelin/openzeppelin-contracts@4.2.0/IERC20",
    "OpenZeppelin/openzeppelin-contracts@4.2.0/IERC20Metadata"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100ea5760003560e01c806370a082311161008c578063a0712d6811610066578063a0712d68146101c0578063a457c2d7146101d3578063a9059cbb146101e6578063dd62ed3e146101f9576100ea565b806370a082311461019257806379cc6790146101a557806395d89b41146101b8576100ea565b806323b872dd116100c857806323b872dd14610142578063313ce56714610155578063395093511461016a57806342966c681461017d576100ea565b806306fdde03146100ef578063095ea7b31461010d57806318160ddd1461012d575b600080fd5b6100f761020c565b60405161010491906109c1565b60405180910390f35b61012061011b366004610975565b61029e565b60405161010491906109b6565b6101356102bb565b6040516101049190610cf3565b61012061015036600461093a565b6102c1565b61015d61035a565b6040516101049190610cfc565b610120610178366004610975565b61035f565b61019061018b36600461099e565b6103b3565b005b6101356101a03660046108e7565b6103d7565b6101906101b3366004610975565b6103f6565b6100f7610449565b6101906101ce36600461099e565b610458565b6101206101e1366004610975565b610479565b6101206101f4366004610975565b6104f2565b610135610207366004610908565b610506565b60606003805461021b90610d39565b80601f016020809104026020016040519081016040528092919081815260200182805461024790610d39565b80156102945780601f1061026957610100808354040283529160200191610294565b820191906000526020600020905b81548152906001019060200180831161027757829003601f168201915b5050505050905090565b60006102b26102ab610531565b8484610535565b50600192915050565b60025490565b60006102ce8484846105e9565b6001600160a01b0384166000908152600160205260408120816102ef610531565b6001600160a01b03166001600160a01b031681526020019081526020016000205490508281101561033b5760405162461bcd60e51b815260040161033290610b21565b60405180910390fd5b61034f85610347610531565b858403610535565b506001949350505050565b600690565b60006102b261036c610531565b84846001600061037a610531565b6001600160a01b03908116825260208083019390935260409182016000908120918b16815292529020546103ae9190610d0a565b610535565b6005546001600160a01b031633146103ca57600080fd5b6103d432826103f6565b50565b6001600160a01b0381166000908152602081905260409020545b919050565b600061040483610207610531565b9050818110156104265760405162461bcd60e51b815260040161033290610b69565b61043a83610432610531565b848403610535565b6104448383610713565b505050565b60606004805461021b90610d39565b6005546001600160a01b0316331461046f57600080fd5b6103d43282610804565b60008060016000610488610531565b6001600160a01b03908116825260208083019390935260409182016000908120918816815292529020549050828110156104d45760405162461bcd60e51b815260040161033290610c77565b6104e86104df610531565b85858403610535565b5060019392505050565b60006102b26104ff610531565b84846105e9565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3390565b6001600160a01b03831661055b5760405162461bcd60e51b815260040161033290610c33565b6001600160a01b0382166105815760405162461bcd60e51b815260040161033290610a99565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906105dc908590610cf3565b60405180910390a3505050565b6001600160a01b03831661060f5760405162461bcd60e51b815260040161033290610bee565b6001600160a01b0382166106355760405162461bcd60e51b815260040161033290610a14565b610640838383610444565b6001600160a01b038316600090815260208190526040902054818110156106795760405162461bcd60e51b815260040161033290610adb565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906106b0908490610d0a565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106fa9190610cf3565b60405180910390a361070d848484610444565b50505050565b6001600160a01b0382166107395760405162461bcd60e51b815260040161033290610bad565b61074582600083610444565b6001600160a01b0382166000908152602081905260409020548181101561077e5760405162461bcd60e51b815260040161033290610a57565b6001600160a01b03831660009081526020819052604081208383039055600280548492906107ad908490610d22565b90915550506040516000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906107f0908690610cf3565b60405180910390a361044483600084610444565b6001600160a01b03821661082a5760405162461bcd60e51b815260040161033290610cbc565b61083660008383610444565b80600260008282546108489190610d0a565b90915550506001600160a01b03821660009081526020819052604081208054839290610875908490610d0a565b90915550506040516001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906108b8908590610cf3565b60405180910390a36108cc60008383610444565b5050565b80356001600160a01b03811681146103f157600080fd5b6000602082840312156108f8578081fd5b610901826108d0565b9392505050565b6000806040838503121561091a578081fd5b610923836108d0565b9150610931602084016108d0565b90509250929050565b60008060006060848603121561094e578081fd5b610957846108d0565b9250610965602085016108d0565b9150604084013590509250925092565b60008060408385031215610987578182fd5b610990836108d0565b946020939093013593505050565b6000602082840312156109af578081fd5b5035919050565b901515815260200190565b6000602080835283518082850152825b818110156109ed578581018301518582016040015282016109d1565b818111156109fe5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526022908201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604082015261636560f01b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526026908201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604082015265616c616e636560d01b606082015260800190565b60208082526028908201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616040820152676c6c6f77616e636560c01b606082015260800190565b60208082526024908201527f45524332303a206275726e20616d6f756e74206578636565647320616c6c6f77604082015263616e636560e01b606082015260800190565b60208082526021908201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526025908201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604082015264207a65726f60d81b606082015260800190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b90815260200190565b60ff91909116815260200190565b60008219821115610d1d57610d1d610d74565b500190565b600082821015610d3457610d34610d74565b500390565b600281046001821680610d4d57607f821691505b60208210811415610d6e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea26469706673582212204b56f0cf37d0c33c8e1f8790574f12511ae6d7a93357d34f6358125da763b44c64736f6c63430008000033",
  "deployedSourceMap": "700:576:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2074:98:1;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4171:166;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3162:106::-;;;:::i;:::-;;;;;;;:::i;4804:478::-;;;;;;:::i;:::-;;:::i;1102:82:8:-;;;:::i;:::-;;;;;;;:::i;5677:212:1:-;;;;;;:::i;:::-;;:::i;991:105:8:-;;;;;;:::i;:::-;;:::i;:::-;;3326:125:1;;;;;;:::i;:::-;;:::i;882:361:3:-;;;;;;:::i;:::-;;:::i;2285:102:1:-;;;:::i;892:93:8:-;;;;;;:::i;:::-;;:::i;6376:405:1:-;;;;;;:::i;:::-;;:::i;3654:172::-;;;;;;:::i;:::-;;:::i;3884:149::-;;;;;;:::i;:::-;;:::i;2074:98::-;2128:13;2160:5;2153:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2074:98;:::o;4171:166::-;4254:4;4270:39;4279:12;:10;:12::i;:::-;4293:7;4302:6;4270:8;:39::i;:::-;-1:-1:-1;4326:4:1;4171:166;;;;:::o;3162:106::-;3249:12;;3162:106;:::o;4804:478::-;4940:4;4956:36;4966:6;4974:9;4985:6;4956:9;:36::i;:::-;-1:-1:-1;;;;;5030:19:1;;5003:24;5030:19;;;-1:-1:-1;5030:19:1;;;;;5003:24;5050:12;:10;:12::i;:::-;-1:-1:-1;;;;;5030:33:1;;;;;;;;;;;;-1:-1:-1;5030:33:1;;;-1:-1:-1;5081:26:1;;;;5073:79;;;;-1:-1:-1;;;5073:79:1;;;;;;;:::i;:::-;;;;;;;;;5186:57;5195:6;5203:12;:10;:12::i;:::-;5236:6;5217:16;:25;5186:8;:57::i;:::-;-1:-1:-1;5271:4:1;;4804:478;-1:-1:-1;;;;4804:478:1:o;1102:82:8:-;1176:1;1102:82;:::o;5677:212:1:-;5765:4;5781:80;5790:12;:10;:12::i;:::-;5804:7;5850:10;5813:11;:25;5825:12;:10;:12::i;:::-;-1:-1:-1;;;;;5813:25:1;;;;;;;;;;;;;;;;;-1:-1:-1;5813:25:1;;;:34;;;;;;;;;;:47;;;;:::i;:::-;5781:8;:80::i;991:105:8:-;1242:13;;-1:-1:-1;;;;;1242:13:8;1228:10;:27;1220:36;;;;;;1060:29:::1;1069:9;1080:8;1060;:29::i;:::-;991:105:::0;:::o;3326:125:1:-;-1:-1:-1;;;;;3426:18:1;;3400:7;3426:18;;;;;;;;;;;3326:125;;;;:::o;882:361:3:-;958:24;985:32;995:7;1004:12;:10;:12::i;985:32::-;958:59;;1055:6;1035:16;:26;;1027:75;;;;-1:-1:-1;;;1027:75:3;;;;;;;:::i;:::-;1136:58;1145:7;1154:12;:10;:12::i;:::-;1187:6;1168:16;:25;1136:8;:58::i;:::-;1214:22;1220:7;1229:6;1214:5;:22::i;:::-;882:361;;;:::o;2285:102:1:-;2341:13;2373:7;2366:14;;;;;:::i;892:93:8:-;1242:13;;-1:-1:-1;;;;;1242:13:8;1228:10;:27;1220:36;;;;;;952:26:::1;958:9;969:8;952:5;:26::i;6376:405:1:-:0;6469:4;6485:24;6512:11;:25;6524:12;:10;:12::i;:::-;-1:-1:-1;;;;;6512:25:1;;;;;;;;;;;;;;;;;-1:-1:-1;6512:25:1;;;:34;;;;;;;;;;;-1:-1:-1;6564:35:1;;;;6556:85;;;;-1:-1:-1;;;6556:85:1;;;;;;;:::i;:::-;6675:67;6684:12;:10;:12::i;:::-;6698:7;6726:15;6707:16;:34;6675:8;:67::i;:::-;-1:-1:-1;6770:4:1;;6376:405;-1:-1:-1;;;6376:405:1:o;3654:172::-;3740:4;3756:42;3766:12;:10;:12::i;:::-;3780:9;3791:6;3756:9;:42::i;3884:149::-;-1:-1:-1;;;;;3999:18:1;;;3973:7;3999:18;;;-1:-1:-1;3999:18:1;;;;;;;;:27;;;;;;;;;;;;;3884:149::o;586:96:5:-;665:10;586:96;:::o;9952:370:1:-;-1:-1:-1;;;;;10083:19:1;;10075:68;;;;-1:-1:-1;;;10075:68:1;;;;;;;:::i;:::-;-1:-1:-1;;;;;10161:21:1;;10153:68;;;;-1:-1:-1;;;10153:68:1;;;;;;;:::i;:::-;-1:-1:-1;;;;;10232:18:1;;;;;;;-1:-1:-1;10232:18:1;;;;;;;;:27;;;;;;;;;;;;;;:36;;;10283:32;;;;;10232:36;;10283:32;:::i;:::-;;;;;;;;9952:370;;;:::o;7255:713::-;-1:-1:-1;;;;;7390:20:1;;7382:70;;;;-1:-1:-1;;;7382:70:1;;;;;;;:::i;:::-;-1:-1:-1;;;;;7470:23:1;;7462:71;;;;-1:-1:-1;;;7462:71:1;;;;;;;:::i;:::-;7544:47;7565:6;7573:9;7584:6;7544:20;:47::i;:::-;-1:-1:-1;;;;;7626:17:1;;7602:21;7626:17;;;;;;;;;;;7661:23;;;;7653:74;;;;-1:-1:-1;;;7653:74:1;;;;;;;:::i;:::-;-1:-1:-1;;;;;7761:17:1;;;:9;:17;;;;;;;;;;;7781:22;;;7761:42;;7823:20;;;;;;;;:30;;7781:22;;7761:9;7823:30;;7781:22;;7823:30;:::i;:::-;;;;-1:-1:-1;;7869:35:1;;-1:-1:-1;;;;;7869:35:1;;;;;;;;;;;;7897:6;;7869:35;:::i;:::-;;;;;;;;7915:46;7935:6;7943:9;7954:6;7915:19;:46::i;:::-;7255:713;;;;:::o;8953:576::-;-1:-1:-1;;;;;9036:21:1;;9028:67;;;;-1:-1:-1;;;9028:67:1;;;;;;;:::i;:::-;9106:49;9127:7;9144:1;9148:6;9106:20;:49::i;:::-;-1:-1:-1;;;;;9191:18:1;;9166:22;9191:18;;;;;;;;;;;9227:24;;;;9219:71;;;;-1:-1:-1;;;9219:71:1;;;;;;;:::i;:::-;-1:-1:-1;;;;;9324:18:1;;:9;:18;;;;;;;;;;9345:23;;;9324:44;;9388:12;:22;;9345:23;;9324:9;9388:22;;9345:23;;9388:22;:::i;:::-;;;;-1:-1:-1;;9426:37:1;;9452:1;;-1:-1:-1;;;;;9426:37:1;;;;;;;9456:6;;9426:37;:::i;:::-;;;;;;;;9474:48;9494:7;9511:1;9515:6;9474:19;:48::i;8244:389::-;-1:-1:-1;;;;;8327:21:1;;8319:65;;;;-1:-1:-1;;;8319:65:1;;;;;;;:::i;:::-;8395:49;8424:1;8428:7;8437:6;8395:20;:49::i;:::-;8471:6;8455:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;8487:18:1;;:9;:18;;;;;;;;;;:28;;8509:6;;8487:9;:28;;8509:6;;8487:28;:::i;:::-;;;;-1:-1:-1;;8530:37:1;;-1:-1:-1;;;;;8530:37:1;;;8547:1;;8530:37;;;;8560:6;;8530:37;:::i;:::-;;;;;;;;8578:48;8606:1;8610:7;8619:6;8578:19;:48::i;:::-;8244:389;;:::o;14:175:9:-;84:20;;-1:-1:-1;;;;;133:31:9;;123:42;;113:2;;179:1;176;169:12;194:198;;306:2;294:9;285:7;281:23;277:32;274:2;;;327:6;319;312:22;274:2;355:31;376:9;355:31;:::i;:::-;345:41;264:128;-1:-1:-1;;;264:128:9:o;397:274::-;;;526:2;514:9;505:7;501:23;497:32;494:2;;;547:6;539;532:22;494:2;575:31;596:9;575:31;:::i;:::-;565:41;;625:40;661:2;650:9;646:18;625:40;:::i;:::-;615:50;;484:187;;;;;:::o;676:342::-;;;;822:2;810:9;801:7;797:23;793:32;790:2;;;843:6;835;828:22;790:2;871:31;892:9;871:31;:::i;:::-;861:41;;921:40;957:2;946:9;942:18;921:40;:::i;:::-;911:50;;1008:2;997:9;993:18;980:32;970:42;;780:238;;;;;:::o;1023:266::-;;;1152:2;1140:9;1131:7;1127:23;1123:32;1120:2;;;1173:6;1165;1158:22;1120:2;1201:31;1222:9;1201:31;:::i;:::-;1191:41;1279:2;1264:18;;;;1251:32;;-1:-1:-1;;;1110:179:9:o;1294:190::-;;1406:2;1394:9;1385:7;1381:23;1377:32;1374:2;;;1427:6;1419;1412:22;1374:2;-1:-1:-1;1455:23:9;;1364:120;-1:-1:-1;1364:120:9:o;1489:187::-;1654:14;;1647:22;1629:41;;1617:2;1602:18;;1584:92::o;1681:603::-;;1822:2;1851;1840:9;1833:21;1883:6;1877:13;1926:6;1921:2;1910:9;1906:18;1899:34;1951:4;1964:140;1978:6;1975:1;1972:13;1964:140;;;2073:14;;;2069:23;;2063:30;2039:17;;;2058:2;2035:26;2028:66;1993:10;;1964:140;;;2122:6;2119:1;2116:13;2113:2;;;2192:4;2187:2;2178:6;2167:9;2163:22;2159:31;2152:45;2113:2;-1:-1:-1;2268:2:9;2247:15;-1:-1:-1;;2243:29:9;2228:45;;;;2275:2;2224:54;;1802:482;-1:-1:-1;;;1802:482:9:o;2289:399::-;2491:2;2473:21;;;2530:2;2510:18;;;2503:30;2569:34;2564:2;2549:18;;2542:62;-1:-1:-1;;;2635:2:9;2620:18;;2613:33;2678:3;2663:19;;2463:225::o;2693:398::-;2895:2;2877:21;;;2934:2;2914:18;;;2907:30;2973:34;2968:2;2953:18;;2946:62;-1:-1:-1;;;3039:2:9;3024:18;;3017:32;3081:3;3066:19;;2867:224::o;3096:398::-;3298:2;3280:21;;;3337:2;3317:18;;;3310:30;3376:34;3371:2;3356:18;;3349:62;-1:-1:-1;;;3442:2:9;3427:18;;3420:32;3484:3;3469:19;;3270:224::o;3499:402::-;3701:2;3683:21;;;3740:2;3720:18;;;3713:30;3779:34;3774:2;3759:18;;3752:62;-1:-1:-1;;;3845:2:9;3830:18;;3823:36;3891:3;3876:19;;3673:228::o;3906:404::-;4108:2;4090:21;;;4147:2;4127:18;;;4120:30;4186:34;4181:2;4166:18;;4159:62;-1:-1:-1;;;4252:2:9;4237:18;;4230:38;4300:3;4285:19;;4080:230::o;4315:400::-;4517:2;4499:21;;;4556:2;4536:18;;;4529:30;4595:34;4590:2;4575:18;;4568:62;-1:-1:-1;;;4661:2:9;4646:18;;4639:34;4705:3;4690:19;;4489:226::o;4720:397::-;4922:2;4904:21;;;4961:2;4941:18;;;4934:30;5000:34;4995:2;4980:18;;4973:62;-1:-1:-1;;;5066:2:9;5051:18;;5044:31;5107:3;5092:19;;4894:223::o;5122:401::-;5324:2;5306:21;;;5363:2;5343:18;;;5336:30;5402:34;5397:2;5382:18;;5375:62;-1:-1:-1;;;5468:2:9;5453:18;;5446:35;5513:3;5498:19;;5296:227::o;5528:400::-;5730:2;5712:21;;;5769:2;5749:18;;;5742:30;5808:34;5803:2;5788:18;;5781:62;-1:-1:-1;;;5874:2:9;5859:18;;5852:34;5918:3;5903:19;;5702:226::o;5933:401::-;6135:2;6117:21;;;6174:2;6154:18;;;6147:30;6213:34;6208:2;6193:18;;6186:62;-1:-1:-1;;;6279:2:9;6264:18;;6257:35;6324:3;6309:19;;6107:227::o;6339:355::-;6541:2;6523:21;;;6580:2;6560:18;;;6553:30;6619:33;6614:2;6599:18;;6592:61;6685:2;6670:18;;6513:181::o;6699:177::-;6845:25;;;6833:2;6818:18;;6800:76::o;6881:184::-;7053:4;7041:17;;;;7023:36;;7011:2;6996:18;;6978:87::o;7070:128::-;;7141:1;7137:6;7134:1;7131:13;7128:2;;;7147:18;;:::i;:::-;-1:-1:-1;7183:9:9;;7118:80::o;7203:125::-;;7271:1;7268;7265:8;7262:2;;;7276:18;;:::i;:::-;-1:-1:-1;7313:9:9;;7252:76::o;7333:380::-;7418:1;7408:12;;7465:1;7455:12;;;7476:2;;7530:4;7522:6;7518:17;7508:27;;7476:2;7583;7575:6;7572:14;7552:18;7549:38;7546:2;;;7629:10;7624:3;7620:20;7617:1;7610:31;7664:4;7661:1;7654:15;7692:4;7689:1;7682:15;7546:2;;7388:325;;;:::o;7718:127::-;7779:10;7774:3;7770:20;7767:1;7760:31;7810:4;7807:1;7800:15;7834:4;7831:1;7824:15",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burnFrom(address,uint256)": {
        "details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "offset": [
    700,
    1276
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xEA JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA0712D68 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA0712D68 EQ PUSH2 0x1C0 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x1D3 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1F9 JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x192 JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x1A5 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1B8 JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x142 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x155 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x16A JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x17D JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x10D JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x12D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF7 PUSH2 0x20C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0x9C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x120 PUSH2 0x11B CALLDATASIZE PUSH1 0x4 PUSH2 0x975 JUMP JUMPDEST PUSH2 0x29E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0x9B6 JUMP JUMPDEST PUSH2 0x135 PUSH2 0x2BB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0xCF3 JUMP JUMPDEST PUSH2 0x120 PUSH2 0x150 CALLDATASIZE PUSH1 0x4 PUSH2 0x93A JUMP JUMPDEST PUSH2 0x2C1 JUMP JUMPDEST PUSH2 0x15D PUSH2 0x35A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0xCFC JUMP JUMPDEST PUSH2 0x120 PUSH2 0x178 CALLDATASIZE PUSH1 0x4 PUSH2 0x975 JUMP JUMPDEST PUSH2 0x35F JUMP JUMPDEST PUSH2 0x190 PUSH2 0x18B CALLDATASIZE PUSH1 0x4 PUSH2 0x99E JUMP JUMPDEST PUSH2 0x3B3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x135 PUSH2 0x1A0 CALLDATASIZE PUSH1 0x4 PUSH2 0x8E7 JUMP JUMPDEST PUSH2 0x3D7 JUMP JUMPDEST PUSH2 0x190 PUSH2 0x1B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x975 JUMP JUMPDEST PUSH2 0x3F6 JUMP JUMPDEST PUSH2 0xF7 PUSH2 0x449 JUMP JUMPDEST PUSH2 0x190 PUSH2 0x1CE CALLDATASIZE PUSH1 0x4 PUSH2 0x99E JUMP JUMPDEST PUSH2 0x458 JUMP JUMPDEST PUSH2 0x120 PUSH2 0x1E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x975 JUMP JUMPDEST PUSH2 0x479 JUMP JUMPDEST PUSH2 0x120 PUSH2 0x1F4 CALLDATASIZE PUSH1 0x4 PUSH2 0x975 JUMP JUMPDEST PUSH2 0x4F2 JUMP JUMPDEST PUSH2 0x135 PUSH2 0x207 CALLDATASIZE PUSH1 0x4 PUSH2 0x908 JUMP JUMPDEST PUSH2 0x506 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x21B SWAP1 PUSH2 0xD39 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x247 SWAP1 PUSH2 0xD39 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x294 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x269 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x294 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x277 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B2 PUSH2 0x2AB PUSH2 0x531 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x535 JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CE DUP5 DUP5 DUP5 PUSH2 0x5E9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 PUSH2 0x2EF PUSH2 0x531 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0x33B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xB21 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x34F DUP6 PUSH2 0x347 PUSH2 0x531 JUMP JUMPDEST DUP6 DUP5 SUB PUSH2 0x535 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x6 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B2 PUSH2 0x36C PUSH2 0x531 JUMP JUMPDEST DUP5 DUP5 PUSH1 0x1 PUSH1 0x0 PUSH2 0x37A PUSH2 0x531 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP12 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH2 0x3AE SWAP2 SWAP1 PUSH2 0xD0A JUMP JUMPDEST PUSH2 0x535 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3D4 ORIGIN DUP3 PUSH2 0x3F6 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x404 DUP4 PUSH2 0x207 PUSH2 0x531 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x426 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xB69 JUMP JUMPDEST PUSH2 0x43A DUP4 PUSH2 0x432 PUSH2 0x531 JUMP JUMPDEST DUP5 DUP5 SUB PUSH2 0x535 JUMP JUMPDEST PUSH2 0x444 DUP4 DUP4 PUSH2 0x713 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x21B SWAP1 PUSH2 0xD39 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x46F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3D4 ORIGIN DUP3 PUSH2 0x804 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x488 PUSH2 0x531 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP9 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0x4D4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xC77 JUMP JUMPDEST PUSH2 0x4E8 PUSH2 0x4DF PUSH2 0x531 JUMP JUMPDEST DUP6 DUP6 DUP5 SUB PUSH2 0x535 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B2 PUSH2 0x4FF PUSH2 0x531 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x5E9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x55B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xC33 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x581 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xA99 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE MLOAD PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP1 PUSH2 0x5DC SWAP1 DUP6 SWAP1 PUSH2 0xCF3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x60F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xBEE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x635 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xA14 JUMP JUMPDEST PUSH2 0x640 DUP4 DUP4 DUP4 PUSH2 0x444 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x679 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xADB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x6B0 SWAP1 DUP5 SWAP1 PUSH2 0xD0A JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x6FA SWAP2 SWAP1 PUSH2 0xCF3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x70D DUP5 DUP5 DUP5 PUSH2 0x444 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x739 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xBAD JUMP JUMPDEST PUSH2 0x745 DUP3 PUSH1 0x0 DUP4 PUSH2 0x444 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x77E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xA57 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP4 DUP4 SUB SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x7AD SWAP1 DUP5 SWAP1 PUSH2 0xD22 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x7F0 SWAP1 DUP7 SWAP1 PUSH2 0xCF3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x444 DUP4 PUSH1 0x0 DUP5 PUSH2 0x444 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x82A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xCBC JUMP JUMPDEST PUSH2 0x836 PUSH1 0x0 DUP4 DUP4 PUSH2 0x444 JUMP JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x848 SWAP2 SWAP1 PUSH2 0xD0A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x875 SWAP1 DUP5 SWAP1 PUSH2 0xD0A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x8B8 SWAP1 DUP6 SWAP1 PUSH2 0xCF3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x8CC PUSH1 0x0 DUP4 DUP4 PUSH2 0x444 JUMP JUMPDEST POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x3F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8F8 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x901 DUP3 PUSH2 0x8D0 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x91A JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x923 DUP4 PUSH2 0x8D0 JUMP JUMPDEST SWAP2 POP PUSH2 0x931 PUSH1 0x20 DUP5 ADD PUSH2 0x8D0 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x94E JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x957 DUP5 PUSH2 0x8D0 JUMP JUMPDEST SWAP3 POP PUSH2 0x965 PUSH1 0x20 DUP6 ADD PUSH2 0x8D0 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x987 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x990 DUP4 PUSH2 0x8D0 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9AF JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x9ED JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x9D1 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x9FE JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x40 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732061 PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x6C6C6F77616E6365 PUSH1 0xC0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E74206578636565647320616C6C6F77 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x616E6365 PUSH1 0xE0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x21 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1F SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xD1D JUMPI PUSH2 0xD1D PUSH2 0xD74 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xD34 JUMPI PUSH2 0xD34 PUSH2 0xD74 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP2 DIV PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xD4D JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0xD6E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4B JUMP CREATE 0xCF CALLDATACOPY 0xD0 0xC3 EXTCODECOPY DUP15 0x1F DUP8 SWAP1 JUMPI 0x4F SLT MLOAD BYTE 0xE6 0xD7 0xA9 CALLER JUMPI 0xD3 0x4F PUSH4 0x58125DA7 PUSH4 0xB44C6473 PUSH16 0x6C634300080000330000000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        700,
        1276
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "5": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "CALLVALUE",
      "path": "8"
    },
    "6": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "DUP1",
      "path": "8"
    },
    "7": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "ISZERO",
      "path": "8"
    },
    "8": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "12": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "DUP1",
      "path": "8"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "REVERT",
      "path": "8"
    },
    "16": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "17": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "POP",
      "path": "8"
    },
    "18": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "CALLDATASIZE",
      "path": "8"
    },
    "21": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "LT",
      "path": "8"
    },
    "22": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xEA"
    },
    "25": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "26": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "CALLDATALOAD",
      "path": "8"
    },
    "29": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "SHR",
      "path": "8"
    },
    "32": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "DUP1",
      "path": "8"
    },
    "33": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x70A08231"
    },
    "38": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "GT",
      "path": "8"
    },
    "39": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x8C"
    },
    "42": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "43": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "DUP1",
      "path": "8"
    },
    "44": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0xA0712D68"
    },
    "49": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "GT",
      "path": "8"
    },
    "50": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x66"
    },
    "53": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "54": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "DUP1",
      "path": "8"
    },
    "55": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0xA0712D68"
    },
    "60": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "EQ",
      "path": "8"
    },
    "61": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1C0"
    },
    "64": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "65": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "DUP1",
      "path": "8"
    },
    "66": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0xA457C2D7"
    },
    "71": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "EQ",
      "path": "8"
    },
    "72": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1D3"
    },
    "75": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "76": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "DUP1",
      "path": "8"
    },
    "77": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0xA9059CBB"
    },
    "82": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "EQ",
      "path": "8"
    },
    "83": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1E6"
    },
    "86": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "87": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "DUP1",
      "path": "8"
    },
    "88": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0xDD62ED3E"
    },
    "93": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "EQ",
      "path": "8"
    },
    "94": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1F9"
    },
    "97": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "98": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xEA"
    },
    "101": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "JUMP",
      "path": "8"
    },
    "102": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "103": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "DUP1",
      "path": "8"
    },
    "104": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x70A08231"
    },
    "109": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "EQ",
      "path": "8"
    },
    "110": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x192"
    },
    "113": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "114": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "DUP1",
      "path": "8"
    },
    "115": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x79CC6790"
    },
    "120": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "EQ",
      "path": "8"
    },
    "121": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1A5"
    },
    "124": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "125": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "DUP1",
      "path": "8"
    },
    "126": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x95D89B41"
    },
    "131": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "EQ",
      "path": "8"
    },
    "132": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1B8"
    },
    "135": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "136": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xEA"
    },
    "139": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "JUMP",
      "path": "8"
    },
    "140": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "141": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "DUP1",
      "path": "8"
    },
    "142": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x23B872DD"
    },
    "147": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "GT",
      "path": "8"
    },
    "148": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xC8"
    },
    "151": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "152": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "DUP1",
      "path": "8"
    },
    "153": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x23B872DD"
    },
    "158": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "EQ",
      "path": "8"
    },
    "159": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x142"
    },
    "162": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "163": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "DUP1",
      "path": "8"
    },
    "164": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x313CE567"
    },
    "169": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "EQ",
      "path": "8"
    },
    "170": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x155"
    },
    "173": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "174": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "DUP1",
      "path": "8"
    },
    "175": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x39509351"
    },
    "180": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "EQ",
      "path": "8"
    },
    "181": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x16A"
    },
    "184": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "185": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "DUP1",
      "path": "8"
    },
    "186": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x42966C68"
    },
    "191": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "EQ",
      "path": "8"
    },
    "192": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x17D"
    },
    "195": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "196": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xEA"
    },
    "199": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "JUMP",
      "path": "8"
    },
    "200": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "201": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "DUP1",
      "path": "8"
    },
    "202": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x6FDDE03"
    },
    "207": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "EQ",
      "path": "8"
    },
    "208": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xEF"
    },
    "211": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "212": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "DUP1",
      "path": "8"
    },
    "213": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x95EA7B3"
    },
    "218": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "EQ",
      "path": "8"
    },
    "219": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x10D"
    },
    "222": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "223": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "DUP1",
      "path": "8"
    },
    "224": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x18160DDD"
    },
    "229": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "EQ",
      "path": "8"
    },
    "230": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x12D"
    },
    "233": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "234": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "235": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "237": {
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "DUP1",
      "path": "8"
    },
    "238": {
      "first_revert": true,
      "fn": null,
      "offset": [
        700,
        1276
      ],
      "op": "REVERT",
      "path": "8"
    },
    "239": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "240": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xF7"
    },
    "243": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x20C"
    },
    "246": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        2074,
        2172
      ],
      "op": "JUMP",
      "path": "1"
    },
    "247": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "248": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "250": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "251": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x104"
    },
    "254": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "255": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "256": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x9C1"
    },
    "259": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        2074,
        2172
      ],
      "op": "JUMP",
      "path": "1"
    },
    "260": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "261": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "263": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "264": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "DUP1",
      "path": "1"
    },
    "265": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "266": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "SUB",
      "path": "1"
    },
    "267": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "268": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "RETURN",
      "path": "1"
    },
    "269": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "270": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x120"
    },
    "273": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x11B"
    },
    "276": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "277": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "279": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x975"
    },
    "282": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        4171,
        4337
      ],
      "op": "JUMP",
      "path": "1"
    },
    "283": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "284": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x29E"
    },
    "287": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        4171,
        4337
      ],
      "op": "JUMP",
      "path": "1"
    },
    "288": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "289": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "291": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "292": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x104"
    },
    "295": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "296": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "297": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x9B6"
    },
    "300": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        4171,
        4337
      ],
      "op": "JUMP",
      "path": "1"
    },
    "301": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3162,
        3268
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "302": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3162,
        3268
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x135"
    },
    "305": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3162,
        3268
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2BB"
    },
    "308": {
      "fn": "ERC20.totalSupply",
      "jump": "i",
      "offset": [
        3162,
        3268
      ],
      "op": "JUMP",
      "path": "1"
    },
    "309": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3162,
        3268
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "310": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3162,
        3268
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "312": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3162,
        3268
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "313": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3162,
        3268
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x104"
    },
    "316": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3162,
        3268
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "317": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3162,
        3268
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "318": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3162,
        3268
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xCF3"
    },
    "321": {
      "fn": "ERC20.totalSupply",
      "jump": "i",
      "offset": [
        3162,
        3268
      ],
      "op": "JUMP",
      "path": "1"
    },
    "322": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4804,
        5282
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "323": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4804,
        5282
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x120"
    },
    "326": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4804,
        5282
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x150"
    },
    "329": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4804,
        5282
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "330": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4804,
        5282
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "332": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4804,
        5282
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x93A"
    },
    "335": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        4804,
        5282
      ],
      "op": "JUMP",
      "path": "1"
    },
    "336": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4804,
        5282
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "337": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4804,
        5282
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2C1"
    },
    "340": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        4804,
        5282
      ],
      "op": "JUMP",
      "path": "1"
    },
    "341": {
      "fn": "BTCUP.decimals",
      "offset": [
        1102,
        1184
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "342": {
      "fn": "BTCUP.decimals",
      "offset": [
        1102,
        1184
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x15D"
    },
    "345": {
      "fn": "BTCUP.decimals",
      "offset": [
        1102,
        1184
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x35A"
    },
    "348": {
      "fn": "BTCUP.decimals",
      "jump": "i",
      "offset": [
        1102,
        1184
      ],
      "op": "JUMP",
      "path": "8"
    },
    "349": {
      "fn": "BTCUP.decimals",
      "offset": [
        1102,
        1184
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "350": {
      "fn": "BTCUP.decimals",
      "offset": [
        1102,
        1184
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "352": {
      "fn": "BTCUP.decimals",
      "offset": [
        1102,
        1184
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "353": {
      "fn": "BTCUP.decimals",
      "offset": [
        1102,
        1184
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x104"
    },
    "356": {
      "fn": "BTCUP.decimals",
      "offset": [
        1102,
        1184
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "357": {
      "fn": "BTCUP.decimals",
      "offset": [
        1102,
        1184
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "358": {
      "fn": "BTCUP.decimals",
      "offset": [
        1102,
        1184
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xCFC"
    },
    "361": {
      "fn": "BTCUP.decimals",
      "jump": "i",
      "offset": [
        1102,
        1184
      ],
      "op": "JUMP",
      "path": "8"
    },
    "362": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5677,
        5889
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "363": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5677,
        5889
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x120"
    },
    "366": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5677,
        5889
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x178"
    },
    "369": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5677,
        5889
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "370": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5677,
        5889
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "372": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5677,
        5889
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x975"
    },
    "375": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5677,
        5889
      ],
      "op": "JUMP",
      "path": "1"
    },
    "376": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5677,
        5889
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "377": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5677,
        5889
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x35F"
    },
    "380": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5677,
        5889
      ],
      "op": "JUMP",
      "path": "1"
    },
    "381": {
      "fn": "BTCUP.burn",
      "offset": [
        991,
        1096
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "382": {
      "fn": "BTCUP.burn",
      "offset": [
        991,
        1096
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x190"
    },
    "385": {
      "fn": "BTCUP.burn",
      "offset": [
        991,
        1096
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x18B"
    },
    "388": {
      "fn": "BTCUP.burn",
      "offset": [
        991,
        1096
      ],
      "op": "CALLDATASIZE",
      "path": "8"
    },
    "389": {
      "fn": "BTCUP.burn",
      "offset": [
        991,
        1096
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "391": {
      "fn": "BTCUP.burn",
      "offset": [
        991,
        1096
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x99E"
    },
    "394": {
      "fn": "BTCUP.burn",
      "jump": "i",
      "offset": [
        991,
        1096
      ],
      "op": "JUMP",
      "path": "8"
    },
    "395": {
      "fn": "BTCUP.burn",
      "offset": [
        991,
        1096
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "396": {
      "fn": "BTCUP.burn",
      "offset": [
        991,
        1096
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x3B3"
    },
    "399": {
      "fn": "BTCUP.burn",
      "jump": "i",
      "offset": [
        991,
        1096
      ],
      "op": "JUMP",
      "path": "8"
    },
    "400": {
      "fn": "BTCUP.burn",
      "offset": [
        991,
        1096
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "401": {
      "fn": "BTCUP.burn",
      "offset": [
        991,
        1096
      ],
      "op": "STOP",
      "path": "8"
    },
    "402": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3326,
        3451
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "403": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3326,
        3451
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x135"
    },
    "406": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3326,
        3451
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1A0"
    },
    "409": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3326,
        3451
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "410": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3326,
        3451
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "412": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3326,
        3451
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x8E7"
    },
    "415": {
      "fn": "ERC20.balanceOf",
      "jump": "i",
      "offset": [
        3326,
        3451
      ],
      "op": "JUMP",
      "path": "1"
    },
    "416": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3326,
        3451
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "417": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3326,
        3451
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x3D7"
    },
    "420": {
      "fn": "ERC20.balanceOf",
      "jump": "i",
      "offset": [
        3326,
        3451
      ],
      "op": "JUMP",
      "path": "1"
    },
    "421": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        882,
        1243
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "422": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        882,
        1243
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x190"
    },
    "425": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        882,
        1243
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1B3"
    },
    "428": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        882,
        1243
      ],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "429": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        882,
        1243
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "431": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        882,
        1243
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x975"
    },
    "434": {
      "fn": "ERC20Burnable.burnFrom",
      "jump": "i",
      "offset": [
        882,
        1243
      ],
      "op": "JUMP",
      "path": "3"
    },
    "435": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        882,
        1243
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "436": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        882,
        1243
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x3F6"
    },
    "439": {
      "fn": "ERC20Burnable.burnFrom",
      "jump": "i",
      "offset": [
        882,
        1243
      ],
      "op": "JUMP",
      "path": "3"
    },
    "440": {
      "fn": "ERC20.symbol",
      "offset": [
        2285,
        2387
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "441": {
      "fn": "ERC20.symbol",
      "offset": [
        2285,
        2387
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xF7"
    },
    "444": {
      "fn": "ERC20.symbol",
      "offset": [
        2285,
        2387
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x449"
    },
    "447": {
      "fn": "ERC20.symbol",
      "jump": "i",
      "offset": [
        2285,
        2387
      ],
      "op": "JUMP",
      "path": "1"
    },
    "448": {
      "fn": "BTCUP.mint",
      "offset": [
        892,
        985
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "449": {
      "fn": "BTCUP.mint",
      "offset": [
        892,
        985
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x190"
    },
    "452": {
      "fn": "BTCUP.mint",
      "offset": [
        892,
        985
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x1CE"
    },
    "455": {
      "fn": "BTCUP.mint",
      "offset": [
        892,
        985
      ],
      "op": "CALLDATASIZE",
      "path": "8"
    },
    "456": {
      "fn": "BTCUP.mint",
      "offset": [
        892,
        985
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "458": {
      "fn": "BTCUP.mint",
      "offset": [
        892,
        985
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x99E"
    },
    "461": {
      "fn": "BTCUP.mint",
      "jump": "i",
      "offset": [
        892,
        985
      ],
      "op": "JUMP",
      "path": "8"
    },
    "462": {
      "fn": "BTCUP.mint",
      "offset": [
        892,
        985
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "463": {
      "fn": "BTCUP.mint",
      "offset": [
        892,
        985
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x458"
    },
    "466": {
      "fn": "BTCUP.mint",
      "jump": "i",
      "offset": [
        892,
        985
      ],
      "op": "JUMP",
      "path": "8"
    },
    "467": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6376,
        6781
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "468": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6376,
        6781
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x120"
    },
    "471": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6376,
        6781
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1E1"
    },
    "474": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6376,
        6781
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "475": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6376,
        6781
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "477": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6376,
        6781
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x975"
    },
    "480": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6376,
        6781
      ],
      "op": "JUMP",
      "path": "1"
    },
    "481": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6376,
        6781
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "482": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6376,
        6781
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x479"
    },
    "485": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6376,
        6781
      ],
      "op": "JUMP",
      "path": "1"
    },
    "486": {
      "fn": "ERC20.transfer",
      "offset": [
        3654,
        3826
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "487": {
      "fn": "ERC20.transfer",
      "offset": [
        3654,
        3826
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x120"
    },
    "490": {
      "fn": "ERC20.transfer",
      "offset": [
        3654,
        3826
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1F4"
    },
    "493": {
      "fn": "ERC20.transfer",
      "offset": [
        3654,
        3826
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "494": {
      "fn": "ERC20.transfer",
      "offset": [
        3654,
        3826
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "496": {
      "fn": "ERC20.transfer",
      "offset": [
        3654,
        3826
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x975"
    },
    "499": {
      "fn": "ERC20.transfer",
      "jump": "i",
      "offset": [
        3654,
        3826
      ],
      "op": "JUMP",
      "path": "1"
    },
    "500": {
      "fn": "ERC20.transfer",
      "offset": [
        3654,
        3826
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "501": {
      "fn": "ERC20.transfer",
      "offset": [
        3654,
        3826
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x4F2"
    },
    "504": {
      "fn": "ERC20.transfer",
      "jump": "i",
      "offset": [
        3654,
        3826
      ],
      "op": "JUMP",
      "path": "1"
    },
    "505": {
      "fn": "ERC20.allowance",
      "offset": [
        3884,
        4033
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "506": {
      "fn": "ERC20.allowance",
      "offset": [
        3884,
        4033
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x135"
    },
    "509": {
      "fn": "ERC20.allowance",
      "offset": [
        3884,
        4033
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x207"
    },
    "512": {
      "fn": "ERC20.allowance",
      "offset": [
        3884,
        4033
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "513": {
      "fn": "ERC20.allowance",
      "offset": [
        3884,
        4033
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "515": {
      "fn": "ERC20.allowance",
      "offset": [
        3884,
        4033
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x908"
    },
    "518": {
      "fn": "ERC20.allowance",
      "jump": "i",
      "offset": [
        3884,
        4033
      ],
      "op": "JUMP",
      "path": "1"
    },
    "519": {
      "fn": "ERC20.allowance",
      "offset": [
        3884,
        4033
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "520": {
      "fn": "ERC20.allowance",
      "offset": [
        3884,
        4033
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x506"
    },
    "523": {
      "fn": "ERC20.allowance",
      "jump": "i",
      "offset": [
        3884,
        4033
      ],
      "op": "JUMP",
      "path": "1"
    },
    "524": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "525": {
      "fn": "ERC20.name",
      "offset": [
        2128,
        2141
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x60"
    },
    "527": {
      "fn": "ERC20.name",
      "offset": [
        2160,
        2165
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 0,
      "value": "0x3"
    },
    "529": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP1",
      "path": "1"
    },
    "530": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "531": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x21B"
    },
    "534": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "535": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xD39"
    },
    "538": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        2153,
        2165
      ],
      "op": "JUMP",
      "path": "1"
    },
    "539": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "540": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP1",
      "path": "1"
    },
    "541": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "543": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "ADD",
      "path": "1"
    },
    "544": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "546": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP1",
      "path": "1"
    },
    "547": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "548": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DIV",
      "path": "1"
    },
    "549": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "MUL",
      "path": "1"
    },
    "550": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "552": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "ADD",
      "path": "1"
    },
    "553": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "555": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "556": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "557": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP2",
      "path": "1"
    },
    "558": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "ADD",
      "path": "1"
    },
    "559": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "561": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "562": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP1",
      "path": "1"
    },
    "563": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "564": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "565": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "566": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP2",
      "path": "1"
    },
    "567": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP2",
      "path": "1"
    },
    "568": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "569": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "571": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "ADD",
      "path": "1"
    },
    "572": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP3",
      "path": "1"
    },
    "573": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP1",
      "path": "1"
    },
    "574": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "575": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x247"
    },
    "578": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "579": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xD39"
    },
    "582": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        2153,
        2165
      ],
      "op": "JUMP",
      "path": "1"
    },
    "583": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "584": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP1",
      "path": "1"
    },
    "585": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "586": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x294"
    },
    "589": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "590": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP1",
      "path": "1"
    },
    "591": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "593": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "LT",
      "path": "1"
    },
    "594": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x269"
    },
    "597": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "598": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x100"
    },
    "601": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP1",
      "path": "1"
    },
    "602": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP4",
      "path": "1"
    },
    "603": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "604": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DIV",
      "path": "1"
    },
    "605": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "MUL",
      "path": "1"
    },
    "606": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP4",
      "path": "1"
    },
    "607": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "608": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "609": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "611": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "ADD",
      "path": "1"
    },
    "612": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "613": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x294"
    },
    "616": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "JUMP",
      "path": "1"
    },
    "617": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "618": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP3",
      "path": "1"
    },
    "619": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "ADD",
      "path": "1"
    },
    "620": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "621": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "622": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "624": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "625": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "627": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "629": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "630": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "631": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "632": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP2",
      "path": "1"
    },
    "633": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "634": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP2",
      "path": "1"
    },
    "635": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "636": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "637": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "639": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "ADD",
      "path": "1"
    },
    "640": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "641": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "643": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "ADD",
      "path": "1"
    },
    "644": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP1",
      "path": "1"
    },
    "645": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP4",
      "path": "1"
    },
    "646": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "GT",
      "path": "1"
    },
    "647": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x277"
    },
    "650": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "651": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP3",
      "path": "1"
    },
    "652": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "653": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SUB",
      "path": "1"
    },
    "654": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "656": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "AND",
      "path": "1"
    },
    "657": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP3",
      "path": "1"
    },
    "658": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "ADD",
      "path": "1"
    },
    "659": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "660": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "661": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "POP",
      "path": "1"
    },
    "662": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "POP",
      "path": "1"
    },
    "663": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "POP",
      "path": "1"
    },
    "664": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "POP",
      "path": "1"
    },
    "665": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "POP",
      "path": "1"
    },
    "666": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "667": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "POP",
      "path": "1"
    },
    "668": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "669": {
      "fn": "ERC20.name",
      "jump": "o",
      "offset": [
        2074,
        2172
      ],
      "op": "JUMP",
      "path": "1"
    },
    "670": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "671": {
      "fn": "ERC20.approve",
      "offset": [
        4254,
        4258
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "673": {
      "fn": "ERC20.approve",
      "offset": [
        4270,
        4309
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 1,
      "value": "0x2B2"
    },
    "676": {
      "fn": "ERC20.approve",
      "offset": [
        4279,
        4291
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2AB"
    },
    "679": {
      "fn": "ERC20.approve",
      "offset": [
        4279,
        4289
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x531"
    },
    "682": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        4279,
        4291
      ],
      "op": "JUMP",
      "path": "1"
    },
    "683": {
      "fn": "ERC20.approve",
      "offset": [
        4279,
        4291
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "684": {
      "fn": "ERC20.approve",
      "offset": [
        4293,
        4300
      ],
      "op": "DUP5",
      "path": "1"
    },
    "685": {
      "fn": "ERC20.approve",
      "offset": [
        4302,
        4308
      ],
      "op": "DUP5",
      "path": "1"
    },
    "686": {
      "fn": "ERC20.approve",
      "offset": [
        4270,
        4278
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x535"
    },
    "689": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        4270,
        4309
      ],
      "op": "JUMP",
      "path": "1"
    },
    "690": {
      "fn": "ERC20.approve",
      "offset": [
        4270,
        4309
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "691": {
      "op": "POP"
    },
    "692": {
      "fn": "ERC20.approve",
      "offset": [
        4326,
        4330
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 2,
      "value": "0x1"
    },
    "694": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "695": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "696": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "POP",
      "path": "1"
    },
    "697": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "POP",
      "path": "1"
    },
    "698": {
      "fn": "ERC20.approve",
      "jump": "o",
      "offset": [
        4171,
        4337
      ],
      "op": "JUMP",
      "path": "1"
    },
    "699": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3162,
        3268
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "700": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3249,
        3261
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 3,
      "value": "0x2"
    },
    "702": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3249,
        3261
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "703": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3162,
        3268
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "704": {
      "fn": "ERC20.totalSupply",
      "jump": "o",
      "offset": [
        3162,
        3268
      ],
      "op": "JUMP",
      "path": "1"
    },
    "705": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4804,
        5282
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "706": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4940,
        4944
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "708": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4956,
        4992
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 4,
      "value": "0x2CE"
    },
    "711": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4966,
        4972
      ],
      "op": "DUP5",
      "path": "1"
    },
    "712": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4974,
        4983
      ],
      "op": "DUP5",
      "path": "1"
    },
    "713": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4985,
        4991
      ],
      "op": "DUP5",
      "path": "1"
    },
    "714": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4956,
        4965
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x5E9"
    },
    "717": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        4956,
        4992
      ],
      "op": "JUMP",
      "path": "1"
    },
    "718": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4956,
        4992
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "719": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "721": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "723": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "725": {
      "op": "SHL"
    },
    "726": {
      "op": "SUB"
    },
    "727": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5049
      ],
      "op": "DUP5",
      "path": "1"
    },
    "728": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5049
      ],
      "op": "AND",
      "path": "1"
    },
    "729": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5003,
        5027
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "731": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5049
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "732": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5049
      ],
      "op": "DUP2",
      "path": "1"
    },
    "733": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5049
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "734": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "736": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5049
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "738": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5049
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "739": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5049
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "741": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5049
      ],
      "op": "DUP2",
      "path": "1"
    },
    "742": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5049
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "743": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5003,
        5027
      ],
      "op": "DUP2",
      "path": "1"
    },
    "744": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5050,
        5062
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2EF"
    },
    "747": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5050,
        5060
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x531"
    },
    "750": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        5050,
        5062
      ],
      "op": "JUMP",
      "path": "1"
    },
    "751": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5050,
        5062
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "752": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "754": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "756": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "758": {
      "op": "SHL"
    },
    "759": {
      "op": "SUB"
    },
    "760": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5063
      ],
      "op": "AND",
      "path": "1"
    },
    "761": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5063
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "763": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5063
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "765": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5063
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "767": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5063
      ],
      "op": "SHL",
      "path": "1"
    },
    "768": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5063
      ],
      "op": "SUB",
      "path": "1"
    },
    "769": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5063
      ],
      "op": "AND",
      "path": "1"
    },
    "770": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5063
      ],
      "op": "DUP2",
      "path": "1"
    },
    "771": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5063
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "772": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5063
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "774": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5063
      ],
      "op": "ADD",
      "path": "1"
    },
    "775": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5063
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "776": {
      "op": "DUP2"
    },
    "777": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5063
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "778": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5063
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "780": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5063
      ],
      "op": "ADD",
      "path": "1"
    },
    "781": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "783": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5081,
        5107
      ],
      "op": "KECCAK256",
      "path": "1",
      "statement": 5
    },
    "784": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5081,
        5107
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "785": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5081,
        5107
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "786": {
      "branch": 48,
      "fn": "ERC20.transferFrom",
      "offset": [
        5081,
        5107
      ],
      "op": "POP",
      "path": "1"
    },
    "787": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "DUP3",
      "path": "1"
    },
    "788": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "DUP2",
      "path": "1"
    },
    "789": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "LT",
      "path": "1"
    },
    "790": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "791": {
      "op": "PUSH2",
      "value": "0x33B"
    },
    "794": {
      "op": "JUMPI"
    },
    "795": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "797": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "798": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0x461BCD"
    },
    "802": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE5"
    },
    "804": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "SHL",
      "path": "1"
    },
    "805": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "DUP2",
      "path": "1"
    },
    "806": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "807": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "809": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        5073,
        5152
      ],
      "op": "ADD",
      "path": "1"
    },
    "810": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x332"
    },
    "813": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "814": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xB21"
    },
    "817": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "JUMP",
      "path": "1"
    },
    "818": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "819": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "821": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "822": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "DUP1",
      "path": "1"
    },
    "823": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "824": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5186,
        5243
      ],
      "op": "SUB",
      "path": "1",
      "statement": 6
    },
    "825": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5195,
        5201
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "826": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5203,
        5215
      ],
      "op": "REVERT",
      "path": "1"
    },
    "827": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5203,
        5213
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "828": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        5203,
        5215
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x34F"
    },
    "831": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5203,
        5215
      ],
      "op": "DUP6",
      "path": "1"
    },
    "832": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5236,
        5242
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x347"
    },
    "835": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5217,
        5233
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x531"
    },
    "838": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5217,
        5242
      ],
      "op": "JUMP",
      "path": "1"
    },
    "839": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5186,
        5194
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "840": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        5186,
        5243
      ],
      "op": "DUP6",
      "path": "1"
    },
    "841": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5186,
        5243
      ],
      "op": "DUP5",
      "path": "1"
    },
    "842": {
      "op": "SUB"
    },
    "843": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5271,
        5275
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 7,
      "value": "0x535"
    },
    "846": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5271,
        5275
      ],
      "op": "JUMP",
      "path": "1"
    },
    "847": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4804,
        5282
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "848": {
      "op": "POP"
    },
    "849": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "851": {
      "op": "SWAP5"
    },
    "852": {
      "op": "SWAP4"
    },
    "853": {
      "fn": "ERC20.transferFrom",
      "jump": "o",
      "offset": [
        4804,
        5282
      ],
      "op": "POP",
      "path": "1"
    },
    "854": {
      "fn": "BTCUP.decimals",
      "offset": [
        1102,
        1184
      ],
      "op": "POP",
      "path": "8"
    },
    "855": {
      "fn": "BTCUP.decimals",
      "offset": [
        1176,
        1177
      ],
      "op": "POP",
      "path": "8",
      "statement": 8
    },
    "856": {
      "fn": "BTCUP.decimals",
      "offset": [
        1102,
        1184
      ],
      "op": "POP",
      "path": "8"
    },
    "857": {
      "fn": "BTCUP.decimals",
      "jump": "o",
      "offset": [
        1102,
        1184
      ],
      "op": "JUMP",
      "path": "8"
    },
    "858": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5677,
        5889
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "859": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5765,
        5769
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x6"
    },
    "861": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5781,
        5861
      ],
      "op": "SWAP1",
      "path": "1",
      "statement": 9
    },
    "862": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5790,
        5802
      ],
      "op": "JUMP",
      "path": "1"
    },
    "863": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5790,
        5800
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "864": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5790,
        5802
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "866": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5790,
        5802
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2B2"
    },
    "869": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5804,
        5811
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x36C"
    },
    "872": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5850,
        5860
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x531"
    },
    "875": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5824
      ],
      "op": "JUMP",
      "path": "1"
    },
    "876": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "877": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5825,
        5837
      ],
      "op": "DUP5",
      "path": "1"
    },
    "878": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5825,
        5835
      ],
      "op": "DUP5",
      "path": "1"
    },
    "879": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5825,
        5837
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "881": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5825,
        5837
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "883": {
      "op": "PUSH2",
      "value": "0x37A"
    },
    "886": {
      "op": "PUSH2",
      "value": "0x531"
    },
    "889": {
      "op": "JUMP"
    },
    "890": {
      "op": "JUMPDEST"
    },
    "891": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "893": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "895": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "897": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "SHL",
      "path": "1"
    },
    "898": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "SUB",
      "path": "1"
    },
    "899": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "900": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "DUP2",
      "path": "1"
    },
    "901": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "AND",
      "path": "1"
    },
    "902": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "DUP3",
      "path": "1"
    },
    "903": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "904": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "906": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "DUP1",
      "path": "1"
    },
    "907": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "DUP4",
      "path": "1"
    },
    "908": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "ADD",
      "path": "1"
    },
    "909": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "910": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "911": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "912": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "913": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "915": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "916": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "DUP3",
      "path": "1"
    },
    "917": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "ADD",
      "path": "1"
    },
    "918": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5847
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "920": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5847
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "921": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5847
      ],
      "op": "DUP2",
      "path": "1"
    },
    "922": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5847
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "923": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5847
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "924": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5847
      ],
      "op": "DUP12",
      "path": "1"
    },
    "925": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5847
      ],
      "op": "AND",
      "path": "1"
    },
    "926": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5847
      ],
      "op": "DUP2",
      "path": "1"
    },
    "927": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5847
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "928": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5847
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "929": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5860
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "930": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5860
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "931": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5860
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "932": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5860
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "933": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5813,
        5860
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x3AE"
    },
    "936": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5860
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "937": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5781,
        5789
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "938": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5781,
        5861
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xD0A"
    },
    "941": {
      "fn": "BTCUP.burn",
      "offset": [
        991,
        1096
      ],
      "op": "JUMP",
      "path": "8"
    },
    "942": {
      "offset": [
        1242,
        1255
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "943": {
      "fn": "BTCUP.burn",
      "offset": [
        1242,
        1255
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x535"
    },
    "946": {
      "op": "JUMP"
    },
    "947": {
      "op": "JUMPDEST"
    },
    "948": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "950": {
      "op": "SLOAD"
    },
    "951": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "953": {
      "offset": [
        1242,
        1255
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x1"
    },
    "955": {
      "offset": [
        1228,
        1238
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0xA0"
    },
    "957": {
      "offset": [
        1228,
        1255
      ],
      "op": "SHL",
      "path": "8"
    },
    "958": {
      "offset": [
        1220,
        1256
      ],
      "op": "SUB",
      "path": "8"
    },
    "959": {
      "fn": "BTCUP.burn",
      "offset": [
        1220,
        1256
      ],
      "op": "AND",
      "path": "8"
    },
    "960": {
      "fn": "BTCUP.burn",
      "offset": [
        1220,
        1256
      ],
      "op": "CALLER",
      "path": "8"
    },
    "961": {
      "fn": "BTCUP.burn",
      "offset": [
        1220,
        1256
      ],
      "op": "EQ",
      "path": "8"
    },
    "962": {
      "fn": "BTCUP.burn",
      "offset": [
        1220,
        1256
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x3CA"
    },
    "965": {
      "offset": [
        1220,
        1256
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "966": {
      "fn": "BTCUP.burn",
      "offset": [
        1060,
        1089
      ],
      "op": "PUSH1",
      "path": "8",
      "statement": 10,
      "value": "0x0"
    },
    "968": {
      "fn": "BTCUP.burn",
      "offset": [
        1069,
        1078
      ],
      "op": "DUP1",
      "path": "8"
    },
    "969": {
      "fn": "BTCUP.burn",
      "offset": [
        1080,
        1088
      ],
      "op": "REVERT",
      "path": "8"
    },
    "970": {
      "fn": "BTCUP.burn",
      "offset": [
        1060,
        1068
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "971": {
      "fn": "BTCUP.burn",
      "jump": "i",
      "offset": [
        1060,
        1089
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x3D4"
    },
    "974": {
      "fn": "BTCUP.burn",
      "offset": [
        1060,
        1089
      ],
      "op": "ORIGIN",
      "path": "8"
    },
    "975": {
      "fn": "BTCUP.burn",
      "offset": [
        991,
        1096
      ],
      "op": "DUP3",
      "path": "8"
    },
    "976": {
      "fn": "BTCUP.burn",
      "jump": "o",
      "offset": [
        991,
        1096
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x3F6"
    },
    "979": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3326,
        3451
      ],
      "op": "JUMP",
      "path": "1"
    },
    "980": {
      "op": "JUMPDEST"
    },
    "981": {
      "op": "POP"
    },
    "982": {
      "op": "JUMP"
    },
    "983": {
      "op": "JUMPDEST"
    },
    "984": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "986": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3426,
        3444
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 11,
      "value": "0x1"
    },
    "988": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3426,
        3444
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "990": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3400,
        3407
      ],
      "op": "SHL",
      "path": "1"
    },
    "991": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3426,
        3444
      ],
      "op": "SUB",
      "path": "1"
    },
    "992": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3426,
        3444
      ],
      "op": "DUP2",
      "path": "1"
    },
    "993": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3426,
        3444
      ],
      "op": "AND",
      "path": "1"
    },
    "994": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3426,
        3444
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "996": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3426,
        3444
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "997": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3426,
        3444
      ],
      "op": "DUP2",
      "path": "1"
    },
    "998": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3426,
        3444
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "999": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3426,
        3444
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1001": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3426,
        3444
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1002": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3426,
        3444
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1003": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3426,
        3444
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1004": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3326,
        3451
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1006": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3326,
        3451
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1007": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3326,
        3451
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1008": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3326,
        3451
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1009": {
      "fn": "ERC20.balanceOf",
      "jump": "o",
      "offset": [
        3326,
        3451
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1010": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        882,
        1243
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1011": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        958,
        982
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1012": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        985,
        1017
      ],
      "op": "POP",
      "path": "3"
    },
    "1013": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        995,
        1002
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1014": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1004,
        1016
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1015": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1004,
        1014
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1017": {
      "fn": "ERC20Burnable.burnFrom",
      "jump": "i",
      "offset": [
        1004,
        1016
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x404"
    },
    "1020": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        985,
        1017
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1021": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        958,
        1017
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x207"
    },
    "1024": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        958,
        1017
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x531"
    },
    "1027": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1055,
        1061
      ],
      "op": "JUMP",
      "path": "3",
      "statement": 12
    },
    "1028": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1035,
        1051
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1029": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1035,
        1061
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1030": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1035,
        1061
      ],
      "op": "POP",
      "path": "3"
    },
    "1031": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1027,
        1102
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1032": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1027,
        1102
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1033": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1027,
        1102
      ],
      "op": "LT",
      "path": "3"
    },
    "1034": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1027,
        1102
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "1035": {
      "op": "PUSH2",
      "value": "0x426"
    },
    "1038": {
      "op": "JUMPI"
    },
    "1039": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1041": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1027,
        1102
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1042": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1027,
        1102
      ],
      "op": "PUSH3",
      "path": "3",
      "value": "0x461BCD"
    },
    "1046": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1027,
        1102
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0xE5"
    },
    "1048": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1027,
        1102
      ],
      "op": "SHL",
      "path": "3"
    },
    "1049": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1027,
        1102
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1050": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1027,
        1102
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1051": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1027,
        1102
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "1053": {
      "fn": "ERC20Burnable.burnFrom",
      "jump": "i",
      "offset": [
        1027,
        1102
      ],
      "op": "ADD",
      "path": "3"
    },
    "1054": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1027,
        1102
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x332"
    },
    "1057": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1136,
        1194
      ],
      "op": "SWAP1",
      "path": "3",
      "statement": 13
    },
    "1058": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1145,
        1152
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xB69"
    },
    "1061": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1154,
        1166
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1062": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1154,
        1164
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1063": {
      "fn": "ERC20Burnable.burnFrom",
      "jump": "i",
      "offset": [
        1154,
        1166
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x43A"
    },
    "1066": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1154,
        1166
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1067": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1187,
        1193
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x432"
    },
    "1070": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1168,
        1184
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x531"
    },
    "1073": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1168,
        1193
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1074": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1136,
        1144
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1075": {
      "fn": "ERC20Burnable.burnFrom",
      "jump": "i",
      "offset": [
        1136,
        1194
      ],
      "op": "DUP5",
      "path": "3"
    },
    "1076": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1136,
        1194
      ],
      "op": "DUP5",
      "path": "3"
    },
    "1077": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1214,
        1236
      ],
      "op": "SUB",
      "path": "3",
      "statement": 14
    },
    "1078": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1220,
        1227
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x535"
    },
    "1081": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1229,
        1235
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1082": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1214,
        1219
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1083": {
      "fn": "ERC20Burnable.burnFrom",
      "jump": "i",
      "offset": [
        1214,
        1236
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x444"
    },
    "1086": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        1214,
        1236
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1087": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        882,
        1243
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1088": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        882,
        1243
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x713"
    },
    "1091": {
      "fn": "ERC20Burnable.burnFrom",
      "offset": [
        882,
        1243
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1092": {
      "fn": "ERC20Burnable.burnFrom",
      "jump": "o",
      "offset": [
        882,
        1243
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1093": {
      "fn": "ERC20.symbol",
      "offset": [
        2285,
        2387
      ],
      "op": "POP",
      "path": "1"
    },
    "1094": {
      "fn": "ERC20.symbol",
      "offset": [
        2341,
        2354
      ],
      "op": "POP",
      "path": "1"
    },
    "1095": {
      "fn": "ERC20.symbol",
      "offset": [
        2373,
        2380
      ],
      "op": "POP",
      "path": "1",
      "statement": 15
    },
    "1096": {
      "fn": "ERC20.symbol",
      "offset": [
        2366,
        2380
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1097": {
      "fn": "ERC20.symbol",
      "offset": [
        2366,
        2380
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1098": {
      "fn": "ERC20.symbol",
      "offset": [
        2366,
        2380
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x60"
    },
    "1100": {
      "fn": "ERC20.symbol",
      "offset": [
        2366,
        2380
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1102": {
      "fn": "ERC20.symbol",
      "offset": [
        2366,
        2380
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1103": {
      "fn": "ERC20.symbol",
      "jump": "i",
      "offset": [
        2366,
        2380
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1104": {
      "fn": "BTCUP.mint",
      "offset": [
        892,
        985
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x21B"
    },
    "1107": {
      "offset": [
        1242,
        1255
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "1108": {
      "fn": "BTCUP.mint",
      "offset": [
        1242,
        1255
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xD39"
    },
    "1111": {
      "op": "JUMP"
    },
    "1112": {
      "op": "JUMPDEST"
    },
    "1113": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "1115": {
      "op": "SLOAD"
    },
    "1116": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1118": {
      "offset": [
        1242,
        1255
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x1"
    },
    "1120": {
      "offset": [
        1228,
        1238
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0xA0"
    },
    "1122": {
      "offset": [
        1228,
        1255
      ],
      "op": "SHL",
      "path": "8"
    },
    "1123": {
      "offset": [
        1220,
        1256
      ],
      "op": "SUB",
      "path": "8"
    },
    "1124": {
      "fn": "BTCUP.mint",
      "offset": [
        1220,
        1256
      ],
      "op": "AND",
      "path": "8"
    },
    "1125": {
      "fn": "BTCUP.mint",
      "offset": [
        1220,
        1256
      ],
      "op": "CALLER",
      "path": "8"
    },
    "1126": {
      "fn": "BTCUP.mint",
      "offset": [
        1220,
        1256
      ],
      "op": "EQ",
      "path": "8"
    },
    "1127": {
      "fn": "BTCUP.mint",
      "offset": [
        1220,
        1256
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x46F"
    },
    "1130": {
      "offset": [
        1220,
        1256
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "1131": {
      "fn": "BTCUP.mint",
      "offset": [
        952,
        978
      ],
      "op": "PUSH1",
      "path": "8",
      "statement": 16,
      "value": "0x0"
    },
    "1133": {
      "fn": "BTCUP.mint",
      "offset": [
        958,
        967
      ],
      "op": "DUP1",
      "path": "8"
    },
    "1134": {
      "fn": "BTCUP.mint",
      "offset": [
        969,
        977
      ],
      "op": "REVERT",
      "path": "8"
    },
    "1135": {
      "fn": "BTCUP.mint",
      "offset": [
        952,
        957
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "1136": {
      "fn": "BTCUP.mint",
      "jump": "i",
      "offset": [
        952,
        978
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x3D4"
    },
    "1139": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6376,
        6781
      ],
      "op": "ORIGIN",
      "path": "1"
    },
    "1140": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6469,
        6473
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1141": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6485,
        6509
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x804"
    },
    "1144": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6523
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1145": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1146": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6524,
        6536
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1148": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6524,
        6534
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1149": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6524,
        6536
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1151": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6524,
        6536
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1153": {
      "op": "PUSH2",
      "value": "0x488"
    },
    "1156": {
      "op": "PUSH2",
      "value": "0x531"
    },
    "1159": {
      "op": "JUMP"
    },
    "1160": {
      "op": "JUMPDEST"
    },
    "1161": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1163": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1165": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "1167": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "SHL",
      "path": "1"
    },
    "1168": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "SUB",
      "path": "1"
    },
    "1169": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1170": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1171": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "AND",
      "path": "1"
    },
    "1172": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1173": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1174": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1176": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1177": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1178": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "ADD",
      "path": "1"
    },
    "1179": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "1180": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1181": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "1182": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1183": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1185": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1186": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1187": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "ADD",
      "path": "1"
    },
    "1188": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6546
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1190": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6546
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1191": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6546
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1192": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6546
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1193": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6546
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1194": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6546
      ],
      "op": "DUP9",
      "path": "1"
    },
    "1195": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6546
      ],
      "op": "AND",
      "path": "1"
    },
    "1196": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6546
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1197": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6546
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1198": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6546
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "1199": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6546
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1200": {
      "op": "SWAP1"
    },
    "1201": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6564,
        6599
      ],
      "op": "KECCAK256",
      "path": "1",
      "statement": 17
    },
    "1202": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6564,
        6599
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1203": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6564,
        6599
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1204": {
      "branch": 49,
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6564,
        6599
      ],
      "op": "POP",
      "path": "1"
    },
    "1205": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6556,
        6641
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1206": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6556,
        6641
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1207": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6556,
        6641
      ],
      "op": "LT",
      "path": "1"
    },
    "1208": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6556,
        6641
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "1209": {
      "op": "PUSH2",
      "value": "0x4D4"
    },
    "1212": {
      "op": "JUMPI"
    },
    "1213": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1215": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6556,
        6641
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1216": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6556,
        6641
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0x461BCD"
    },
    "1220": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6556,
        6641
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE5"
    },
    "1222": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6556,
        6641
      ],
      "op": "SHL",
      "path": "1"
    },
    "1223": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6556,
        6641
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1224": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6556,
        6641
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1225": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6556,
        6641
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1227": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6556,
        6641
      ],
      "op": "ADD",
      "path": "1"
    },
    "1228": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6556,
        6641
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x332"
    },
    "1231": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6675,
        6742
      ],
      "op": "SWAP1",
      "path": "1",
      "statement": 18
    },
    "1232": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6684,
        6696
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xC77"
    },
    "1235": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6684,
        6694
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1236": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6684,
        6696
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1237": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6684,
        6696
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x4E8"
    },
    "1240": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6698,
        6705
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x4DF"
    },
    "1243": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6726,
        6741
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x531"
    },
    "1246": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6707,
        6723
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1247": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6707,
        6741
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1248": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6675,
        6683
      ],
      "op": "DUP6",
      "path": "1"
    },
    "1249": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6675,
        6742
      ],
      "op": "DUP6",
      "path": "1"
    },
    "1250": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6675,
        6742
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1251": {
      "op": "SUB"
    },
    "1252": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6770,
        6774
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 19,
      "value": "0x535"
    },
    "1255": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6770,
        6774
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1256": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6376,
        6781
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1257": {
      "op": "POP"
    },
    "1258": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1260": {
      "op": "SWAP4"
    },
    "1261": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "o",
      "offset": [
        6376,
        6781
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "1262": {
      "fn": "ERC20.transfer",
      "offset": [
        3654,
        3826
      ],
      "op": "POP",
      "path": "1"
    },
    "1263": {
      "fn": "ERC20.transfer",
      "offset": [
        3740,
        3744
      ],
      "op": "POP",
      "path": "1"
    },
    "1264": {
      "fn": "ERC20.transfer",
      "offset": [
        3756,
        3798
      ],
      "op": "POP",
      "path": "1",
      "statement": 20
    },
    "1265": {
      "fn": "ERC20.transfer",
      "offset": [
        3766,
        3778
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1266": {
      "fn": "ERC20.transfer",
      "offset": [
        3766,
        3776
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1267": {
      "fn": "ERC20.transfer",
      "jump": "i",
      "offset": [
        3766,
        3778
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1269": {
      "fn": "ERC20.transfer",
      "offset": [
        3766,
        3778
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2B2"
    },
    "1272": {
      "fn": "ERC20.transfer",
      "offset": [
        3780,
        3789
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x4FF"
    },
    "1275": {
      "fn": "ERC20.transfer",
      "offset": [
        3791,
        3797
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x531"
    },
    "1278": {
      "fn": "ERC20.transfer",
      "offset": [
        3756,
        3765
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1279": {
      "fn": "ERC20.transfer",
      "jump": "i",
      "offset": [
        3756,
        3798
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1280": {
      "fn": "ERC20.allowance",
      "offset": [
        3884,
        4033
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1281": {
      "op": "DUP5"
    },
    "1282": {
      "op": "PUSH2",
      "value": "0x5E9"
    },
    "1285": {
      "op": "JUMP"
    },
    "1286": {
      "op": "JUMPDEST"
    },
    "1287": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1289": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 21,
      "value": "0x1"
    },
    "1291": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "1293": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "SHL",
      "path": "1"
    },
    "1294": {
      "fn": "ERC20.allowance",
      "offset": [
        3973,
        3980
      ],
      "op": "SUB",
      "path": "1"
    },
    "1295": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1296": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1297": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "AND",
      "path": "1"
    },
    "1298": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1300": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1301": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1302": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1303": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1305": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1307": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1308": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1309": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1310": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4026
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1312": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4026
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1313": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4026
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1314": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4026
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1315": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4026
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "1316": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4026
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1317": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4026
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "1318": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4026
      ],
      "op": "AND",
      "path": "1"
    },
    "1319": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4026
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1320": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4026
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1321": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4026
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1322": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4026
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1323": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4026
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1324": {
      "fn": "ERC20.allowance",
      "jump": "o",
      "offset": [
        3884,
        4033
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1325": {
      "fn": "Context._msgSender",
      "offset": [
        586,
        682
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "1326": {
      "fn": "Context._msgSender",
      "offset": [
        665,
        675
      ],
      "op": "SLOAD",
      "path": "5",
      "statement": 22
    },
    "1327": {
      "fn": "Context._msgSender",
      "offset": [
        586,
        682
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1328": {
      "fn": "Context._msgSender",
      "jump": "o",
      "offset": [
        586,
        682
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1329": {
      "fn": "ERC20._approve",
      "offset": [
        9952,
        10322
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1330": {
      "op": "CALLER"
    },
    "1331": {
      "op": "SWAP1"
    },
    "1332": {
      "op": "JUMP"
    },
    "1333": {
      "op": "JUMPDEST"
    },
    "1334": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1336": {
      "fn": "ERC20._approve",
      "offset": [
        10083,
        10102
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 23,
      "value": "0x1"
    },
    "1338": {
      "branch": 50,
      "fn": "ERC20._approve",
      "offset": [
        10083,
        10102
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "1340": {
      "fn": "ERC20._approve",
      "offset": [
        10075,
        10143
      ],
      "op": "SHL",
      "path": "1"
    },
    "1341": {
      "fn": "ERC20._approve",
      "offset": [
        10075,
        10143
      ],
      "op": "SUB",
      "path": "1"
    },
    "1342": {
      "fn": "ERC20._approve",
      "offset": [
        10075,
        10143
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1343": {
      "fn": "ERC20._approve",
      "offset": [
        10075,
        10143
      ],
      "op": "AND",
      "path": "1"
    },
    "1344": {
      "op": "PUSH2",
      "value": "0x55B"
    },
    "1347": {
      "op": "JUMPI"
    },
    "1348": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1350": {
      "fn": "ERC20._approve",
      "offset": [
        10075,
        10143
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1351": {
      "fn": "ERC20._approve",
      "offset": [
        10075,
        10143
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0x461BCD"
    },
    "1355": {
      "fn": "ERC20._approve",
      "offset": [
        10075,
        10143
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE5"
    },
    "1357": {
      "fn": "ERC20._approve",
      "offset": [
        10075,
        10143
      ],
      "op": "SHL",
      "path": "1"
    },
    "1358": {
      "fn": "ERC20._approve",
      "offset": [
        10075,
        10143
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1359": {
      "fn": "ERC20._approve",
      "offset": [
        10075,
        10143
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1360": {
      "fn": "ERC20._approve",
      "offset": [
        10075,
        10143
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1362": {
      "fn": "ERC20._approve",
      "jump": "i",
      "offset": [
        10075,
        10143
      ],
      "op": "ADD",
      "path": "1"
    },
    "1363": {
      "fn": "ERC20._approve",
      "offset": [
        10075,
        10143
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x332"
    },
    "1366": {
      "op": "SWAP1"
    },
    "1367": {
      "op": "PUSH2",
      "value": "0xC33"
    },
    "1370": {
      "op": "JUMP"
    },
    "1371": {
      "op": "JUMPDEST"
    },
    "1372": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1374": {
      "fn": "ERC20._approve",
      "offset": [
        10161,
        10182
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 24,
      "value": "0x1"
    },
    "1376": {
      "branch": 51,
      "fn": "ERC20._approve",
      "offset": [
        10161,
        10182
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "1378": {
      "fn": "ERC20._approve",
      "offset": [
        10153,
        10221
      ],
      "op": "SHL",
      "path": "1"
    },
    "1379": {
      "fn": "ERC20._approve",
      "offset": [
        10153,
        10221
      ],
      "op": "SUB",
      "path": "1"
    },
    "1380": {
      "fn": "ERC20._approve",
      "offset": [
        10153,
        10221
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1381": {
      "fn": "ERC20._approve",
      "offset": [
        10153,
        10221
      ],
      "op": "AND",
      "path": "1"
    },
    "1382": {
      "op": "PUSH2",
      "value": "0x581"
    },
    "1385": {
      "op": "JUMPI"
    },
    "1386": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1388": {
      "fn": "ERC20._approve",
      "offset": [
        10153,
        10221
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1389": {
      "fn": "ERC20._approve",
      "offset": [
        10153,
        10221
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0x461BCD"
    },
    "1393": {
      "fn": "ERC20._approve",
      "offset": [
        10153,
        10221
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE5"
    },
    "1395": {
      "fn": "ERC20._approve",
      "offset": [
        10153,
        10221
      ],
      "op": "SHL",
      "path": "1"
    },
    "1396": {
      "fn": "ERC20._approve",
      "offset": [
        10153,
        10221
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1397": {
      "fn": "ERC20._approve",
      "offset": [
        10153,
        10221
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1398": {
      "fn": "ERC20._approve",
      "offset": [
        10153,
        10221
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1400": {
      "fn": "ERC20._approve",
      "jump": "i",
      "offset": [
        10153,
        10221
      ],
      "op": "ADD",
      "path": "1"
    },
    "1401": {
      "fn": "ERC20._approve",
      "offset": [
        10153,
        10221
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x332"
    },
    "1404": {
      "op": "SWAP1"
    },
    "1405": {
      "op": "PUSH2",
      "value": "0xA99"
    },
    "1408": {
      "op": "JUMP"
    },
    "1409": {
      "op": "JUMPDEST"
    },
    "1410": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1412": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 25,
      "value": "0x1"
    },
    "1414": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "1416": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "SHL",
      "path": "1"
    },
    "1417": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "SUB",
      "path": "1"
    },
    "1418": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1419": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1420": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "AND",
      "path": "1"
    },
    "1421": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1423": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1424": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1425": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1426": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1428": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1430": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1431": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1432": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1433": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1435": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1436": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1437": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1438": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "1439": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "DUP8",
      "path": "1"
    },
    "1440": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "AND",
      "path": "1"
    },
    "1441": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1442": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1443": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1444": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "1445": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1446": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1447": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1448": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10268
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1449": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10268
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1450": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10268
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1451": {
      "fn": "ERC20._approve",
      "offset": [
        10283,
        10315
      ],
      "op": "KECCAK256",
      "path": "1",
      "statement": 26
    },
    "1452": {
      "fn": "ERC20._approve",
      "offset": [
        10283,
        10315
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1453": {
      "fn": "ERC20._approve",
      "offset": [
        10283,
        10315
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1454": {
      "fn": "ERC20._approve",
      "offset": [
        10283,
        10315
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "1455": {
      "fn": "ERC20._approve",
      "offset": [
        10283,
        10315
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1456": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10268
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
    },
    "1489": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10268
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1490": {
      "fn": "ERC20._approve",
      "offset": [
        10283,
        10315
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x5DC"
    },
    "1493": {
      "fn": "ERC20._approve",
      "jump": "i",
      "offset": [
        10283,
        10315
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1494": {
      "fn": "ERC20._approve",
      "offset": [
        10283,
        10315
      ],
      "op": "DUP6",
      "path": "1"
    },
    "1495": {
      "fn": "ERC20._approve",
      "offset": [
        10283,
        10315
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1496": {
      "fn": "ERC20._approve",
      "offset": [
        10283,
        10315
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xCF3"
    },
    "1499": {
      "fn": "ERC20._approve",
      "offset": [
        10283,
        10315
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1500": {
      "fn": "ERC20._approve",
      "offset": [
        10283,
        10315
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1501": {
      "fn": "ERC20._approve",
      "offset": [
        10283,
        10315
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1503": {
      "fn": "ERC20._approve",
      "offset": [
        10283,
        10315
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1504": {
      "fn": "ERC20._approve",
      "offset": [
        10283,
        10315
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1505": {
      "fn": "ERC20._approve",
      "offset": [
        9952,
        10322
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1506": {
      "fn": "ERC20._approve",
      "offset": [
        9952,
        10322
      ],
      "op": "SUB",
      "path": "1"
    },
    "1507": {
      "fn": "ERC20._approve",
      "offset": [
        9952,
        10322
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1508": {
      "fn": "ERC20._approve",
      "jump": "o",
      "offset": [
        9952,
        10322
      ],
      "op": "LOG3",
      "path": "1"
    },
    "1509": {
      "fn": "ERC20._transfer",
      "offset": [
        7255,
        7968
      ],
      "op": "POP",
      "path": "1"
    },
    "1510": {
      "op": "POP"
    },
    "1511": {
      "op": "POP"
    },
    "1512": {
      "op": "JUMP"
    },
    "1513": {
      "op": "JUMPDEST"
    },
    "1514": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1516": {
      "fn": "ERC20._transfer",
      "offset": [
        7390,
        7410
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 27,
      "value": "0x1"
    },
    "1518": {
      "branch": 52,
      "fn": "ERC20._transfer",
      "offset": [
        7390,
        7410
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "1520": {
      "fn": "ERC20._transfer",
      "offset": [
        7382,
        7452
      ],
      "op": "SHL",
      "path": "1"
    },
    "1521": {
      "fn": "ERC20._transfer",
      "offset": [
        7382,
        7452
      ],
      "op": "SUB",
      "path": "1"
    },
    "1522": {
      "fn": "ERC20._transfer",
      "offset": [
        7382,
        7452
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1523": {
      "fn": "ERC20._transfer",
      "offset": [
        7382,
        7452
      ],
      "op": "AND",
      "path": "1"
    },
    "1524": {
      "op": "PUSH2",
      "value": "0x60F"
    },
    "1527": {
      "op": "JUMPI"
    },
    "1528": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1530": {
      "fn": "ERC20._transfer",
      "offset": [
        7382,
        7452
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1531": {
      "fn": "ERC20._transfer",
      "offset": [
        7382,
        7452
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0x461BCD"
    },
    "1535": {
      "fn": "ERC20._transfer",
      "offset": [
        7382,
        7452
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE5"
    },
    "1537": {
      "fn": "ERC20._transfer",
      "offset": [
        7382,
        7452
      ],
      "op": "SHL",
      "path": "1"
    },
    "1538": {
      "fn": "ERC20._transfer",
      "offset": [
        7382,
        7452
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1539": {
      "fn": "ERC20._transfer",
      "offset": [
        7382,
        7452
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1540": {
      "fn": "ERC20._transfer",
      "offset": [
        7382,
        7452
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1542": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7382,
        7452
      ],
      "op": "ADD",
      "path": "1"
    },
    "1543": {
      "fn": "ERC20._transfer",
      "offset": [
        7382,
        7452
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x332"
    },
    "1546": {
      "op": "SWAP1"
    },
    "1547": {
      "op": "PUSH2",
      "value": "0xBEE"
    },
    "1550": {
      "op": "JUMP"
    },
    "1551": {
      "op": "JUMPDEST"
    },
    "1552": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1554": {
      "fn": "ERC20._transfer",
      "offset": [
        7470,
        7493
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 28,
      "value": "0x1"
    },
    "1556": {
      "branch": 53,
      "fn": "ERC20._transfer",
      "offset": [
        7470,
        7493
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "1558": {
      "fn": "ERC20._transfer",
      "offset": [
        7462,
        7533
      ],
      "op": "SHL",
      "path": "1"
    },
    "1559": {
      "fn": "ERC20._transfer",
      "offset": [
        7462,
        7533
      ],
      "op": "SUB",
      "path": "1"
    },
    "1560": {
      "fn": "ERC20._transfer",
      "offset": [
        7462,
        7533
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1561": {
      "fn": "ERC20._transfer",
      "offset": [
        7462,
        7533
      ],
      "op": "AND",
      "path": "1"
    },
    "1562": {
      "op": "PUSH2",
      "value": "0x635"
    },
    "1565": {
      "op": "JUMPI"
    },
    "1566": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1568": {
      "fn": "ERC20._transfer",
      "offset": [
        7462,
        7533
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1569": {
      "fn": "ERC20._transfer",
      "offset": [
        7462,
        7533
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0x461BCD"
    },
    "1573": {
      "fn": "ERC20._transfer",
      "offset": [
        7462,
        7533
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE5"
    },
    "1575": {
      "fn": "ERC20._transfer",
      "offset": [
        7462,
        7533
      ],
      "op": "SHL",
      "path": "1"
    },
    "1576": {
      "fn": "ERC20._transfer",
      "offset": [
        7462,
        7533
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1577": {
      "fn": "ERC20._transfer",
      "offset": [
        7462,
        7533
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1578": {
      "fn": "ERC20._transfer",
      "offset": [
        7462,
        7533
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1580": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7462,
        7533
      ],
      "op": "ADD",
      "path": "1"
    },
    "1581": {
      "fn": "ERC20._transfer",
      "offset": [
        7462,
        7533
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x332"
    },
    "1584": {
      "fn": "ERC20._transfer",
      "offset": [
        7544,
        7591
      ],
      "op": "SWAP1",
      "path": "1",
      "statement": 29
    },
    "1585": {
      "fn": "ERC20._transfer",
      "offset": [
        7565,
        7571
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xA14"
    },
    "1588": {
      "fn": "ERC20._transfer",
      "offset": [
        7573,
        7582
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1589": {
      "fn": "ERC20._transfer",
      "offset": [
        7584,
        7590
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1590": {
      "fn": "ERC20._transfer",
      "offset": [
        7544,
        7564
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x640"
    },
    "1593": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7544,
        7591
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1594": {
      "fn": "ERC20._transfer",
      "offset": [
        7544,
        7591
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1595": {
      "op": "DUP4"
    },
    "1596": {
      "op": "PUSH2",
      "value": "0x444"
    },
    "1599": {
      "op": "JUMP"
    },
    "1600": {
      "op": "JUMPDEST"
    },
    "1601": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1603": {
      "fn": "ERC20._transfer",
      "offset": [
        7626,
        7643
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1605": {
      "fn": "ERC20._transfer",
      "offset": [
        7626,
        7643
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "1607": {
      "fn": "ERC20._transfer",
      "offset": [
        7602,
        7623
      ],
      "op": "SHL",
      "path": "1"
    },
    "1608": {
      "fn": "ERC20._transfer",
      "offset": [
        7626,
        7643
      ],
      "op": "SUB",
      "path": "1"
    },
    "1609": {
      "fn": "ERC20._transfer",
      "offset": [
        7626,
        7643
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1610": {
      "fn": "ERC20._transfer",
      "offset": [
        7626,
        7643
      ],
      "op": "AND",
      "path": "1"
    },
    "1611": {
      "fn": "ERC20._transfer",
      "offset": [
        7626,
        7643
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1613": {
      "fn": "ERC20._transfer",
      "offset": [
        7626,
        7643
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1614": {
      "fn": "ERC20._transfer",
      "offset": [
        7626,
        7643
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1615": {
      "fn": "ERC20._transfer",
      "offset": [
        7626,
        7643
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1616": {
      "fn": "ERC20._transfer",
      "offset": [
        7626,
        7643
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1618": {
      "fn": "ERC20._transfer",
      "offset": [
        7626,
        7643
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1619": {
      "fn": "ERC20._transfer",
      "offset": [
        7626,
        7643
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1620": {
      "fn": "ERC20._transfer",
      "offset": [
        7626,
        7643
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1621": {
      "fn": "ERC20._transfer",
      "offset": [
        7661,
        7684
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 30,
      "value": "0x40"
    },
    "1623": {
      "fn": "ERC20._transfer",
      "offset": [
        7661,
        7684
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1624": {
      "fn": "ERC20._transfer",
      "offset": [
        7661,
        7684
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1625": {
      "branch": 54,
      "fn": "ERC20._transfer",
      "offset": [
        7661,
        7684
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1626": {
      "fn": "ERC20._transfer",
      "offset": [
        7653,
        7727
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1627": {
      "fn": "ERC20._transfer",
      "offset": [
        7653,
        7727
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1628": {
      "fn": "ERC20._transfer",
      "offset": [
        7653,
        7727
      ],
      "op": "LT",
      "path": "1"
    },
    "1629": {
      "fn": "ERC20._transfer",
      "offset": [
        7653,
        7727
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "1630": {
      "op": "PUSH2",
      "value": "0x679"
    },
    "1633": {
      "op": "JUMPI"
    },
    "1634": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1636": {
      "fn": "ERC20._transfer",
      "offset": [
        7653,
        7727
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1637": {
      "fn": "ERC20._transfer",
      "offset": [
        7653,
        7727
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0x461BCD"
    },
    "1641": {
      "fn": "ERC20._transfer",
      "offset": [
        7653,
        7727
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE5"
    },
    "1643": {
      "fn": "ERC20._transfer",
      "offset": [
        7653,
        7727
      ],
      "op": "SHL",
      "path": "1"
    },
    "1644": {
      "fn": "ERC20._transfer",
      "offset": [
        7653,
        7727
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1645": {
      "fn": "ERC20._transfer",
      "offset": [
        7653,
        7727
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1646": {
      "fn": "ERC20._transfer",
      "offset": [
        7653,
        7727
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1648": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7653,
        7727
      ],
      "op": "ADD",
      "path": "1"
    },
    "1649": {
      "fn": "ERC20._transfer",
      "offset": [
        7653,
        7727
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x332"
    },
    "1652": {
      "op": "SWAP1"
    },
    "1653": {
      "op": "PUSH2",
      "value": "0xADB"
    },
    "1656": {
      "op": "JUMP"
    },
    "1657": {
      "op": "JUMPDEST"
    },
    "1658": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1660": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 31,
      "value": "0x1"
    },
    "1662": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "1664": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "SHL",
      "path": "1"
    },
    "1665": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7770
      ],
      "op": "SUB",
      "path": "1"
    },
    "1666": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1667": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "DUP6",
      "path": "1"
    },
    "1668": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "AND",
      "path": "1"
    },
    "1669": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1671": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1672": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1673": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1674": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1676": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1677": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1678": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1679": {
      "fn": "ERC20._transfer",
      "offset": [
        7781,
        7803
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1681": {
      "fn": "ERC20._transfer",
      "offset": [
        7781,
        7803
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1682": {
      "fn": "ERC20._transfer",
      "offset": [
        7781,
        7803
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1683": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7803
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1684": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7803
      ],
      "op": "DUP6",
      "path": "1"
    },
    "1685": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7843
      ],
      "op": "DUP6",
      "path": "1",
      "statement": 32
    },
    "1686": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7843
      ],
      "op": "SUB",
      "path": "1"
    },
    "1687": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7843
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1688": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7843
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "1689": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7843
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1690": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7843
      ],
      "op": "DUP6",
      "path": "1"
    },
    "1691": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7843
      ],
      "op": "AND",
      "path": "1"
    },
    "1692": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7843
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1693": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7853
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1694": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7853
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1695": {
      "fn": "ERC20._transfer",
      "offset": [
        7781,
        7803
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1696": {
      "fn": "ERC20._transfer",
      "offset": [
        7781,
        7803
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1697": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7770
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1698": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7853
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1699": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7853
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1700": {
      "fn": "ERC20._transfer",
      "offset": [
        7781,
        7803
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "1701": {
      "fn": "ERC20._transfer",
      "offset": [
        7781,
        7803
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1702": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7853
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x6B0"
    },
    "1705": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7823,
        7853
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1706": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7853
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1707": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7853
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1708": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7853
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xD0A"
    },
    "1711": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7853
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1712": {
      "op": "JUMPDEST"
    },
    "1713": {
      "op": "SWAP3"
    },
    "1714": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "POP",
      "path": "1",
      "statement": 33
    },
    "1715": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "POP",
      "path": "1"
    },
    "1716": {
      "op": "DUP2"
    },
    "1717": {
      "op": "SWAP1"
    },
    "1718": {
      "op": "SSTORE"
    },
    "1719": {
      "op": "POP"
    },
    "1720": {
      "op": "DUP3"
    },
    "1721": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1723": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1725": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "1727": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "SHL",
      "path": "1"
    },
    "1728": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "SUB",
      "path": "1"
    },
    "1729": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "AND",
      "path": "1"
    },
    "1730": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1731": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1733": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1735": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "1737": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "SHL",
      "path": "1"
    },
    "1738": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "SUB",
      "path": "1"
    },
    "1739": {
      "fn": "ERC20._transfer",
      "offset": [
        7897,
        7903
      ],
      "op": "AND",
      "path": "1"
    },
    "1740": {
      "fn": "ERC20._transfer",
      "offset": [
        7897,
        7903
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
    },
    "1773": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1774": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7869,
        7904
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1776": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1777": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x6FA"
    },
    "1780": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1781": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1782": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xCF3"
    },
    "1785": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1786": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1787": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1789": {
      "fn": "ERC20._transfer",
      "offset": [
        7915,
        7961
      ],
      "op": "MLOAD",
      "path": "1",
      "statement": 34
    },
    "1790": {
      "fn": "ERC20._transfer",
      "offset": [
        7935,
        7941
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1791": {
      "fn": "ERC20._transfer",
      "offset": [
        7943,
        7952
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1792": {
      "fn": "ERC20._transfer",
      "offset": [
        7954,
        7960
      ],
      "op": "SUB",
      "path": "1"
    },
    "1793": {
      "fn": "ERC20._transfer",
      "offset": [
        7915,
        7934
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1794": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7915,
        7961
      ],
      "op": "LOG3",
      "path": "1"
    },
    "1795": {
      "fn": "ERC20._transfer",
      "offset": [
        7915,
        7961
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x70D"
    },
    "1798": {
      "fn": "ERC20._transfer",
      "offset": [
        7255,
        7968
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1799": {
      "fn": "ERC20._transfer",
      "offset": [
        7255,
        7968
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1800": {
      "fn": "ERC20._transfer",
      "offset": [
        7255,
        7968
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1801": {
      "fn": "ERC20._transfer",
      "offset": [
        7255,
        7968
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x444"
    },
    "1804": {
      "fn": "ERC20._transfer",
      "jump": "o",
      "offset": [
        7255,
        7968
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1805": {
      "fn": "ERC20._burn",
      "offset": [
        8953,
        9529
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1806": {
      "op": "POP"
    },
    "1807": {
      "op": "POP"
    },
    "1808": {
      "op": "POP"
    },
    "1809": {
      "op": "POP"
    },
    "1810": {
      "op": "JUMP"
    },
    "1811": {
      "fn": "ERC20._burn",
      "offset": [
        9036,
        9057
      ],
      "op": "JUMPDEST",
      "path": "1",
      "statement": 35
    },
    "1812": {
      "branch": 55,
      "fn": "ERC20._burn",
      "offset": [
        9036,
        9057
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1814": {
      "fn": "ERC20._burn",
      "offset": [
        9028,
        9095
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1816": {
      "fn": "ERC20._burn",
      "offset": [
        9028,
        9095
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "1818": {
      "fn": "ERC20._burn",
      "offset": [
        9028,
        9095
      ],
      "op": "SHL",
      "path": "1"
    },
    "1819": {
      "fn": "ERC20._burn",
      "offset": [
        9028,
        9095
      ],
      "op": "SUB",
      "path": "1"
    },
    "1820": {
      "op": "DUP3"
    },
    "1821": {
      "op": "AND"
    },
    "1822": {
      "op": "PUSH2",
      "value": "0x739"
    },
    "1825": {
      "branch": 55,
      "fn": "ERC20._burn",
      "offset": [
        9028,
        9095
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1826": {
      "fn": "ERC20._burn",
      "offset": [
        9028,
        9095
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1828": {
      "fn": "ERC20._burn",
      "offset": [
        9028,
        9095
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1829": {
      "fn": "ERC20._burn",
      "offset": [
        9028,
        9095
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0x461BCD"
    },
    "1833": {
      "fn": "ERC20._burn",
      "offset": [
        9028,
        9095
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE5"
    },
    "1835": {
      "fn": "ERC20._burn",
      "offset": [
        9028,
        9095
      ],
      "op": "SHL",
      "path": "1"
    },
    "1836": {
      "fn": "ERC20._burn",
      "offset": [
        9028,
        9095
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1837": {
      "fn": "ERC20._burn",
      "jump": "i",
      "offset": [
        9028,
        9095
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1838": {
      "fn": "ERC20._burn",
      "offset": [
        9028,
        9095
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1840": {
      "fn": "ERC20._burn",
      "offset": [
        9106,
        9155
      ],
      "op": "ADD",
      "path": "1",
      "statement": 36
    },
    "1841": {
      "fn": "ERC20._burn",
      "offset": [
        9127,
        9134
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x332"
    },
    "1844": {
      "fn": "ERC20._burn",
      "offset": [
        9144,
        9145
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1845": {
      "fn": "ERC20._burn",
      "offset": [
        9148,
        9154
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xBAD"
    },
    "1848": {
      "fn": "ERC20._burn",
      "offset": [
        9106,
        9126
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1849": {
      "fn": "ERC20._burn",
      "jump": "i",
      "offset": [
        9106,
        9155
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1850": {
      "fn": "ERC20._burn",
      "offset": [
        9106,
        9155
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x745"
    },
    "1853": {
      "op": "DUP3"
    },
    "1854": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1856": {
      "op": "DUP4"
    },
    "1857": {
      "op": "PUSH2",
      "value": "0x444"
    },
    "1860": {
      "op": "JUMP"
    },
    "1861": {
      "fn": "ERC20._burn",
      "offset": [
        9191,
        9209
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1862": {
      "fn": "ERC20._burn",
      "offset": [
        9191,
        9209
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1864": {
      "fn": "ERC20._burn",
      "offset": [
        9166,
        9188
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1866": {
      "fn": "ERC20._burn",
      "offset": [
        9191,
        9209
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "1868": {
      "fn": "ERC20._burn",
      "offset": [
        9191,
        9209
      ],
      "op": "SHL",
      "path": "1"
    },
    "1869": {
      "fn": "ERC20._burn",
      "offset": [
        9191,
        9209
      ],
      "op": "SUB",
      "path": "1"
    },
    "1870": {
      "fn": "ERC20._burn",
      "offset": [
        9191,
        9209
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1871": {
      "fn": "ERC20._burn",
      "offset": [
        9191,
        9209
      ],
      "op": "AND",
      "path": "1"
    },
    "1872": {
      "fn": "ERC20._burn",
      "offset": [
        9191,
        9209
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1874": {
      "fn": "ERC20._burn",
      "offset": [
        9191,
        9209
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1875": {
      "fn": "ERC20._burn",
      "offset": [
        9191,
        9209
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1876": {
      "fn": "ERC20._burn",
      "offset": [
        9191,
        9209
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1877": {
      "fn": "ERC20._burn",
      "offset": [
        9191,
        9209
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1879": {
      "fn": "ERC20._burn",
      "offset": [
        9191,
        9209
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1880": {
      "fn": "ERC20._burn",
      "offset": [
        9227,
        9251
      ],
      "op": "SWAP1",
      "path": "1",
      "statement": 37
    },
    "1881": {
      "fn": "ERC20._burn",
      "offset": [
        9227,
        9251
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1882": {
      "fn": "ERC20._burn",
      "offset": [
        9227,
        9251
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1884": {
      "branch": 56,
      "fn": "ERC20._burn",
      "offset": [
        9227,
        9251
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1885": {
      "fn": "ERC20._burn",
      "offset": [
        9219,
        9290
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1886": {
      "fn": "ERC20._burn",
      "offset": [
        9219,
        9290
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1887": {
      "fn": "ERC20._burn",
      "offset": [
        9219,
        9290
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1888": {
      "fn": "ERC20._burn",
      "offset": [
        9219,
        9290
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1889": {
      "op": "LT"
    },
    "1890": {
      "op": "ISZERO"
    },
    "1891": {
      "op": "PUSH2",
      "value": "0x77E"
    },
    "1894": {
      "branch": 56,
      "fn": "ERC20._burn",
      "offset": [
        9219,
        9290
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1895": {
      "fn": "ERC20._burn",
      "offset": [
        9219,
        9290
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1897": {
      "fn": "ERC20._burn",
      "offset": [
        9219,
        9290
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1898": {
      "fn": "ERC20._burn",
      "offset": [
        9219,
        9290
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0x461BCD"
    },
    "1902": {
      "fn": "ERC20._burn",
      "offset": [
        9219,
        9290
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE5"
    },
    "1904": {
      "fn": "ERC20._burn",
      "offset": [
        9219,
        9290
      ],
      "op": "SHL",
      "path": "1"
    },
    "1905": {
      "fn": "ERC20._burn",
      "offset": [
        9219,
        9290
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1906": {
      "fn": "ERC20._burn",
      "jump": "i",
      "offset": [
        9219,
        9290
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1907": {
      "fn": "ERC20._burn",
      "offset": [
        9219,
        9290
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1909": {
      "op": "ADD"
    },
    "1910": {
      "op": "PUSH2",
      "value": "0x332"
    },
    "1913": {
      "op": "SWAP1"
    },
    "1914": {
      "op": "PUSH2",
      "value": "0xA57"
    },
    "1917": {
      "op": "JUMP"
    },
    "1918": {
      "fn": "ERC20._burn",
      "offset": [
        9324,
        9342
      ],
      "op": "JUMPDEST",
      "path": "1",
      "statement": 38
    },
    "1919": {
      "fn": "ERC20._burn",
      "offset": [
        9324,
        9342
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1921": {
      "fn": "ERC20._burn",
      "offset": [
        9324,
        9333
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1923": {
      "fn": "ERC20._burn",
      "offset": [
        9324,
        9342
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "1925": {
      "fn": "ERC20._burn",
      "offset": [
        9324,
        9342
      ],
      "op": "SHL",
      "path": "1"
    },
    "1926": {
      "fn": "ERC20._burn",
      "offset": [
        9324,
        9342
      ],
      "op": "SUB",
      "path": "1"
    },
    "1927": {
      "fn": "ERC20._burn",
      "offset": [
        9324,
        9342
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1928": {
      "fn": "ERC20._burn",
      "offset": [
        9324,
        9342
      ],
      "op": "AND",
      "path": "1"
    },
    "1929": {
      "fn": "ERC20._burn",
      "offset": [
        9324,
        9342
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1931": {
      "fn": "ERC20._burn",
      "offset": [
        9324,
        9342
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1932": {
      "fn": "ERC20._burn",
      "offset": [
        9324,
        9342
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1933": {
      "fn": "ERC20._burn",
      "offset": [
        9324,
        9342
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1934": {
      "fn": "ERC20._burn",
      "offset": [
        9324,
        9342
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1936": {
      "fn": "ERC20._burn",
      "offset": [
        9345,
        9368
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1937": {
      "fn": "ERC20._burn",
      "offset": [
        9345,
        9368
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1938": {
      "fn": "ERC20._burn",
      "offset": [
        9345,
        9368
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1939": {
      "fn": "ERC20._burn",
      "offset": [
        9324,
        9368
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1941": {
      "fn": "ERC20._burn",
      "offset": [
        9324,
        9368
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1942": {
      "fn": "ERC20._burn",
      "offset": [
        9388,
        9400
      ],
      "op": "KECCAK256",
      "path": "1",
      "statement": 39
    },
    "1943": {
      "fn": "ERC20._burn",
      "offset": [
        9388,
        9410
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1944": {
      "fn": "ERC20._burn",
      "offset": [
        9388,
        9410
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1945": {
      "fn": "ERC20._burn",
      "offset": [
        9345,
        9368
      ],
      "op": "SUB",
      "path": "1"
    },
    "1946": {
      "fn": "ERC20._burn",
      "offset": [
        9345,
        9368
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1947": {
      "fn": "ERC20._burn",
      "offset": [
        9324,
        9333
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "1948": {
      "fn": "ERC20._burn",
      "offset": [
        9388,
        9410
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2"
    },
    "1950": {
      "fn": "ERC20._burn",
      "offset": [
        9388,
        9410
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1951": {
      "fn": "ERC20._burn",
      "offset": [
        9345,
        9368
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1952": {
      "fn": "ERC20._burn",
      "offset": [
        9345,
        9368
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1953": {
      "fn": "ERC20._burn",
      "offset": [
        9388,
        9410
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "1954": {
      "fn": "ERC20._burn",
      "jump": "i",
      "offset": [
        9388,
        9410
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1955": {
      "fn": "ERC20._burn",
      "offset": [
        9388,
        9410
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x7AD"
    },
    "1958": {
      "fn": "ERC20._burn",
      "offset": [
        9388,
        9410
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1959": {
      "fn": "ERC20._burn",
      "offset": [
        9388,
        9410
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1960": {
      "fn": "ERC20._burn",
      "offset": [
        9388,
        9410
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1961": {
      "op": "PUSH2",
      "value": "0xD22"
    },
    "1964": {
      "op": "JUMP"
    },
    "1965": {
      "fn": "ERC20._burn",
      "offset": [
        9426,
        9463
      ],
      "op": "JUMPDEST",
      "path": "1",
      "statement": 40
    },
    "1966": {
      "fn": "ERC20._burn",
      "offset": [
        9426,
        9463
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1967": {
      "fn": "ERC20._burn",
      "offset": [
        9452,
        9453
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1968": {
      "fn": "ERC20._burn",
      "offset": [
        9452,
        9453
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "1969": {
      "op": "POP"
    },
    "1970": {
      "op": "POP"
    },
    "1971": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1973": {
      "op": "MLOAD"
    },
    "1974": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1976": {
      "fn": "ERC20._burn",
      "offset": [
        9426,
        9463
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1977": {
      "fn": "ERC20._burn",
      "offset": [
        9426,
        9463
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1979": {
      "fn": "ERC20._burn",
      "offset": [
        9426,
        9463
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1981": {
      "fn": "ERC20._burn",
      "offset": [
        9426,
        9463
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "1983": {
      "fn": "ERC20._burn",
      "offset": [
        9426,
        9463
      ],
      "op": "SHL",
      "path": "1"
    },
    "1984": {
      "fn": "ERC20._burn",
      "offset": [
        9426,
        9463
      ],
      "op": "SUB",
      "path": "1"
    },
    "1985": {
      "fn": "ERC20._burn",
      "offset": [
        9426,
        9463
      ],
      "op": "DUP6",
      "path": "1"
    },
    "1986": {
      "fn": "ERC20._burn",
      "offset": [
        9456,
        9462
      ],
      "op": "AND",
      "path": "1"
    },
    "1987": {
      "fn": "ERC20._burn",
      "offset": [
        9456,
        9462
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1988": {
      "fn": "ERC20._burn",
      "offset": [
        9426,
        9463
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
    },
    "2021": {
      "fn": "ERC20._burn",
      "jump": "i",
      "offset": [
        9426,
        9463
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2022": {
      "fn": "ERC20._burn",
      "offset": [
        9426,
        9463
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x7F0"
    },
    "2025": {
      "fn": "ERC20._burn",
      "offset": [
        9426,
        9463
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2026": {
      "fn": "ERC20._burn",
      "offset": [
        9426,
        9463
      ],
      "op": "DUP7",
      "path": "1"
    },
    "2027": {
      "fn": "ERC20._burn",
      "offset": [
        9426,
        9463
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2028": {
      "fn": "ERC20._burn",
      "offset": [
        9426,
        9463
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xCF3"
    },
    "2031": {
      "fn": "ERC20._burn",
      "offset": [
        9426,
        9463
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2032": {
      "fn": "ERC20._burn",
      "offset": [
        9426,
        9463
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2033": {
      "fn": "ERC20._burn",
      "offset": [
        9426,
        9463
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2035": {
      "fn": "ERC20._burn",
      "offset": [
        9474,
        9522
      ],
      "op": "MLOAD",
      "path": "1",
      "statement": 41
    },
    "2036": {
      "fn": "ERC20._burn",
      "offset": [
        9494,
        9501
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2037": {
      "fn": "ERC20._burn",
      "offset": [
        9511,
        9512
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2038": {
      "fn": "ERC20._burn",
      "offset": [
        9515,
        9521
      ],
      "op": "SUB",
      "path": "1"
    },
    "2039": {
      "fn": "ERC20._burn",
      "offset": [
        9474,
        9493
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2040": {
      "fn": "ERC20._burn",
      "jump": "i",
      "offset": [
        9474,
        9522
      ],
      "op": "LOG3",
      "path": "1"
    },
    "2041": {
      "fn": "ERC20._mint",
      "offset": [
        8244,
        8633
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x444"
    },
    "2044": {
      "op": "DUP4"
    },
    "2045": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2047": {
      "op": "DUP5"
    },
    "2048": {
      "op": "PUSH2",
      "value": "0x444"
    },
    "2051": {
      "op": "JUMP"
    },
    "2052": {
      "fn": "ERC20._mint",
      "offset": [
        8327,
        8348
      ],
      "op": "JUMPDEST",
      "path": "1",
      "statement": 42
    },
    "2053": {
      "branch": 57,
      "fn": "ERC20._mint",
      "offset": [
        8327,
        8348
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "2055": {
      "fn": "ERC20._mint",
      "offset": [
        8319,
        8384
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "2057": {
      "fn": "ERC20._mint",
      "offset": [
        8319,
        8384
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "2059": {
      "fn": "ERC20._mint",
      "offset": [
        8319,
        8384
      ],
      "op": "SHL",
      "path": "1"
    },
    "2060": {
      "fn": "ERC20._mint",
      "offset": [
        8319,
        8384
      ],
      "op": "SUB",
      "path": "1"
    },
    "2061": {
      "op": "DUP3"
    },
    "2062": {
      "op": "AND"
    },
    "2063": {
      "op": "PUSH2",
      "value": "0x82A"
    },
    "2066": {
      "branch": 57,
      "fn": "ERC20._mint",
      "offset": [
        8319,
        8384
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "2067": {
      "fn": "ERC20._mint",
      "offset": [
        8319,
        8384
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2069": {
      "fn": "ERC20._mint",
      "offset": [
        8319,
        8384
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2070": {
      "fn": "ERC20._mint",
      "offset": [
        8319,
        8384
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0x461BCD"
    },
    "2074": {
      "fn": "ERC20._mint",
      "offset": [
        8319,
        8384
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE5"
    },
    "2076": {
      "fn": "ERC20._mint",
      "offset": [
        8319,
        8384
      ],
      "op": "SHL",
      "path": "1"
    },
    "2077": {
      "fn": "ERC20._mint",
      "offset": [
        8319,
        8384
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2078": {
      "fn": "ERC20._mint",
      "jump": "i",
      "offset": [
        8319,
        8384
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2079": {
      "fn": "ERC20._mint",
      "offset": [
        8319,
        8384
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "2081": {
      "fn": "ERC20._mint",
      "offset": [
        8395,
        8444
      ],
      "op": "ADD",
      "path": "1",
      "statement": 43
    },
    "2082": {
      "fn": "ERC20._mint",
      "offset": [
        8424,
        8425
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x332"
    },
    "2085": {
      "fn": "ERC20._mint",
      "offset": [
        8428,
        8435
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2086": {
      "fn": "ERC20._mint",
      "offset": [
        8437,
        8443
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xCBC"
    },
    "2089": {
      "fn": "ERC20._mint",
      "offset": [
        8395,
        8415
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2090": {
      "fn": "ERC20._mint",
      "jump": "i",
      "offset": [
        8395,
        8444
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2091": {
      "fn": "ERC20._mint",
      "offset": [
        8395,
        8444
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x836"
    },
    "2094": {
      "fn": "ERC20._mint",
      "offset": [
        8471,
        8477
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 44,
      "value": "0x0"
    },
    "2096": {
      "fn": "ERC20._mint",
      "offset": [
        8455,
        8467
      ],
      "op": "DUP4",
      "path": "1"
    },
    "2097": {
      "fn": "ERC20._mint",
      "offset": [
        8455,
        8467
      ],
      "op": "DUP4",
      "path": "1"
    },
    "2098": {
      "fn": "ERC20._mint",
      "offset": [
        8455,
        8477
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x444"
    },
    "2101": {
      "fn": "ERC20._mint",
      "offset": [
        8455,
        8477
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2102": {
      "fn": "ERC20._mint",
      "offset": [
        8455,
        8477
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2103": {
      "fn": "ERC20._mint",
      "offset": [
        8455,
        8477
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2104": {
      "fn": "ERC20._mint",
      "offset": [
        8455,
        8477
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2"
    },
    "2106": {
      "fn": "ERC20._mint",
      "offset": [
        8455,
        8477
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2108": {
      "fn": "ERC20._mint",
      "offset": [
        8455,
        8477
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2109": {
      "fn": "ERC20._mint",
      "jump": "i",
      "offset": [
        8455,
        8477
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2110": {
      "fn": "ERC20._mint",
      "offset": [
        8455,
        8477
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "2111": {
      "fn": "ERC20._mint",
      "offset": [
        8455,
        8477
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x848"
    },
    "2114": {
      "fn": "ERC20._mint",
      "offset": [
        8455,
        8477
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2115": {
      "fn": "ERC20._mint",
      "offset": [
        8455,
        8477
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2116": {
      "op": "PUSH2",
      "value": "0xD0A"
    },
    "2119": {
      "op": "JUMP"
    },
    "2120": {
      "op": "JUMPDEST"
    },
    "2121": {
      "op": "SWAP1"
    },
    "2122": {
      "op": "SWAP2"
    },
    "2123": {
      "op": "SSTORE"
    },
    "2124": {
      "op": "POP"
    },
    "2125": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8505
      ],
      "op": "POP",
      "path": "1",
      "statement": 45
    },
    "2126": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8505
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "2128": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8496
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "2130": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8505
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "2132": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8505
      ],
      "op": "SHL",
      "path": "1"
    },
    "2133": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8505
      ],
      "op": "SUB",
      "path": "1"
    },
    "2134": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8505
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2135": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8505
      ],
      "op": "AND",
      "path": "1"
    },
    "2136": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8505
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2138": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8505
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2139": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8505
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2140": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8505
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2141": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8505
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2143": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8515
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2144": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8515
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2145": {
      "fn": "ERC20._mint",
      "offset": [
        8509,
        8515
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2146": {
      "fn": "ERC20._mint",
      "offset": [
        8509,
        8515
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2148": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8496
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2149": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8515
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "2150": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8515
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2151": {
      "fn": "ERC20._mint",
      "offset": [
        8509,
        8515
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "2152": {
      "fn": "ERC20._mint",
      "offset": [
        8509,
        8515
      ],
      "op": "DUP4",
      "path": "1"
    },
    "2153": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8515
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "2154": {
      "fn": "ERC20._mint",
      "jump": "i",
      "offset": [
        8487,
        8515
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2155": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8515
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x875"
    },
    "2158": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8515
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2159": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8515
      ],
      "op": "DUP5",
      "path": "1"
    },
    "2160": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8515
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2161": {
      "op": "PUSH2",
      "value": "0xD0A"
    },
    "2164": {
      "op": "JUMP"
    },
    "2165": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "JUMPDEST",
      "path": "1",
      "statement": 46
    },
    "2166": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2167": {
      "op": "SWAP2"
    },
    "2168": {
      "op": "SSTORE"
    },
    "2169": {
      "op": "POP"
    },
    "2170": {
      "op": "POP"
    },
    "2171": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2173": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2174": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "2176": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "2178": {
      "fn": "ERC20._mint",
      "offset": [
        8547,
        8548
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "2180": {
      "fn": "ERC20._mint",
      "offset": [
        8547,
        8548
      ],
      "op": "SHL",
      "path": "1"
    },
    "2181": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "SUB",
      "path": "1"
    },
    "2182": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "DUP4",
      "path": "1"
    },
    "2183": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "AND",
      "path": "1"
    },
    "2184": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2185": {
      "fn": "ERC20._mint",
      "offset": [
        8560,
        8566
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2187": {
      "fn": "ERC20._mint",
      "offset": [
        8560,
        8566
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2188": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
    },
    "2221": {
      "fn": "ERC20._mint",
      "jump": "i",
      "offset": [
        8530,
        8567
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2222": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x8B8"
    },
    "2225": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2226": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "DUP6",
      "path": "1"
    },
    "2227": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2228": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xCF3"
    },
    "2231": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2232": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2233": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2235": {
      "fn": "ERC20._mint",
      "offset": [
        8578,
        8626
      ],
      "op": "MLOAD",
      "path": "1",
      "statement": 47
    },
    "2236": {
      "fn": "ERC20._mint",
      "offset": [
        8606,
        8607
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2237": {
      "fn": "ERC20._mint",
      "offset": [
        8610,
        8617
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2238": {
      "fn": "ERC20._mint",
      "offset": [
        8619,
        8625
      ],
      "op": "SUB",
      "path": "1"
    },
    "2239": {
      "fn": "ERC20._mint",
      "offset": [
        8578,
        8597
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2240": {
      "fn": "ERC20._mint",
      "jump": "i",
      "offset": [
        8578,
        8626
      ],
      "op": "LOG3",
      "path": "1"
    },
    "2241": {
      "fn": "ERC20._mint",
      "offset": [
        8578,
        8626
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x8CC"
    },
    "2244": {
      "fn": "ERC20._mint",
      "offset": [
        8244,
        8633
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2246": {
      "fn": "ERC20._mint",
      "offset": [
        8244,
        8633
      ],
      "op": "DUP4",
      "path": "1"
    },
    "2247": {
      "fn": "ERC20._mint",
      "jump": "o",
      "offset": [
        8244,
        8633
      ],
      "op": "DUP4",
      "path": "1"
    },
    "2248": {
      "op": "PUSH2",
      "value": "0x444"
    },
    "2251": {
      "op": "JUMP"
    },
    "2252": {
      "op": "JUMPDEST"
    },
    "2253": {
      "op": "POP"
    },
    "2254": {
      "op": "POP"
    },
    "2255": {
      "op": "JUMP"
    },
    "2256": {
      "op": "JUMPDEST"
    },
    "2257": {
      "op": "DUP1"
    },
    "2258": {
      "op": "CALLDATALOAD"
    },
    "2259": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2261": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2263": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2265": {
      "op": "SHL"
    },
    "2266": {
      "op": "SUB"
    },
    "2267": {
      "op": "DUP2"
    },
    "2268": {
      "op": "AND"
    },
    "2269": {
      "op": "DUP2"
    },
    "2270": {
      "op": "EQ"
    },
    "2271": {
      "op": "PUSH2",
      "value": "0x3F1"
    },
    "2274": {
      "op": "JUMPI"
    },
    "2275": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2277": {
      "op": "DUP1"
    },
    "2278": {
      "op": "REVERT"
    },
    "2279": {
      "op": "JUMPDEST"
    },
    "2280": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2282": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2284": {
      "op": "DUP3"
    },
    "2285": {
      "op": "DUP5"
    },
    "2286": {
      "op": "SUB"
    },
    "2287": {
      "op": "SLT"
    },
    "2288": {
      "op": "ISZERO"
    },
    "2289": {
      "op": "PUSH2",
      "value": "0x8F8"
    },
    "2292": {
      "op": "JUMPI"
    },
    "2293": {
      "op": "DUP1"
    },
    "2294": {
      "jump": "i",
      "op": "DUP2"
    },
    "2295": {
      "op": "REVERT"
    },
    "2296": {
      "op": "JUMPDEST"
    },
    "2297": {
      "op": "PUSH2",
      "value": "0x901"
    },
    "2300": {
      "op": "DUP3"
    },
    "2301": {
      "op": "PUSH2",
      "value": "0x8D0"
    },
    "2304": {
      "op": "JUMP"
    },
    "2305": {
      "jump": "o",
      "op": "JUMPDEST"
    },
    "2306": {
      "op": "SWAP4"
    },
    "2307": {
      "op": "SWAP3"
    },
    "2308": {
      "op": "POP"
    },
    "2309": {
      "op": "POP"
    },
    "2310": {
      "op": "POP"
    },
    "2311": {
      "op": "JUMP"
    },
    "2312": {
      "op": "JUMPDEST"
    },
    "2313": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2315": {
      "op": "DUP1"
    },
    "2316": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2318": {
      "op": "DUP4"
    },
    "2319": {
      "op": "DUP6"
    },
    "2320": {
      "op": "SUB"
    },
    "2321": {
      "op": "SLT"
    },
    "2322": {
      "op": "ISZERO"
    },
    "2323": {
      "op": "PUSH2",
      "value": "0x91A"
    },
    "2326": {
      "op": "JUMPI"
    },
    "2327": {
      "op": "DUP1"
    },
    "2328": {
      "jump": "i",
      "op": "DUP2"
    },
    "2329": {
      "op": "REVERT"
    },
    "2330": {
      "op": "JUMPDEST"
    },
    "2331": {
      "op": "PUSH2",
      "value": "0x923"
    },
    "2334": {
      "op": "DUP4"
    },
    "2335": {
      "op": "PUSH2",
      "value": "0x8D0"
    },
    "2338": {
      "op": "JUMP"
    },
    "2339": {
      "op": "JUMPDEST"
    },
    "2340": {
      "op": "SWAP2"
    },
    "2341": {
      "jump": "i",
      "op": "POP"
    },
    "2342": {
      "op": "PUSH2",
      "value": "0x931"
    },
    "2345": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2347": {
      "op": "DUP5"
    },
    "2348": {
      "op": "ADD"
    },
    "2349": {
      "op": "PUSH2",
      "value": "0x8D0"
    },
    "2352": {
      "op": "JUMP"
    },
    "2353": {
      "op": "JUMPDEST"
    },
    "2354": {
      "op": "SWAP1"
    },
    "2355": {
      "jump": "o",
      "op": "POP"
    },
    "2356": {
      "op": "SWAP3"
    },
    "2357": {
      "op": "POP"
    },
    "2358": {
      "op": "SWAP3"
    },
    "2359": {
      "op": "SWAP1"
    },
    "2360": {
      "op": "POP"
    },
    "2361": {
      "op": "JUMP"
    },
    "2362": {
      "op": "JUMPDEST"
    },
    "2363": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2365": {
      "op": "DUP1"
    },
    "2366": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2368": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2370": {
      "op": "DUP5"
    },
    "2371": {
      "op": "DUP7"
    },
    "2372": {
      "op": "SUB"
    },
    "2373": {
      "op": "SLT"
    },
    "2374": {
      "op": "ISZERO"
    },
    "2375": {
      "op": "PUSH2",
      "value": "0x94E"
    },
    "2378": {
      "op": "JUMPI"
    },
    "2379": {
      "op": "DUP1"
    },
    "2380": {
      "jump": "i",
      "op": "DUP2"
    },
    "2381": {
      "op": "REVERT"
    },
    "2382": {
      "op": "JUMPDEST"
    },
    "2383": {
      "op": "PUSH2",
      "value": "0x957"
    },
    "2386": {
      "op": "DUP5"
    },
    "2387": {
      "op": "PUSH2",
      "value": "0x8D0"
    },
    "2390": {
      "op": "JUMP"
    },
    "2391": {
      "op": "JUMPDEST"
    },
    "2392": {
      "op": "SWAP3"
    },
    "2393": {
      "jump": "i",
      "op": "POP"
    },
    "2394": {
      "op": "PUSH2",
      "value": "0x965"
    },
    "2397": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2399": {
      "op": "DUP6"
    },
    "2400": {
      "op": "ADD"
    },
    "2401": {
      "op": "PUSH2",
      "value": "0x8D0"
    },
    "2404": {
      "op": "JUMP"
    },
    "2405": {
      "op": "JUMPDEST"
    },
    "2406": {
      "op": "SWAP2"
    },
    "2407": {
      "op": "POP"
    },
    "2408": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2410": {
      "op": "DUP5"
    },
    "2411": {
      "op": "ADD"
    },
    "2412": {
      "op": "CALLDATALOAD"
    },
    "2413": {
      "op": "SWAP1"
    },
    "2414": {
      "jump": "o",
      "op": "POP"
    },
    "2415": {
      "op": "SWAP3"
    },
    "2416": {
      "op": "POP"
    },
    "2417": {
      "op": "SWAP3"
    },
    "2418": {
      "op": "POP"
    },
    "2419": {
      "op": "SWAP3"
    },
    "2420": {
      "op": "JUMP"
    },
    "2421": {
      "op": "JUMPDEST"
    },
    "2422": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2424": {
      "op": "DUP1"
    },
    "2425": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2427": {
      "op": "DUP4"
    },
    "2428": {
      "op": "DUP6"
    },
    "2429": {
      "op": "SUB"
    },
    "2430": {
      "op": "SLT"
    },
    "2431": {
      "op": "ISZERO"
    },
    "2432": {
      "op": "PUSH2",
      "value": "0x987"
    },
    "2435": {
      "op": "JUMPI"
    },
    "2436": {
      "op": "DUP2"
    },
    "2437": {
      "jump": "i",
      "op": "DUP3"
    },
    "2438": {
      "op": "REVERT"
    },
    "2439": {
      "op": "JUMPDEST"
    },
    "2440": {
      "op": "PUSH2",
      "value": "0x990"
    },
    "2443": {
      "op": "DUP4"
    },
    "2444": {
      "op": "PUSH2",
      "value": "0x8D0"
    },
    "2447": {
      "op": "JUMP"
    },
    "2448": {
      "op": "JUMPDEST"
    },
    "2449": {
      "op": "SWAP5"
    },
    "2450": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2452": {
      "op": "SWAP4"
    },
    "2453": {
      "op": "SWAP1"
    },
    "2454": {
      "op": "SWAP4"
    },
    "2455": {
      "jump": "o",
      "op": "ADD"
    },
    "2456": {
      "op": "CALLDATALOAD"
    },
    "2457": {
      "op": "SWAP4"
    },
    "2458": {
      "op": "POP"
    },
    "2459": {
      "op": "POP"
    },
    "2460": {
      "op": "POP"
    },
    "2461": {
      "op": "JUMP"
    },
    "2462": {
      "op": "JUMPDEST"
    },
    "2463": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2465": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2467": {
      "op": "DUP3"
    },
    "2468": {
      "op": "DUP5"
    },
    "2469": {
      "op": "SUB"
    },
    "2470": {
      "op": "SLT"
    },
    "2471": {
      "op": "ISZERO"
    },
    "2472": {
      "op": "PUSH2",
      "value": "0x9AF"
    },
    "2475": {
      "op": "JUMPI"
    },
    "2476": {
      "op": "DUP1"
    },
    "2477": {
      "op": "DUP2"
    },
    "2478": {
      "op": "REVERT"
    },
    "2479": {
      "jump": "o",
      "op": "JUMPDEST"
    },
    "2480": {
      "op": "POP"
    },
    "2481": {
      "op": "CALLDATALOAD"
    },
    "2482": {
      "op": "SWAP2"
    },
    "2483": {
      "op": "SWAP1"
    },
    "2484": {
      "op": "POP"
    },
    "2485": {
      "op": "JUMP"
    },
    "2486": {
      "op": "JUMPDEST"
    },
    "2487": {
      "op": "SWAP1"
    },
    "2488": {
      "op": "ISZERO"
    },
    "2489": {
      "jump": "o",
      "op": "ISZERO"
    },
    "2490": {
      "op": "DUP2"
    },
    "2491": {
      "op": "MSTORE"
    },
    "2492": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2494": {
      "op": "ADD"
    },
    "2495": {
      "op": "SWAP1"
    },
    "2496": {
      "op": "JUMP"
    },
    "2497": {
      "op": "JUMPDEST"
    },
    "2498": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2500": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2502": {
      "op": "DUP1"
    },
    "2503": {
      "op": "DUP4"
    },
    "2504": {
      "op": "MSTORE"
    },
    "2505": {
      "op": "DUP4"
    },
    "2506": {
      "op": "MLOAD"
    },
    "2507": {
      "op": "DUP1"
    },
    "2508": {
      "op": "DUP3"
    },
    "2509": {
      "op": "DUP6"
    },
    "2510": {
      "op": "ADD"
    },
    "2511": {
      "op": "MSTORE"
    },
    "2512": {
      "op": "DUP3"
    },
    "2513": {
      "op": "JUMPDEST"
    },
    "2514": {
      "op": "DUP2"
    },
    "2515": {
      "op": "DUP2"
    },
    "2516": {
      "op": "LT"
    },
    "2517": {
      "op": "ISZERO"
    },
    "2518": {
      "op": "PUSH2",
      "value": "0x9ED"
    },
    "2521": {
      "op": "JUMPI"
    },
    "2522": {
      "op": "DUP6"
    },
    "2523": {
      "op": "DUP2"
    },
    "2524": {
      "op": "ADD"
    },
    "2525": {
      "op": "DUP4"
    },
    "2526": {
      "op": "ADD"
    },
    "2527": {
      "op": "MLOAD"
    },
    "2528": {
      "op": "DUP6"
    },
    "2529": {
      "op": "DUP3"
    },
    "2530": {
      "op": "ADD"
    },
    "2531": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2533": {
      "op": "ADD"
    },
    "2534": {
      "op": "MSTORE"
    },
    "2535": {
      "op": "DUP3"
    },
    "2536": {
      "op": "ADD"
    },
    "2537": {
      "op": "PUSH2",
      "value": "0x9D1"
    },
    "2540": {
      "op": "JUMP"
    },
    "2541": {
      "op": "JUMPDEST"
    },
    "2542": {
      "op": "DUP2"
    },
    "2543": {
      "op": "DUP2"
    },
    "2544": {
      "op": "GT"
    },
    "2545": {
      "op": "ISZERO"
    },
    "2546": {
      "op": "PUSH2",
      "value": "0x9FE"
    },
    "2549": {
      "op": "JUMPI"
    },
    "2550": {
      "op": "DUP4"
    },
    "2551": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2553": {
      "op": "DUP4"
    },
    "2554": {
      "op": "DUP8"
    },
    "2555": {
      "op": "ADD"
    },
    "2556": {
      "op": "ADD"
    },
    "2557": {
      "op": "MSTORE"
    },
    "2558": {
      "op": "JUMPDEST"
    },
    "2559": {
      "op": "POP"
    },
    "2560": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2562": {
      "op": "ADD"
    },
    "2563": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2565": {
      "op": "NOT"
    },
    "2566": {
      "op": "AND"
    },
    "2567": {
      "op": "SWAP3"
    },
    "2568": {
      "op": "SWAP1"
    },
    "2569": {
      "op": "SWAP3"
    },
    "2570": {
      "op": "ADD"
    },
    "2571": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2573": {
      "jump": "o",
      "op": "ADD"
    },
    "2574": {
      "op": "SWAP4"
    },
    "2575": {
      "op": "SWAP3"
    },
    "2576": {
      "op": "POP"
    },
    "2577": {
      "op": "POP"
    },
    "2578": {
      "op": "POP"
    },
    "2579": {
      "op": "JUMP"
    },
    "2580": {
      "op": "JUMPDEST"
    },
    "2581": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2583": {
      "op": "DUP1"
    },
    "2584": {
      "op": "DUP3"
    },
    "2585": {
      "op": "MSTORE"
    },
    "2586": {
      "op": "PUSH1",
      "value": "0x23"
    },
    "2588": {
      "op": "SWAP1"
    },
    "2589": {
      "op": "DUP3"
    },
    "2590": {
      "op": "ADD"
    },
    "2591": {
      "op": "MSTORE"
    },
    "2592": {
      "op": "PUSH32",
      "value": "0x45524332303A207472616E7366657220746F20746865207A65726F2061646472"
    },
    "2625": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2627": {
      "op": "DUP3"
    },
    "2628": {
      "op": "ADD"
    },
    "2629": {
      "op": "MSTORE"
    },
    "2630": {
      "op": "PUSH3",
      "value": "0x657373"
    },
    "2634": {
      "op": "PUSH1",
      "value": "0xE8"
    },
    "2636": {
      "op": "SHL"
    },
    "2637": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2639": {
      "jump": "o",
      "op": "DUP3"
    },
    "2640": {
      "op": "ADD"
    },
    "2641": {
      "op": "MSTORE"
    },
    "2642": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2644": {
      "op": "ADD"
    },
    "2645": {
      "op": "SWAP1"
    },
    "2646": {
      "op": "JUMP"
    },
    "2647": {
      "op": "JUMPDEST"
    },
    "2648": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2650": {
      "op": "DUP1"
    },
    "2651": {
      "op": "DUP3"
    },
    "2652": {
      "op": "MSTORE"
    },
    "2653": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "2655": {
      "op": "SWAP1"
    },
    "2656": {
      "op": "DUP3"
    },
    "2657": {
      "op": "ADD"
    },
    "2658": {
      "op": "MSTORE"
    },
    "2659": {
      "op": "PUSH32",
      "value": "0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E"
    },
    "2692": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2694": {
      "op": "DUP3"
    },
    "2695": {
      "op": "ADD"
    },
    "2696": {
      "op": "MSTORE"
    },
    "2697": {
      "op": "PUSH2",
      "value": "0x6365"
    },
    "2700": {
      "op": "PUSH1",
      "value": "0xF0"
    },
    "2702": {
      "op": "SHL"
    },
    "2703": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2705": {
      "jump": "o",
      "op": "DUP3"
    },
    "2706": {
      "op": "ADD"
    },
    "2707": {
      "op": "MSTORE"
    },
    "2708": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2710": {
      "op": "ADD"
    },
    "2711": {
      "op": "SWAP1"
    },
    "2712": {
      "op": "JUMP"
    },
    "2713": {
      "op": "JUMPDEST"
    },
    "2714": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2716": {
      "op": "DUP1"
    },
    "2717": {
      "op": "DUP3"
    },
    "2718": {
      "op": "MSTORE"
    },
    "2719": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "2721": {
      "op": "SWAP1"
    },
    "2722": {
      "op": "DUP3"
    },
    "2723": {
      "op": "ADD"
    },
    "2724": {
      "op": "MSTORE"
    },
    "2725": {
      "op": "PUSH32",
      "value": "0x45524332303A20617070726F766520746F20746865207A65726F206164647265"
    },
    "2758": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2760": {
      "op": "DUP3"
    },
    "2761": {
      "op": "ADD"
    },
    "2762": {
      "op": "MSTORE"
    },
    "2763": {
      "op": "PUSH2",
      "value": "0x7373"
    },
    "2766": {
      "op": "PUSH1",
      "value": "0xF0"
    },
    "2768": {
      "op": "SHL"
    },
    "2769": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2771": {
      "jump": "o",
      "op": "DUP3"
    },
    "2772": {
      "op": "ADD"
    },
    "2773": {
      "op": "MSTORE"
    },
    "2774": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2776": {
      "op": "ADD"
    },
    "2777": {
      "op": "SWAP1"
    },
    "2778": {
      "op": "JUMP"
    },
    "2779": {
      "op": "JUMPDEST"
    },
    "2780": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2782": {
      "op": "DUP1"
    },
    "2783": {
      "op": "DUP3"
    },
    "2784": {
      "op": "MSTORE"
    },
    "2785": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "2787": {
      "op": "SWAP1"
    },
    "2788": {
      "op": "DUP3"
    },
    "2789": {
      "op": "ADD"
    },
    "2790": {
      "op": "MSTORE"
    },
    "2791": {
      "op": "PUSH32",
      "value": "0x45524332303A207472616E7366657220616D6F756E7420657863656564732062"
    },
    "2824": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2826": {
      "op": "DUP3"
    },
    "2827": {
      "op": "ADD"
    },
    "2828": {
      "op": "MSTORE"
    },
    "2829": {
      "op": "PUSH6",
      "value": "0x616C616E6365"
    },
    "2836": {
      "op": "PUSH1",
      "value": "0xD0"
    },
    "2838": {
      "op": "SHL"
    },
    "2839": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2841": {
      "jump": "o",
      "op": "DUP3"
    },
    "2842": {
      "op": "ADD"
    },
    "2843": {
      "op": "MSTORE"
    },
    "2844": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2846": {
      "op": "ADD"
    },
    "2847": {
      "op": "SWAP1"
    },
    "2848": {
      "op": "JUMP"
    },
    "2849": {
      "op": "JUMPDEST"
    },
    "2850": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2852": {
      "op": "DUP1"
    },
    "2853": {
      "op": "DUP3"
    },
    "2854": {
      "op": "MSTORE"
    },
    "2855": {
      "op": "PUSH1",
      "value": "0x28"
    },
    "2857": {
      "op": "SWAP1"
    },
    "2858": {
      "op": "DUP3"
    },
    "2859": {
      "op": "ADD"
    },
    "2860": {
      "op": "MSTORE"
    },
    "2861": {
      "op": "PUSH32",
      "value": "0x45524332303A207472616E7366657220616D6F756E7420657863656564732061"
    },
    "2894": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2896": {
      "op": "DUP3"
    },
    "2897": {
      "op": "ADD"
    },
    "2898": {
      "op": "MSTORE"
    },
    "2899": {
      "op": "PUSH8",
      "value": "0x6C6C6F77616E6365"
    },
    "2908": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "2910": {
      "op": "SHL"
    },
    "2911": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2913": {
      "jump": "o",
      "op": "DUP3"
    },
    "2914": {
      "op": "ADD"
    },
    "2915": {
      "op": "MSTORE"
    },
    "2916": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2918": {
      "op": "ADD"
    },
    "2919": {
      "op": "SWAP1"
    },
    "2920": {
      "op": "JUMP"
    },
    "2921": {
      "op": "JUMPDEST"
    },
    "2922": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2924": {
      "op": "DUP1"
    },
    "2925": {
      "op": "DUP3"
    },
    "2926": {
      "op": "MSTORE"
    },
    "2927": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2929": {
      "op": "SWAP1"
    },
    "2930": {
      "op": "DUP3"
    },
    "2931": {
      "op": "ADD"
    },
    "2932": {
      "op": "MSTORE"
    },
    "2933": {
      "op": "PUSH32",
      "value": "0x45524332303A206275726E20616D6F756E74206578636565647320616C6C6F77"
    },
    "2966": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2968": {
      "op": "DUP3"
    },
    "2969": {
      "op": "ADD"
    },
    "2970": {
      "op": "MSTORE"
    },
    "2971": {
      "op": "PUSH4",
      "value": "0x616E6365"
    },
    "2976": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2978": {
      "op": "SHL"
    },
    "2979": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2981": {
      "jump": "o",
      "op": "DUP3"
    },
    "2982": {
      "op": "ADD"
    },
    "2983": {
      "op": "MSTORE"
    },
    "2984": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2986": {
      "op": "ADD"
    },
    "2987": {
      "op": "SWAP1"
    },
    "2988": {
      "op": "JUMP"
    },
    "2989": {
      "op": "JUMPDEST"
    },
    "2990": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2992": {
      "op": "DUP1"
    },
    "2993": {
      "op": "DUP3"
    },
    "2994": {
      "op": "MSTORE"
    },
    "2995": {
      "op": "PUSH1",
      "value": "0x21"
    },
    "2997": {
      "op": "SWAP1"
    },
    "2998": {
      "op": "DUP3"
    },
    "2999": {
      "op": "ADD"
    },
    "3000": {
      "op": "MSTORE"
    },
    "3001": {
      "op": "PUSH32",
      "value": "0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573"
    },
    "3034": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3036": {
      "op": "DUP3"
    },
    "3037": {
      "op": "ADD"
    },
    "3038": {
      "op": "MSTORE"
    },
    "3039": {
      "op": "PUSH1",
      "value": "0x73"
    },
    "3041": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "3043": {
      "op": "SHL"
    },
    "3044": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3046": {
      "jump": "o",
      "op": "DUP3"
    },
    "3047": {
      "op": "ADD"
    },
    "3048": {
      "op": "MSTORE"
    },
    "3049": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3051": {
      "op": "ADD"
    },
    "3052": {
      "op": "SWAP1"
    },
    "3053": {
      "op": "JUMP"
    },
    "3054": {
      "op": "JUMPDEST"
    },
    "3055": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3057": {
      "op": "DUP1"
    },
    "3058": {
      "op": "DUP3"
    },
    "3059": {
      "op": "MSTORE"
    },
    "3060": {
      "op": "PUSH1",
      "value": "0x25"
    },
    "3062": {
      "op": "SWAP1"
    },
    "3063": {
      "op": "DUP3"
    },
    "3064": {
      "op": "ADD"
    },
    "3065": {
      "op": "MSTORE"
    },
    "3066": {
      "op": "PUSH32",
      "value": "0x45524332303A207472616E736665722066726F6D20746865207A65726F206164"
    },
    "3099": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3101": {
      "op": "DUP3"
    },
    "3102": {
      "op": "ADD"
    },
    "3103": {
      "op": "MSTORE"
    },
    "3104": {
      "op": "PUSH5",
      "value": "0x6472657373"
    },
    "3110": {
      "op": "PUSH1",
      "value": "0xD8"
    },
    "3112": {
      "op": "SHL"
    },
    "3113": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3115": {
      "jump": "o",
      "op": "DUP3"
    },
    "3116": {
      "op": "ADD"
    },
    "3117": {
      "op": "MSTORE"
    },
    "3118": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3120": {
      "op": "ADD"
    },
    "3121": {
      "op": "SWAP1"
    },
    "3122": {
      "op": "JUMP"
    },
    "3123": {
      "op": "JUMPDEST"
    },
    "3124": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3126": {
      "op": "DUP1"
    },
    "3127": {
      "op": "DUP3"
    },
    "3128": {
      "op": "MSTORE"
    },
    "3129": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3131": {
      "op": "SWAP1"
    },
    "3132": {
      "op": "DUP3"
    },
    "3133": {
      "op": "ADD"
    },
    "3134": {
      "op": "MSTORE"
    },
    "3135": {
      "op": "PUSH32",
      "value": "0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
    },
    "3168": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3170": {
      "op": "DUP3"
    },
    "3171": {
      "op": "ADD"
    },
    "3172": {
      "op": "MSTORE"
    },
    "3173": {
      "op": "PUSH4",
      "value": "0x72657373"
    },
    "3178": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3180": {
      "op": "SHL"
    },
    "3181": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3183": {
      "jump": "o",
      "op": "DUP3"
    },
    "3184": {
      "op": "ADD"
    },
    "3185": {
      "op": "MSTORE"
    },
    "3186": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3188": {
      "op": "ADD"
    },
    "3189": {
      "op": "SWAP1"
    },
    "3190": {
      "op": "JUMP"
    },
    "3191": {
      "op": "JUMPDEST"
    },
    "3192": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3194": {
      "op": "DUP1"
    },
    "3195": {
      "op": "DUP3"
    },
    "3196": {
      "op": "MSTORE"
    },
    "3197": {
      "op": "PUSH1",
      "value": "0x25"
    },
    "3199": {
      "op": "SWAP1"
    },
    "3200": {
      "op": "DUP3"
    },
    "3201": {
      "op": "ADD"
    },
    "3202": {
      "op": "MSTORE"
    },
    "3203": {
      "op": "PUSH32",
      "value": "0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
    },
    "3236": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3238": {
      "op": "DUP3"
    },
    "3239": {
      "op": "ADD"
    },
    "3240": {
      "op": "MSTORE"
    },
    "3241": {
      "op": "PUSH5",
      "value": "0x207A65726F"
    },
    "3247": {
      "op": "PUSH1",
      "value": "0xD8"
    },
    "3249": {
      "op": "SHL"
    },
    "3250": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3252": {
      "jump": "o",
      "op": "DUP3"
    },
    "3253": {
      "op": "ADD"
    },
    "3254": {
      "op": "MSTORE"
    },
    "3255": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3257": {
      "op": "ADD"
    },
    "3258": {
      "op": "SWAP1"
    },
    "3259": {
      "op": "JUMP"
    },
    "3260": {
      "op": "JUMPDEST"
    },
    "3261": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3263": {
      "op": "DUP1"
    },
    "3264": {
      "op": "DUP3"
    },
    "3265": {
      "op": "MSTORE"
    },
    "3266": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3268": {
      "op": "SWAP1"
    },
    "3269": {
      "op": "DUP3"
    },
    "3270": {
      "op": "ADD"
    },
    "3271": {
      "op": "MSTORE"
    },
    "3272": {
      "op": "PUSH32",
      "value": "0x45524332303A206D696E7420746F20746865207A65726F206164647265737300"
    },
    "3305": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3307": {
      "jump": "o",
      "op": "DUP3"
    },
    "3308": {
      "op": "ADD"
    },
    "3309": {
      "op": "MSTORE"
    },
    "3310": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3312": {
      "op": "ADD"
    },
    "3313": {
      "op": "SWAP1"
    },
    "3314": {
      "op": "JUMP"
    },
    "3315": {
      "op": "JUMPDEST"
    },
    "3316": {
      "jump": "o",
      "op": "SWAP1"
    },
    "3317": {
      "op": "DUP2"
    },
    "3318": {
      "op": "MSTORE"
    },
    "3319": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3321": {
      "op": "ADD"
    },
    "3322": {
      "op": "SWAP1"
    },
    "3323": {
      "op": "JUMP"
    },
    "3324": {
      "op": "JUMPDEST"
    },
    "3325": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "3327": {
      "op": "SWAP2"
    },
    "3328": {
      "op": "SWAP1"
    },
    "3329": {
      "op": "SWAP2"
    },
    "3330": {
      "jump": "o",
      "op": "AND"
    },
    "3331": {
      "op": "DUP2"
    },
    "3332": {
      "op": "MSTORE"
    },
    "3333": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3335": {
      "op": "ADD"
    },
    "3336": {
      "op": "SWAP1"
    },
    "3337": {
      "op": "JUMP"
    },
    "3338": {
      "op": "JUMPDEST"
    },
    "3339": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3341": {
      "op": "DUP3"
    },
    "3342": {
      "op": "NOT"
    },
    "3343": {
      "op": "DUP3"
    },
    "3344": {
      "jump": "i",
      "op": "GT"
    },
    "3345": {
      "op": "ISZERO"
    },
    "3346": {
      "op": "PUSH2",
      "value": "0xD1D"
    },
    "3349": {
      "op": "JUMPI"
    },
    "3350": {
      "op": "PUSH2",
      "value": "0xD1D"
    },
    "3353": {
      "jump": "o",
      "op": "PUSH2",
      "value": "0xD74"
    },
    "3356": {
      "op": "JUMP"
    },
    "3357": {
      "op": "JUMPDEST"
    },
    "3358": {
      "op": "POP"
    },
    "3359": {
      "op": "ADD"
    },
    "3360": {
      "op": "SWAP1"
    },
    "3361": {
      "op": "JUMP"
    },
    "3362": {
      "op": "JUMPDEST"
    },
    "3363": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3365": {
      "op": "DUP3"
    },
    "3366": {
      "op": "DUP3"
    },
    "3367": {
      "jump": "i",
      "op": "LT"
    },
    "3368": {
      "op": "ISZERO"
    },
    "3369": {
      "op": "PUSH2",
      "value": "0xD34"
    },
    "3372": {
      "op": "JUMPI"
    },
    "3373": {
      "op": "PUSH2",
      "value": "0xD34"
    },
    "3376": {
      "jump": "o",
      "op": "PUSH2",
      "value": "0xD74"
    },
    "3379": {
      "op": "JUMP"
    },
    "3380": {
      "op": "JUMPDEST"
    },
    "3381": {
      "op": "POP"
    },
    "3382": {
      "op": "SUB"
    },
    "3383": {
      "op": "SWAP1"
    },
    "3384": {
      "op": "JUMP"
    },
    "3385": {
      "op": "JUMPDEST"
    },
    "3386": {
      "op": "PUSH1",
      "value": "0x2"
    },
    "3388": {
      "op": "DUP2"
    },
    "3389": {
      "op": "DIV"
    },
    "3390": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3392": {
      "op": "DUP3"
    },
    "3393": {
      "op": "AND"
    },
    "3394": {
      "op": "DUP1"
    },
    "3395": {
      "op": "PUSH2",
      "value": "0xD4D"
    },
    "3398": {
      "op": "JUMPI"
    },
    "3399": {
      "op": "PUSH1",
      "value": "0x7F"
    },
    "3401": {
      "op": "DUP3"
    },
    "3402": {
      "op": "AND"
    },
    "3403": {
      "op": "SWAP2"
    },
    "3404": {
      "op": "POP"
    },
    "3405": {
      "op": "JUMPDEST"
    },
    "3406": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3408": {
      "op": "DUP3"
    },
    "3409": {
      "op": "LT"
    },
    "3410": {
      "op": "DUP2"
    },
    "3411": {
      "op": "EQ"
    },
    "3412": {
      "op": "ISZERO"
    },
    "3413": {
      "op": "PUSH2",
      "value": "0xD6E"
    },
    "3416": {
      "op": "JUMPI"
    },
    "3417": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "3422": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3424": {
      "op": "SHL"
    },
    "3425": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3427": {
      "op": "MSTORE"
    },
    "3428": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "3430": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "3432": {
      "op": "MSTORE"
    },
    "3433": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3435": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3437": {
      "jump": "o",
      "op": "REVERT"
    },
    "3438": {
      "op": "JUMPDEST"
    },
    "3439": {
      "op": "POP"
    },
    "3440": {
      "op": "SWAP2"
    },
    "3441": {
      "op": "SWAP1"
    },
    "3442": {
      "op": "POP"
    },
    "3443": {
      "op": "JUMP"
    },
    "3444": {
      "op": "JUMPDEST"
    },
    "3445": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "3450": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3452": {
      "op": "SHL"
    },
    "3453": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3455": {
      "op": "MSTORE"
    },
    "3456": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "3458": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "3460": {
      "op": "MSTORE"
    },
    "3461": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3463": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3465": {
      "op": "REVERT"
    }
  },
  "sha1": "929dd75fae3fcc587c23505153556e17e8802f12",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport  {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport  {ERC20Burnable} from \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n\ninterface IERC20 {\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    function approve(address spender, uint256 amount) external returns (bool);\n}\n\n\ncontract BTCUP is  ERC20, ERC20Burnable {\n    address parentAddress;\n\n    constructor(address _parentAddress) ERC20(\"Bitcoin Up\", \"BTCUP\") {\n        parentAddress = _parentAddress;\n    }\n\n    function mint(uint256 quantity) public onlyParent {\n        _mint(tx.origin, quantity);\n    }\n\n    function burn(uint256 quantity) public override onlyParent {\n        burnFrom(tx.origin, quantity);\n    }\n\n    function decimals() public view override returns (uint8) {\n        return 6;\n    }\n\n    modifier onlyParent {\n        require(msg.sender == parentAddress);\n        _;\n    }\n}\n\n\ncontract BTCDOWN is ERC20, ERC20Burnable {\n    address parentAddress;\n\n    constructor(address _parentAddress) ERC20(\"Bitcoin Down\", \"BTCDOWN\") {\n        parentAddress = _parentAddress;\n    }\n\n    function mint(uint256 quantity) public onlyParent {\n        _mint(tx.origin, quantity);\n    }\n\n    function burn(uint256 quantity) public override onlyParent {\n        burnFrom(tx.origin, quantity);\n    }\n\n    function decimals() public view override returns (uint8) {\n        return 6;\n    }\n\n    modifier onlyParent {\n        require(msg.sender == parentAddress);\n        _;\n    }\n}\n\n\ncontract LeveragedTrading is Ownable {\n    using SafeMath for uint256;\n\n    uint256 public priceBtcUp = 10 ** 6;\n    uint256 public priceBtcDown = 10 ** 6;        // 6 decimals\n\n    uint256 public collateralBtcUp = 0;          //6 decimals\n    uint256 public collateralBtcDown = 0;\n\n    uint256 public amountBtcUp = 0;           // 6 decimals\n    uint256 public amountBtcDown = 0;         // 6 decimals\n\n    uint256 public lastBtcPrice = 0;       // 8 decimals, chainlink conventions\n\n    bool public poolIsInitialized = false;\n\n    address addressUsdc = 0xb7a4F3E9097C08dA09517b5aB877F7a917224ede;  // <- Kovan  //0xeb8f08a975Ab53E34D8a0330E0D34de942C95926;\n    address addressBtcUSDFeed =  0x6135b13325bfC4B00278B4abC5e20bbce2D6580e; // <- Kovan          // 0xECe365B379E1dD183B20fc5f022230C044d51404;\n\n    BTCUP btcUp;\n    BTCDOWN btcDown;\n\n    function initializePool(uint256 amountUsdc) public onlyOwner {\n        require(!poolIsInitialized, \"The pool was already initiated.\");\n\n        btcUp = new BTCUP(address(this));\n        btcDown = new BTCDOWN(address(this));\n\n        issueBtcUp(amountUsdc.div(2));\n        issueBtcDown(amountUsdc.div(2));\n\n        poolIsInitialized = true;\n    }\n\n    function issueBtcUp(uint256 amountUsdc) public {\n        rebalanceLeveragedTokens();\n        \n        priceBtcUp = getBtcUpPrice();\n        uint256 amountLeveragedTokens = amountUsdc.mul(10 ** 6).div(priceBtcUp);\n\n        btcUp.mint(amountLeveragedTokens);\n        amountBtcUp = amountBtcUp.add(amountLeveragedTokens);\n        collateralBtcUp = collateralBtcUp.add(amountUsdc);\n\n        IERC20 usdc = IERC20(addressUsdc);\n        require(usdc.transferFrom(msg.sender, address(this), amountUsdc), \"You don't have enough USDC.\");\n    }\n\n    function issueBtcDown(uint256 amountUsdc) public {\n        rebalanceLeveragedTokens();\n        \n        priceBtcDown = getBtcDownPrice();\n        uint256 amountLeveragedTokens = amountUsdc.mul(10 ** 6).div(priceBtcDown);\n\n        btcDown.mint(amountLeveragedTokens);\n        amountBtcDown = amountBtcDown.add(amountLeveragedTokens);\n        collateralBtcDown = collateralBtcDown.add(amountUsdc);\n\n        IERC20 usdc = IERC20(addressUsdc);\n        require(usdc.transferFrom(msg.sender, address(this), amountUsdc), \"You don't have enough USDC.\");\n    }\n\n    function redeemBtcUp(uint256 amountLeveragedTokens) public {\n        rebalanceLeveragedTokens();\n        btcUp.burn(amountLeveragedTokens);\n\n        priceBtcUp = getBtcUpPrice();\n        uint256 amountUsdc = amountLeveragedTokens.mul(priceBtcUp).div(10 ** 6);\n\n        amountBtcUp = amountBtcUp.sub(amountLeveragedTokens);\n        collateralBtcUp = collateralBtcUp.sub(amountUsdc);\n\n        IERC20 usdc = IERC20(addressUsdc);\n        assert(usdc.transfer(msg.sender, amountUsdc));\n    }\n\n    function redeemBtcDown(uint256 amountLeveragedTokens) public {\n        rebalanceLeveragedTokens();\n        btcDown.burn(amountLeveragedTokens);\n\n        priceBtcDown = getBtcDownPrice();\n        uint256 amountUsdc = amountLeveragedTokens.mul(priceBtcDown).div(10 ** 6);\n        \n        amountBtcDown = amountBtcDown.sub(amountLeveragedTokens);\n        collateralBtcDown = collateralBtcDown.sub(amountUsdc);\n\n        IERC20 usdc = IERC20(addressUsdc);\n        assert(usdc.transfer(msg.sender,  amountUsdc));\n    }\n\n    function rebalanceLeveragedTokens() public {\n        uint256 btcPrice = getBtcPrice();\n        if ((collateralBtcUp > 0) && (collateralBtcDown > 0)) {\n            uint256 rebalanceAmount = getRebalanceAmount(btcPrice);\n            if (getSign(btcPrice) > 0) {\n                collateralBtcUp = collateralBtcUp.add(rebalanceAmount);\n                collateralBtcDown = collateralBtcDown.sub(rebalanceAmount);\n            }\n\n            else {\n                collateralBtcUp = collateralBtcUp.sub(rebalanceAmount);\n                collateralBtcDown = collateralBtcDown.add(rebalanceAmount);\n            }\n\n        }\n        lastBtcPrice = btcPrice;\n    }\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    function getSign(uint256 btcPrice) internal view returns (int256) {\n        if (btcPrice > lastBtcPrice) {\n            return 1;\n        }\n        else {\n            return -1;\n        }\n    }\n \n    function getRebalanceAmount(uint256 priceBtc) internal view returns (uint256) {\n        uint256 priceDiff = getPriceDiff(priceBtc);\n\n        return min(collateralBtcUp, collateralBtcDown).mul(L(priceDiff)).div(10 ** 6);\n    }\n\n// getBtcUpPrice() 6 decimals\n    function getBtcUpPrice() public view returns (uint256) {\n        return amountBtcUp == 0 ?  priceBtcUp : collateralBtcUp.mul(10 ** 6).div(amountBtcUp);\n    }\n\n// getBtcDownPrice() 6 decimals\n    function getBtcDownPrice() public view returns (uint256) {//6 decimals\n        return amountBtcDown == 0 ?  priceBtcDown : collateralBtcDown.mul(10 ** 6).div(amountBtcDown);\n    }\n\n// get the price of our asset with 8 decimals\n    function getBtcPrice() public view returns (uint256) {\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(addressBtcUSDFeed);\n        (,int256 answer,,,) = priceFeed.latestRoundData();\n\n         return uint256(answer);             // we call chainlink oracle to get the price of the asset\n         \n    }\n    \n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a <= b ? a : b;\n    }\n\n    function L(uint256 x) internal pure returns (uint256) {            //6  decimals\n\n        uint256 denom = 9 * (x ** 2 / 10 ** 6)  + 3 * x + 10 ** 6;\n        uint256 num = 10 ** 12;\n\n        return 10 ** 6 - num / denom;\n    }\n\n    function getPriceDiff(uint256 btcPrice) internal view returns (uint256) {     //6 decimals\n        if (btcPrice > lastBtcPrice) {\n            return btcPrice.mul(10 ** 6).div(lastBtcPrice).sub(10 ** 6);\n        }\n\n        else {\n            return lastBtcPrice.mul(10 ** 6).div(btcPrice).sub(10 ** 6);\n        }\n\n    }\n\n    function getBtcupBalance() public view returns(uint256) {\n        return btcUp.balanceOf(msg.sender);\n    }\n\n    function getBtcdownBalance() public view returns(uint256) {\n        return btcDown.balanceOf(msg.sender);\n    }\n\n\n}\n\n\n\n\n\n\n",
  "sourceMap": "700:576:8:-:0;;;774:112;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1896:113:1;;;;;;;;;;;-1:-1:-1;;;1896:113:1;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1896:113:1;;;;1962:13;;1896:113;;;1962:13;;:5;;:13;:::i;:::-;-1:-1:-1;1985:17:1;;;;:7;;:17;;;;;:::i;:::-;-1:-1:-1;;849:13:8::1;:30:::0;;-1:-1:-1;;;;;;849:30:8::1;-1:-1:-1::0;;;;;849:30:8;;;::::1;::::0;;;::::1;::::0;;;-1:-1:-1;700:576:8;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;700:576:8;;;-1:-1:-1;700:576:8;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:310:9;;137:2;125:9;116:7;112:23;108:32;105:2;;;158:6;150;143:22;105:2;189:16;;-1:-1:-1;;;;;234:31:9;;224:42;;214:2;;285:6;277;270:22;214:2;313:5;95:229;-1:-1:-1;;;95:229:9:o;329:380::-;414:1;404:12;;461:1;451:12;;;472:2;;526:4;518:6;514:17;504:27;;472:2;579;571:6;568:14;548:18;545:38;542:2;;;625:10;620:3;616:20;613:1;606:31;660:4;657:1;650:15;688:4;685:1;678:15;542:2;;384:325;;;:::o;:::-;700:576:8;;;;;;",
  "sourcePath": "contracts/LeveragedTrading.sol",
  "type": "contract"
}
},{}],3:[function(require,module,exports){
module.exports={
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "8": "contracts/LeveragedTrading.sol"
  },
  "ast": {
    "absolutePath": "contracts/LeveragedTrading.sol",
    "exportedSymbols": {
      "AggregatorV3Interface": [
        1914
      ],
      "BTCDOWN": [
        178
      ],
      "BTCUP": [
        108
      ],
      "Context": [
        1935
      ],
      "ERC20": [
        1494
      ],
      "ERC20Burnable": [
        1556
      ],
      "IERC20": [
        38
      ],
      "LeveragedTrading": [
        844
      ],
      "Ownable": [
        948
      ],
      "SafeMath": [
        1868
      ]
    },
    "id": 845,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:8"
      },
      {
        "absolutePath": "/home/alex/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/token/ERC20/ERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        "id": 3,
        "nodeType": "ImportDirective",
        "scope": 845,
        "sourceUnit": 1495,
        "src": "57:69:8",
        "symbolAliases": [
          {
            "foreign": {
              "id": 2,
              "name": "ERC20",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "src": "66:5:8",
              "typeDescriptions": {}
            }
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/alex/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/token/ERC20/extensions/ERC20Burnable.sol",
        "file": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
        "id": 5,
        "nodeType": "ImportDirective",
        "scope": 845,
        "sourceUnit": 1557,
        "src": "127:96:8",
        "symbolAliases": [
          {
            "foreign": {
              "id": 4,
              "name": "ERC20Burnable",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "src": "136:13:8",
              "typeDescriptions": {}
            }
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/alex/.brownie/packages/smartcontractkit/chainlink@1.3.0/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol",
        "file": "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol",
        "id": 6,
        "nodeType": "ImportDirective",
        "scope": 845,
        "sourceUnit": 1915,
        "src": "224:76:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/alex/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/utils/math/SafeMath.sol",
        "file": "@openzeppelin/contracts/utils/math/SafeMath.sol",
        "id": 7,
        "nodeType": "ImportDirective",
        "scope": 845,
        "sourceUnit": 1869,
        "src": "301:57:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/alex/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/access/Ownable.sol",
        "file": "@openzeppelin/contracts/access/Ownable.sol",
        "id": 8,
        "nodeType": "ImportDirective",
        "scope": 845,
        "sourceUnit": 949,
        "src": "359:52:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "id": 38,
        "linearizedBaseContracts": [
          38
        ],
        "name": "IERC20",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "functionSelector": "a9059cbb",
            "id": 17,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "transfer",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nodeType": "VariableDeclaration",
                  "scope": 17,
                  "src": "455:17:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 9,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "455:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 12,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 17,
                  "src": "474:14:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 11,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "474:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "454:35:8"
            },
            "returnParameters": {
              "id": 16,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 15,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 17,
                  "src": "508:4:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 14,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "508:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "507:6:8"
            },
            "scope": 38,
            "src": "437:77:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "functionSelector": "23b872dd",
            "id": 28,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "transferFrom",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 24,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19,
                  "mutability": "mutable",
                  "name": "sender",
                  "nodeType": "VariableDeclaration",
                  "scope": 28,
                  "src": "541:14:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 18,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "541:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 21,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nodeType": "VariableDeclaration",
                  "scope": 28,
                  "src": "557:17:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 20,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "557:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 23,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 28,
                  "src": "576:14:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 22,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "576:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "540:51:8"
            },
            "returnParameters": {
              "id": 27,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 28,
                  "src": "610:4:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 25,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "610:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "609:6:8"
            },
            "scope": 38,
            "src": "519:97:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "functionSelector": "095ea7b3",
            "id": 37,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "approve",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 33,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 30,
                  "mutability": "mutable",
                  "name": "spender",
                  "nodeType": "VariableDeclaration",
                  "scope": 37,
                  "src": "638:15:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 29,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "638:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 32,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 37,
                  "src": "655:14:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 31,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "655:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "637:33:8"
            },
            "returnParameters": {
              "id": 36,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 35,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 37,
                  "src": "689:4:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 34,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "689:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "688:6:8"
            },
            "scope": 38,
            "src": "621:74:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 845,
        "src": "414:283:8"
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 39,
              "name": "ERC20",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1494,
              "src": "719:5:8"
            },
            "id": 40,
            "nodeType": "InheritanceSpecifier",
            "src": "719:5:8"
          },
          {
            "baseName": {
              "id": 41,
              "name": "ERC20Burnable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1556,
              "src": "726:13:8"
            },
            "id": 42,
            "nodeType": "InheritanceSpecifier",
            "src": "726:13:8"
          }
        ],
        "contractDependencies": [
          1494,
          1556,
          1935,
          2013,
          2038
        ],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 108,
        "linearizedBaseContracts": [
          108,
          1556,
          1494,
          2038,
          2013,
          1935
        ],
        "name": "BTCUP",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 44,
            "mutability": "mutable",
            "name": "parentAddress",
            "nodeType": "VariableDeclaration",
            "scope": 108,
            "src": "746:21:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 43,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "746:7:8",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 57,
              "nodeType": "Block",
              "src": "839:47:8",
              "statements": [
                {
                  "expression": {
                    "id": 55,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 53,
                      "name": "parentAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 44,
                      "src": "849:13:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 54,
                      "name": "_parentAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 46,
                      "src": "865:14:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "849:30:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 56,
                  "nodeType": "ExpressionStatement",
                  "src": "849:30:8"
                }
              ]
            },
            "id": 58,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "426974636f696e205570",
                    "id": 49,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "816:12:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_9cbc1d0721872492c3eae100dd6a7dad3b4b199dc4e72a46010b2b1c98a11964",
                      "typeString": "literal_string \"Bitcoin Up\""
                    },
                    "value": "Bitcoin Up"
                  },
                  {
                    "hexValue": "4254435550",
                    "id": 50,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "830:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_f92903022a172a42cae03bdc1621474c2ab6bc2b8980d8251e05283c61f8c975",
                      "typeString": "literal_string \"BTCUP\""
                    },
                    "value": "BTCUP"
                  }
                ],
                "id": 51,
                "modifierName": {
                  "id": 48,
                  "name": "ERC20",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 1494,
                  "src": "810:5:8"
                },
                "nodeType": "ModifierInvocation",
                "src": "810:28:8"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 47,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 46,
                  "mutability": "mutable",
                  "name": "_parentAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 58,
                  "src": "786:22:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 45,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "786:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "785:24:8"
            },
            "returnParameters": {
              "id": 52,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "839:0:8"
            },
            "scope": 108,
            "src": "774:112:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 71,
              "nodeType": "Block",
              "src": "942:43:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 66,
                          "name": "tx",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -26,
                          "src": "958:2:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_transaction",
                            "typeString": "tx"
                          }
                        },
                        "id": 67,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "origin",
                        "nodeType": "MemberAccess",
                        "src": "958:9:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 68,
                        "name": "quantity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60,
                        "src": "969:8:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 65,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1354,
                      "src": "952:5:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 69,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "952:26:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 70,
                  "nodeType": "ExpressionStatement",
                  "src": "952:26:8"
                }
              ]
            },
            "functionSelector": "a0712d68",
            "id": 72,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 63,
                "modifierName": {
                  "id": 62,
                  "name": "onlyParent",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 107,
                  "src": "931:10:8"
                },
                "nodeType": "ModifierInvocation",
                "src": "931:10:8"
              }
            ],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 61,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60,
                  "mutability": "mutable",
                  "name": "quantity",
                  "nodeType": "VariableDeclaration",
                  "scope": 72,
                  "src": "906:16:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 59,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "906:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "905:18:8"
            },
            "returnParameters": {
              "id": 64,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "942:0:8"
            },
            "scope": 108,
            "src": "892:93:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1516
            ],
            "body": {
              "id": 86,
              "nodeType": "Block",
              "src": "1050:46:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 81,
                          "name": "tx",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -26,
                          "src": "1069:2:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_transaction",
                            "typeString": "tx"
                          }
                        },
                        "id": 82,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "origin",
                        "nodeType": "MemberAccess",
                        "src": "1069:9:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 83,
                        "name": "quantity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 74,
                        "src": "1080:8:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 80,
                      "name": "burnFrom",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1555,
                      "src": "1060:8:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 84,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1060:29:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 85,
                  "nodeType": "ExpressionStatement",
                  "src": "1060:29:8"
                }
              ]
            },
            "functionSelector": "42966c68",
            "id": 87,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 78,
                "modifierName": {
                  "id": 77,
                  "name": "onlyParent",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 107,
                  "src": "1039:10:8"
                },
                "nodeType": "ModifierInvocation",
                "src": "1039:10:8"
              }
            ],
            "name": "burn",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 76,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1030:8:8"
            },
            "parameters": {
              "id": 75,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 74,
                  "mutability": "mutable",
                  "name": "quantity",
                  "nodeType": "VariableDeclaration",
                  "scope": 87,
                  "src": "1005:16:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 73,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1005:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1004:18:8"
            },
            "returnParameters": {
              "id": 79,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1050:0:8"
            },
            "scope": 108,
            "src": "991:105:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1023
            ],
            "body": {
              "id": 95,
              "nodeType": "Block",
              "src": "1159:25:8",
              "statements": [
                {
                  "expression": {
                    "hexValue": "36",
                    "id": 93,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1176:1:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_6_by_1",
                      "typeString": "int_const 6"
                    },
                    "value": "6"
                  },
                  "functionReturnParameters": 92,
                  "id": 94,
                  "nodeType": "Return",
                  "src": "1169:8:8"
                }
              ]
            },
            "functionSelector": "313ce567",
            "id": 96,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "decimals",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 89,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1134:8:8"
            },
            "parameters": {
              "id": 88,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1119:2:8"
            },
            "returnParameters": {
              "id": 92,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 91,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 96,
                  "src": "1152:5:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 90,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "1152:5:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1151:7:8"
            },
            "scope": 108,
            "src": "1102:82:8",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 106,
              "nodeType": "Block",
              "src": "1210:64:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 102,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 99,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1228:3:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 100,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "1228:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 101,
                          "name": "parentAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 44,
                          "src": "1242:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1228:27:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 98,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1220:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 103,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1220:36:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 104,
                  "nodeType": "ExpressionStatement",
                  "src": "1220:36:8"
                },
                {
                  "id": 105,
                  "nodeType": "PlaceholderStatement",
                  "src": "1266:1:8"
                }
              ]
            },
            "id": 107,
            "name": "onlyParent",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 97,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1210:0:8"
            },
            "src": "1190:84:8",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 845,
        "src": "700:576:8"
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 109,
              "name": "ERC20",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1494,
              "src": "1299:5:8"
            },
            "id": 110,
            "nodeType": "InheritanceSpecifier",
            "src": "1299:5:8"
          },
          {
            "baseName": {
              "id": 111,
              "name": "ERC20Burnable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1556,
              "src": "1306:13:8"
            },
            "id": 112,
            "nodeType": "InheritanceSpecifier",
            "src": "1306:13:8"
          }
        ],
        "contractDependencies": [
          1494,
          1556,
          1935,
          2013,
          2038
        ],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 178,
        "linearizedBaseContracts": [
          178,
          1556,
          1494,
          2038,
          2013,
          1935
        ],
        "name": "BTCDOWN",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 114,
            "mutability": "mutable",
            "name": "parentAddress",
            "nodeType": "VariableDeclaration",
            "scope": 178,
            "src": "1326:21:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 113,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1326:7:8",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 127,
              "nodeType": "Block",
              "src": "1423:47:8",
              "statements": [
                {
                  "expression": {
                    "id": 125,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 123,
                      "name": "parentAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 114,
                      "src": "1433:13:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 124,
                      "name": "_parentAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 116,
                      "src": "1449:14:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "1433:30:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 126,
                  "nodeType": "ExpressionStatement",
                  "src": "1433:30:8"
                }
              ]
            },
            "id": 128,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "426974636f696e20446f776e",
                    "id": 119,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1396:14:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_165fe89d7acd7320260d3007f731660e2a452d2e9dbef2c2e44ee15c6b8bc1ec",
                      "typeString": "literal_string \"Bitcoin Down\""
                    },
                    "value": "Bitcoin Down"
                  },
                  {
                    "hexValue": "425443444f574e",
                    "id": 120,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1412:9:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_72f3d7098f717fcc170dbb6c7dad0b9049f1ed825e03177180edf7a0240d28f2",
                      "typeString": "literal_string \"BTCDOWN\""
                    },
                    "value": "BTCDOWN"
                  }
                ],
                "id": 121,
                "modifierName": {
                  "id": 118,
                  "name": "ERC20",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 1494,
                  "src": "1390:5:8"
                },
                "nodeType": "ModifierInvocation",
                "src": "1390:32:8"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 117,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 116,
                  "mutability": "mutable",
                  "name": "_parentAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 128,
                  "src": "1366:22:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 115,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1366:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1365:24:8"
            },
            "returnParameters": {
              "id": 122,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1423:0:8"
            },
            "scope": 178,
            "src": "1354:116:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 141,
              "nodeType": "Block",
              "src": "1526:43:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 136,
                          "name": "tx",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -26,
                          "src": "1542:2:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_transaction",
                            "typeString": "tx"
                          }
                        },
                        "id": 137,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "origin",
                        "nodeType": "MemberAccess",
                        "src": "1542:9:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 138,
                        "name": "quantity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 130,
                        "src": "1553:8:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 135,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1354,
                      "src": "1536:5:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 139,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1536:26:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 140,
                  "nodeType": "ExpressionStatement",
                  "src": "1536:26:8"
                }
              ]
            },
            "functionSelector": "a0712d68",
            "id": 142,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 133,
                "modifierName": {
                  "id": 132,
                  "name": "onlyParent",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 177,
                  "src": "1515:10:8"
                },
                "nodeType": "ModifierInvocation",
                "src": "1515:10:8"
              }
            ],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 131,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 130,
                  "mutability": "mutable",
                  "name": "quantity",
                  "nodeType": "VariableDeclaration",
                  "scope": 142,
                  "src": "1490:16:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 129,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1490:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1489:18:8"
            },
            "returnParameters": {
              "id": 134,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1526:0:8"
            },
            "scope": 178,
            "src": "1476:93:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1516
            ],
            "body": {
              "id": 156,
              "nodeType": "Block",
              "src": "1634:46:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 151,
                          "name": "tx",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -26,
                          "src": "1653:2:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_transaction",
                            "typeString": "tx"
                          }
                        },
                        "id": 152,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "origin",
                        "nodeType": "MemberAccess",
                        "src": "1653:9:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 153,
                        "name": "quantity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 144,
                        "src": "1664:8:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 150,
                      "name": "burnFrom",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1555,
                      "src": "1644:8:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 154,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1644:29:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 155,
                  "nodeType": "ExpressionStatement",
                  "src": "1644:29:8"
                }
              ]
            },
            "functionSelector": "42966c68",
            "id": 157,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 148,
                "modifierName": {
                  "id": 147,
                  "name": "onlyParent",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 177,
                  "src": "1623:10:8"
                },
                "nodeType": "ModifierInvocation",
                "src": "1623:10:8"
              }
            ],
            "name": "burn",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 146,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1614:8:8"
            },
            "parameters": {
              "id": 145,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 144,
                  "mutability": "mutable",
                  "name": "quantity",
                  "nodeType": "VariableDeclaration",
                  "scope": 157,
                  "src": "1589:16:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 143,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1589:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1588:18:8"
            },
            "returnParameters": {
              "id": 149,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1634:0:8"
            },
            "scope": 178,
            "src": "1575:105:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1023
            ],
            "body": {
              "id": 165,
              "nodeType": "Block",
              "src": "1743:25:8",
              "statements": [
                {
                  "expression": {
                    "hexValue": "36",
                    "id": 163,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1760:1:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_6_by_1",
                      "typeString": "int_const 6"
                    },
                    "value": "6"
                  },
                  "functionReturnParameters": 162,
                  "id": 164,
                  "nodeType": "Return",
                  "src": "1753:8:8"
                }
              ]
            },
            "functionSelector": "313ce567",
            "id": 166,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "decimals",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 159,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1718:8:8"
            },
            "parameters": {
              "id": 158,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1703:2:8"
            },
            "returnParameters": {
              "id": 162,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 161,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 166,
                  "src": "1736:5:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 160,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "1736:5:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1735:7:8"
            },
            "scope": 178,
            "src": "1686:82:8",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 176,
              "nodeType": "Block",
              "src": "1794:64:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 172,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 169,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1812:3:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 170,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "1812:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 171,
                          "name": "parentAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 114,
                          "src": "1826:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1812:27:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 168,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1804:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 173,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1804:36:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 174,
                  "nodeType": "ExpressionStatement",
                  "src": "1804:36:8"
                },
                {
                  "id": 175,
                  "nodeType": "PlaceholderStatement",
                  "src": "1850:1:8"
                }
              ]
            },
            "id": 177,
            "name": "onlyParent",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 167,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1794:0:8"
            },
            "src": "1774:84:8",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 845,
        "src": "1279:581:8"
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 179,
              "name": "Ownable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 948,
              "src": "1892:7:8"
            },
            "id": 180,
            "nodeType": "InheritanceSpecifier",
            "src": "1892:7:8"
          }
        ],
        "contractDependencies": [
          108,
          178,
          948,
          1935
        ],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 844,
        "linearizedBaseContracts": [
          844,
          948,
          1935
        ],
        "name": "LeveragedTrading",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 183,
            "libraryName": {
              "id": 181,
              "name": "SafeMath",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1868,
              "src": "1912:8:8"
            },
            "nodeType": "UsingForDirective",
            "src": "1906:27:8",
            "typeName": {
              "id": 182,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1925:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "constant": false,
            "functionSelector": "f0156e8a",
            "id": 188,
            "mutability": "mutable",
            "name": "priceBtcUp",
            "nodeType": "VariableDeclaration",
            "scope": 844,
            "src": "1939:35:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 184,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1939:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "commonType": {
                "typeIdentifier": "t_rational_1000000_by_1",
                "typeString": "int_const 1000000"
              },
              "id": 187,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "lValueRequested": false,
              "leftExpression": {
                "hexValue": "3130",
                "id": 185,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "1967:2:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_10_by_1",
                  "typeString": "int_const 10"
                },
                "value": "10"
              },
              "nodeType": "BinaryOperation",
              "operator": "**",
              "rightExpression": {
                "hexValue": "36",
                "id": 186,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "1973:1:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_6_by_1",
                  "typeString": "int_const 6"
                },
                "value": "6"
              },
              "src": "1967:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1000000_by_1",
                "typeString": "int_const 1000000"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "0c3e5343",
            "id": 193,
            "mutability": "mutable",
            "name": "priceBtcDown",
            "nodeType": "VariableDeclaration",
            "scope": 844,
            "src": "1980:37:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 189,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1980:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "commonType": {
                "typeIdentifier": "t_rational_1000000_by_1",
                "typeString": "int_const 1000000"
              },
              "id": 192,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "lValueRequested": false,
              "leftExpression": {
                "hexValue": "3130",
                "id": 190,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "2010:2:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_10_by_1",
                  "typeString": "int_const 10"
                },
                "value": "10"
              },
              "nodeType": "BinaryOperation",
              "operator": "**",
              "rightExpression": {
                "hexValue": "36",
                "id": 191,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "2016:1:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_6_by_1",
                  "typeString": "int_const 6"
                },
                "value": "6"
              },
              "src": "2010:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1000000_by_1",
                "typeString": "int_const 1000000"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "dde7be2c",
            "id": 196,
            "mutability": "mutable",
            "name": "collateralBtcUp",
            "nodeType": "VariableDeclaration",
            "scope": 844,
            "src": "2045:34:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 194,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "2045:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "30",
              "id": 195,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "2078:1:8",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_0_by_1",
                "typeString": "int_const 0"
              },
              "value": "0"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "14d7c6d2",
            "id": 199,
            "mutability": "mutable",
            "name": "collateralBtcDown",
            "nodeType": "VariableDeclaration",
            "scope": 844,
            "src": "2107:36:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 197,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "2107:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "30",
              "id": 198,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "2142:1:8",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_0_by_1",
                "typeString": "int_const 0"
              },
              "value": "0"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "0034b9cc",
            "id": 202,
            "mutability": "mutable",
            "name": "amountBtcUp",
            "nodeType": "VariableDeclaration",
            "scope": 844,
            "src": "2150:30:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 200,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "2150:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "30",
              "id": 201,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "2179:1:8",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_0_by_1",
                "typeString": "int_const 0"
              },
              "value": "0"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "b75cbe0b",
            "id": 205,
            "mutability": "mutable",
            "name": "amountBtcDown",
            "nodeType": "VariableDeclaration",
            "scope": 844,
            "src": "2210:32:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 203,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "2210:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "30",
              "id": 204,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "2241:1:8",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_0_by_1",
                "typeString": "int_const 0"
              },
              "value": "0"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "f4352c57",
            "id": 208,
            "mutability": "mutable",
            "name": "lastBtcPrice",
            "nodeType": "VariableDeclaration",
            "scope": 844,
            "src": "2271:31:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 206,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "2271:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "30",
              "id": 207,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "2301:1:8",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_0_by_1",
                "typeString": "int_const 0"
              },
              "value": "0"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "feae67b0",
            "id": 211,
            "mutability": "mutable",
            "name": "poolIsInitialized",
            "nodeType": "VariableDeclaration",
            "scope": 844,
            "src": "2352:37:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 209,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "2352:4:8",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": {
              "hexValue": "66616c7365",
              "id": 210,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "bool",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "2384:5:8",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              },
              "value": "false"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 214,
            "mutability": "mutable",
            "name": "addressUsdc",
            "nodeType": "VariableDeclaration",
            "scope": 844,
            "src": "2396:64:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 212,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "2396:7:8",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": {
              "hexValue": "307862376134463345393039374330386441303935313762356142383737463761393137323234656465",
              "id": 213,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "2418:42:8",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              },
              "value": "0xb7a4F3E9097C08dA09517b5aB877F7a917224ede"
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 217,
            "mutability": "mutable",
            "name": "addressBtcUSDFeed",
            "nodeType": "VariableDeclaration",
            "scope": 844,
            "src": "2526:71:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 215,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "2526:7:8",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": {
              "hexValue": "307836313335623133333235626643344230303237384234616243356532306262636532443635383065",
              "id": 216,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "2555:42:8",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              },
              "value": "0x6135b13325bfC4B00278B4abC5e20bbce2D6580e"
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 220,
            "mutability": "mutable",
            "name": "btcUp",
            "nodeType": "VariableDeclaration",
            "scope": 844,
            "src": "2672:11:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_BTCUP_$108",
              "typeString": "contract BTCUP"
            },
            "typeName": {
              "id": 219,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 218,
                "name": "BTCUP",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 108,
                "src": "2672:5:8"
              },
              "referencedDeclaration": 108,
              "src": "2672:5:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_BTCUP_$108",
                "typeString": "contract BTCUP"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 223,
            "mutability": "mutable",
            "name": "btcDown",
            "nodeType": "VariableDeclaration",
            "scope": 844,
            "src": "2689:15:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_BTCDOWN_$178",
              "typeString": "contract BTCDOWN"
            },
            "typeName": {
              "id": 222,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 221,
                "name": "BTCDOWN",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 178,
                "src": "2689:7:8"
              },
              "referencedDeclaration": 178,
              "src": "2689:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_BTCDOWN_$178",
                "typeString": "contract BTCDOWN"
              }
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 276,
              "nodeType": "Block",
              "src": "2772:284:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 232,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "2790:18:8",
                        "subExpression": {
                          "id": 231,
                          "name": "poolIsInitialized",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 211,
                          "src": "2791:17:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "54686520706f6f6c2077617320616c726561647920696e697469617465642e",
                        "id": 233,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2810:33:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_580e872a0bf3ae438081ad6284342a647742aae71fdfc53b8a10245734a22e81",
                          "typeString": "literal_string \"The pool was already initiated.\""
                        },
                        "value": "The pool was already initiated."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_580e872a0bf3ae438081ad6284342a647742aae71fdfc53b8a10245734a22e81",
                          "typeString": "literal_string \"The pool was already initiated.\""
                        }
                      ],
                      "id": 230,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2782:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 234,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2782:62:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 235,
                  "nodeType": "ExpressionStatement",
                  "src": "2782:62:8"
                },
                {
                  "expression": {
                    "id": 245,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 236,
                      "name": "btcUp",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 220,
                      "src": "2855:5:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_BTCUP_$108",
                        "typeString": "contract BTCUP"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "id": 242,
                              "name": "this",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -28,
                              "src": "2881:4:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_LeveragedTrading_$844",
                                "typeString": "contract LeveragedTrading"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_LeveragedTrading_$844",
                                "typeString": "contract LeveragedTrading"
                              }
                            ],
                            "id": 241,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2873:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 240,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "2873:7:8",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 243,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2873:13:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 239,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "2863:9:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_creation_nonpayable$_t_address_$returns$_t_contract$_BTCUP_$108_$",
                          "typeString": "function (address) returns (contract BTCUP)"
                        },
                        "typeName": {
                          "id": 238,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 237,
                            "name": "BTCUP",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 108,
                            "src": "2867:5:8"
                          },
                          "referencedDeclaration": 108,
                          "src": "2867:5:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_BTCUP_$108",
                            "typeString": "contract BTCUP"
                          }
                        }
                      },
                      "id": 244,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2863:24:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_BTCUP_$108",
                        "typeString": "contract BTCUP"
                      }
                    },
                    "src": "2855:32:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_BTCUP_$108",
                      "typeString": "contract BTCUP"
                    }
                  },
                  "id": 246,
                  "nodeType": "ExpressionStatement",
                  "src": "2855:32:8"
                },
                {
                  "expression": {
                    "id": 256,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 247,
                      "name": "btcDown",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 223,
                      "src": "2897:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_BTCDOWN_$178",
                        "typeString": "contract BTCDOWN"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "id": 253,
                              "name": "this",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -28,
                              "src": "2927:4:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_LeveragedTrading_$844",
                                "typeString": "contract LeveragedTrading"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_LeveragedTrading_$844",
                                "typeString": "contract LeveragedTrading"
                              }
                            ],
                            "id": 252,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2919:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 251,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "2919:7:8",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 254,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2919:13:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 250,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "2907:11:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_creation_nonpayable$_t_address_$returns$_t_contract$_BTCDOWN_$178_$",
                          "typeString": "function (address) returns (contract BTCDOWN)"
                        },
                        "typeName": {
                          "id": 249,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 248,
                            "name": "BTCDOWN",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 178,
                            "src": "2911:7:8"
                          },
                          "referencedDeclaration": 178,
                          "src": "2911:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_BTCDOWN_$178",
                            "typeString": "contract BTCDOWN"
                          }
                        }
                      },
                      "id": 255,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2907:26:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_BTCDOWN_$178",
                        "typeString": "contract BTCDOWN"
                      }
                    },
                    "src": "2897:36:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_BTCDOWN_$178",
                      "typeString": "contract BTCDOWN"
                    }
                  },
                  "id": 257,
                  "nodeType": "ExpressionStatement",
                  "src": "2897:36:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "32",
                            "id": 261,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2970:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_2_by_1",
                              "typeString": "int_const 2"
                            },
                            "value": "2"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_2_by_1",
                              "typeString": "int_const 2"
                            }
                          ],
                          "expression": {
                            "id": 259,
                            "name": "amountUsdc",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 225,
                            "src": "2955:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 260,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "div",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1777,
                          "src": "2955:14:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 262,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2955:17:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 258,
                      "name": "issueBtcUp",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 344,
                      "src": "2944:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 263,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2944:29:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 264,
                  "nodeType": "ExpressionStatement",
                  "src": "2944:29:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "32",
                            "id": 268,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3011:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_2_by_1",
                              "typeString": "int_const 2"
                            },
                            "value": "2"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_2_by_1",
                              "typeString": "int_const 2"
                            }
                          ],
                          "expression": {
                            "id": 266,
                            "name": "amountUsdc",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 225,
                            "src": "2996:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 267,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "div",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1777,
                          "src": "2996:14:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 269,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2996:17:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 265,
                      "name": "issueBtcDown",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 411,
                      "src": "2983:12:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 270,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2983:31:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 271,
                  "nodeType": "ExpressionStatement",
                  "src": "2983:31:8"
                },
                {
                  "expression": {
                    "id": 274,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 272,
                      "name": "poolIsInitialized",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 211,
                      "src": "3025:17:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 273,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3045:4:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "3025:24:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 275,
                  "nodeType": "ExpressionStatement",
                  "src": "3025:24:8"
                }
              ]
            },
            "functionSelector": "98881bc9",
            "id": 277,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 228,
                "modifierName": {
                  "id": 227,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 891,
                  "src": "2762:9:8"
                },
                "nodeType": "ModifierInvocation",
                "src": "2762:9:8"
              }
            ],
            "name": "initializePool",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 226,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 225,
                  "mutability": "mutable",
                  "name": "amountUsdc",
                  "nodeType": "VariableDeclaration",
                  "scope": 277,
                  "src": "2735:18:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 224,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2735:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2734:20:8"
            },
            "returnParameters": {
              "id": 229,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2772:0:8"
            },
            "scope": 844,
            "src": "2711:345:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 343,
              "nodeType": "Block",
              "src": "3109:486:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 282,
                      "name": "rebalanceLeveragedTokens",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 601,
                      "src": "3119:24:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 283,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3119:26:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 284,
                  "nodeType": "ExpressionStatement",
                  "src": "3119:26:8"
                },
                {
                  "expression": {
                    "id": 288,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 285,
                      "name": "priceBtcUp",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 188,
                      "src": "3164:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 286,
                        "name": "getBtcUpPrice",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 670,
                        "src": "3177:13:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                          "typeString": "function () view returns (uint256)"
                        }
                      },
                      "id": 287,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3177:15:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3164:28:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 289,
                  "nodeType": "ExpressionStatement",
                  "src": "3164:28:8"
                },
                {
                  "assignments": [
                    291
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 291,
                      "mutability": "mutable",
                      "name": "amountLeveragedTokens",
                      "nodeType": "VariableDeclaration",
                      "scope": 343,
                      "src": "3202:29:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 290,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3202:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 301,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 299,
                        "name": "priceBtcUp",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 188,
                        "src": "3262:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_rational_1000000_by_1",
                              "typeString": "int_const 1000000"
                            },
                            "id": 296,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "leftExpression": {
                              "hexValue": "3130",
                              "id": 294,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3249:2:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_10_by_1",
                                "typeString": "int_const 10"
                              },
                              "value": "10"
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "**",
                            "rightExpression": {
                              "hexValue": "36",
                              "id": 295,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3255:1:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_6_by_1",
                                "typeString": "int_const 6"
                              },
                              "value": "6"
                            },
                            "src": "3249:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1000000_by_1",
                              "typeString": "int_const 1000000"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_1000000_by_1",
                              "typeString": "int_const 1000000"
                            }
                          ],
                          "expression": {
                            "id": 292,
                            "name": "amountUsdc",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 279,
                            "src": "3234:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 293,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "mul",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1762,
                          "src": "3234:14:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 297,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3234:23:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 298,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "div",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1777,
                      "src": "3234:27:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                        "typeString": "function (uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 300,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3234:39:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3202:71:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 305,
                        "name": "amountLeveragedTokens",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 291,
                        "src": "3295:21:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 302,
                        "name": "btcUp",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 220,
                        "src": "3284:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_BTCUP_$108",
                          "typeString": "contract BTCUP"
                        }
                      },
                      "id": 304,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "mint",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 72,
                      "src": "3284:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256) external"
                      }
                    },
                    "id": 306,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3284:33:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 307,
                  "nodeType": "ExpressionStatement",
                  "src": "3284:33:8"
                },
                {
                  "expression": {
                    "id": 313,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 308,
                      "name": "amountBtcUp",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 202,
                      "src": "3327:11:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 311,
                          "name": "amountLeveragedTokens",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 291,
                          "src": "3357:21:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "id": 309,
                          "name": "amountBtcUp",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 202,
                          "src": "3341:11:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 310,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "add",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1732,
                        "src": "3341:15:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 312,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3341:38:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3327:52:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 314,
                  "nodeType": "ExpressionStatement",
                  "src": "3327:52:8"
                },
                {
                  "expression": {
                    "id": 320,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 315,
                      "name": "collateralBtcUp",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 196,
                      "src": "3389:15:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 318,
                          "name": "amountUsdc",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 279,
                          "src": "3427:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "id": 316,
                          "name": "collateralBtcUp",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 196,
                          "src": "3407:15:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 317,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "add",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1732,
                        "src": "3407:19:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 319,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3407:31:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3389:49:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 321,
                  "nodeType": "ExpressionStatement",
                  "src": "3389:49:8"
                },
                {
                  "assignments": [
                    324
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 324,
                      "mutability": "mutable",
                      "name": "usdc",
                      "nodeType": "VariableDeclaration",
                      "scope": 343,
                      "src": "3449:11:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$38",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "id": 323,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 322,
                          "name": "IERC20",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 38,
                          "src": "3449:6:8"
                        },
                        "referencedDeclaration": 38,
                        "src": "3449:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$38",
                          "typeString": "contract IERC20"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 328,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 326,
                        "name": "addressUsdc",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 214,
                        "src": "3470:11:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 325,
                      "name": "IERC20",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 38,
                      "src": "3463:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IERC20_$38_$",
                        "typeString": "type(contract IERC20)"
                      }
                    },
                    "id": 327,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3463:19:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$38",
                      "typeString": "contract IERC20"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3449:33:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 332,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "3518:3:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 333,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "3518:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "id": 336,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "3538:4:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_LeveragedTrading_$844",
                                  "typeString": "contract LeveragedTrading"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_LeveragedTrading_$844",
                                  "typeString": "contract LeveragedTrading"
                                }
                              ],
                              "id": 335,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "3530:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 334,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "3530:7:8",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 337,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3530:13:8",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 338,
                            "name": "amountUsdc",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 279,
                            "src": "3545:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 330,
                            "name": "usdc",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 324,
                            "src": "3500:4:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$38",
                              "typeString": "contract IERC20"
                            }
                          },
                          "id": 331,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "transferFrom",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 28,
                          "src": "3500:17:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,address,uint256) external returns (bool)"
                          }
                        },
                        "id": 339,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3500:56:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "596f7520646f6e2774206861766520656e6f75676820555344432e",
                        "id": 340,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3558:29:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_fa81e2605579e88471722381a01380eff7db3c869a8b4d6c5142c052f717215d",
                          "typeString": "literal_string \"You don't have enough USDC.\""
                        },
                        "value": "You don't have enough USDC."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_fa81e2605579e88471722381a01380eff7db3c869a8b4d6c5142c052f717215d",
                          "typeString": "literal_string \"You don't have enough USDC.\""
                        }
                      ],
                      "id": 329,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3492:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 341,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3492:96:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 342,
                  "nodeType": "ExpressionStatement",
                  "src": "3492:96:8"
                }
              ]
            },
            "functionSelector": "f530c04a",
            "id": 344,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "issueBtcUp",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 280,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 279,
                  "mutability": "mutable",
                  "name": "amountUsdc",
                  "nodeType": "VariableDeclaration",
                  "scope": 344,
                  "src": "3082:18:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 278,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3082:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3081:20:8"
            },
            "returnParameters": {
              "id": 281,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3109:0:8"
            },
            "scope": 844,
            "src": "3062:533:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 410,
              "nodeType": "Block",
              "src": "3650:502:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 349,
                      "name": "rebalanceLeveragedTokens",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 601,
                      "src": "3660:24:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 350,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3660:26:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 351,
                  "nodeType": "ExpressionStatement",
                  "src": "3660:26:8"
                },
                {
                  "expression": {
                    "id": 355,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 352,
                      "name": "priceBtcDown",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 193,
                      "src": "3705:12:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 353,
                        "name": "getBtcDownPrice",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 691,
                        "src": "3720:15:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                          "typeString": "function () view returns (uint256)"
                        }
                      },
                      "id": 354,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3720:17:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3705:32:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 356,
                  "nodeType": "ExpressionStatement",
                  "src": "3705:32:8"
                },
                {
                  "assignments": [
                    358
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 358,
                      "mutability": "mutable",
                      "name": "amountLeveragedTokens",
                      "nodeType": "VariableDeclaration",
                      "scope": 410,
                      "src": "3747:29:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 357,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3747:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 368,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 366,
                        "name": "priceBtcDown",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 193,
                        "src": "3807:12:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_rational_1000000_by_1",
                              "typeString": "int_const 1000000"
                            },
                            "id": 363,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "leftExpression": {
                              "hexValue": "3130",
                              "id": 361,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3794:2:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_10_by_1",
                                "typeString": "int_const 10"
                              },
                              "value": "10"
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "**",
                            "rightExpression": {
                              "hexValue": "36",
                              "id": 362,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3800:1:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_6_by_1",
                                "typeString": "int_const 6"
                              },
                              "value": "6"
                            },
                            "src": "3794:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1000000_by_1",
                              "typeString": "int_const 1000000"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_1000000_by_1",
                              "typeString": "int_const 1000000"
                            }
                          ],
                          "expression": {
                            "id": 359,
                            "name": "amountUsdc",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 346,
                            "src": "3779:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 360,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "mul",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1762,
                          "src": "3779:14:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 364,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3779:23:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 365,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "div",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1777,
                      "src": "3779:27:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                        "typeString": "function (uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 367,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3779:41:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3747:73:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 372,
                        "name": "amountLeveragedTokens",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 358,
                        "src": "3844:21:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 369,
                        "name": "btcDown",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 223,
                        "src": "3831:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_BTCDOWN_$178",
                          "typeString": "contract BTCDOWN"
                        }
                      },
                      "id": 371,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "mint",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 142,
                      "src": "3831:12:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256) external"
                      }
                    },
                    "id": 373,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3831:35:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 374,
                  "nodeType": "ExpressionStatement",
                  "src": "3831:35:8"
                },
                {
                  "expression": {
                    "id": 380,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 375,
                      "name": "amountBtcDown",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 205,
                      "src": "3876:13:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 378,
                          "name": "amountLeveragedTokens",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 358,
                          "src": "3910:21:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "id": 376,
                          "name": "amountBtcDown",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 205,
                          "src": "3892:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 377,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "add",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1732,
                        "src": "3892:17:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 379,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3892:40:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3876:56:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 381,
                  "nodeType": "ExpressionStatement",
                  "src": "3876:56:8"
                },
                {
                  "expression": {
                    "id": 387,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 382,
                      "name": "collateralBtcDown",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 199,
                      "src": "3942:17:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 385,
                          "name": "amountUsdc",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 346,
                          "src": "3984:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "id": 383,
                          "name": "collateralBtcDown",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 199,
                          "src": "3962:17:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 384,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "add",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1732,
                        "src": "3962:21:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 386,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3962:33:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3942:53:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 388,
                  "nodeType": "ExpressionStatement",
                  "src": "3942:53:8"
                },
                {
                  "assignments": [
                    391
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 391,
                      "mutability": "mutable",
                      "name": "usdc",
                      "nodeType": "VariableDeclaration",
                      "scope": 410,
                      "src": "4006:11:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$38",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "id": 390,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 389,
                          "name": "IERC20",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 38,
                          "src": "4006:6:8"
                        },
                        "referencedDeclaration": 38,
                        "src": "4006:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$38",
                          "typeString": "contract IERC20"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 395,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 393,
                        "name": "addressUsdc",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 214,
                        "src": "4027:11:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 392,
                      "name": "IERC20",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 38,
                      "src": "4020:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IERC20_$38_$",
                        "typeString": "type(contract IERC20)"
                      }
                    },
                    "id": 394,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4020:19:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$38",
                      "typeString": "contract IERC20"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4006:33:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 399,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "4075:3:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 400,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "4075:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "id": 403,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "4095:4:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_LeveragedTrading_$844",
                                  "typeString": "contract LeveragedTrading"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_LeveragedTrading_$844",
                                  "typeString": "contract LeveragedTrading"
                                }
                              ],
                              "id": 402,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "4087:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 401,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "4087:7:8",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 404,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4087:13:8",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 405,
                            "name": "amountUsdc",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 346,
                            "src": "4102:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 397,
                            "name": "usdc",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 391,
                            "src": "4057:4:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$38",
                              "typeString": "contract IERC20"
                            }
                          },
                          "id": 398,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "transferFrom",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 28,
                          "src": "4057:17:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,address,uint256) external returns (bool)"
                          }
                        },
                        "id": 406,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4057:56:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "596f7520646f6e2774206861766520656e6f75676820555344432e",
                        "id": 407,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4115:29:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_fa81e2605579e88471722381a01380eff7db3c869a8b4d6c5142c052f717215d",
                          "typeString": "literal_string \"You don't have enough USDC.\""
                        },
                        "value": "You don't have enough USDC."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_fa81e2605579e88471722381a01380eff7db3c869a8b4d6c5142c052f717215d",
                          "typeString": "literal_string \"You don't have enough USDC.\""
                        }
                      ],
                      "id": 396,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4049:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 408,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4049:96:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 409,
                  "nodeType": "ExpressionStatement",
                  "src": "4049:96:8"
                }
              ]
            },
            "functionSelector": "c46d4f09",
            "id": 411,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "issueBtcDown",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 347,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 346,
                  "mutability": "mutable",
                  "name": "amountUsdc",
                  "nodeType": "VariableDeclaration",
                  "scope": 411,
                  "src": "3623:18:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 345,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3623:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3622:20:8"
            },
            "returnParameters": {
              "id": 348,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3650:0:8"
            },
            "scope": 844,
            "src": "3601:551:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 472,
              "nodeType": "Block",
              "src": "4217:427:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 416,
                      "name": "rebalanceLeveragedTokens",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 601,
                      "src": "4227:24:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 417,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4227:26:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 418,
                  "nodeType": "ExpressionStatement",
                  "src": "4227:26:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 422,
                        "name": "amountLeveragedTokens",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 413,
                        "src": "4274:21:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 419,
                        "name": "btcUp",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 220,
                        "src": "4263:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_BTCUP_$108",
                          "typeString": "contract BTCUP"
                        }
                      },
                      "id": 421,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "burn",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 87,
                      "src": "4263:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256) external"
                      }
                    },
                    "id": 423,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4263:33:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 424,
                  "nodeType": "ExpressionStatement",
                  "src": "4263:33:8"
                },
                {
                  "expression": {
                    "id": 428,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 425,
                      "name": "priceBtcUp",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 188,
                      "src": "4307:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 426,
                        "name": "getBtcUpPrice",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 670,
                        "src": "4320:13:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                          "typeString": "function () view returns (uint256)"
                        }
                      },
                      "id": 427,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4320:15:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4307:28:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 429,
                  "nodeType": "ExpressionStatement",
                  "src": "4307:28:8"
                },
                {
                  "assignments": [
                    431
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 431,
                      "mutability": "mutable",
                      "name": "amountUsdc",
                      "nodeType": "VariableDeclaration",
                      "scope": 472,
                      "src": "4345:18:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 430,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4345:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 441,
                  "initialValue": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_rational_1000000_by_1",
                          "typeString": "int_const 1000000"
                        },
                        "id": 439,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "leftExpression": {
                          "hexValue": "3130",
                          "id": 437,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4408:2:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_10_by_1",
                            "typeString": "int_const 10"
                          },
                          "value": "10"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "**",
                        "rightExpression": {
                          "hexValue": "36",
                          "id": 438,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4414:1:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_6_by_1",
                            "typeString": "int_const 6"
                          },
                          "value": "6"
                        },
                        "src": "4408:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1000000_by_1",
                          "typeString": "int_const 1000000"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_rational_1000000_by_1",
                          "typeString": "int_const 1000000"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "id": 434,
                            "name": "priceBtcUp",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 188,
                            "src": "4392:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 432,
                            "name": "amountLeveragedTokens",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 413,
                            "src": "4366:21:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 433,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "mul",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1762,
                          "src": "4366:25:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 435,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4366:37:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 436,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "div",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1777,
                      "src": "4366:41:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                        "typeString": "function (uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 440,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4366:50:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4345:71:8"
                },
                {
                  "expression": {
                    "id": 447,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 442,
                      "name": "amountBtcUp",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 202,
                      "src": "4427:11:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 445,
                          "name": "amountLeveragedTokens",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 413,
                          "src": "4457:21:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "id": 443,
                          "name": "amountBtcUp",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 202,
                          "src": "4441:11:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 444,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sub",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1747,
                        "src": "4441:15:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 446,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4441:38:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4427:52:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 448,
                  "nodeType": "ExpressionStatement",
                  "src": "4427:52:8"
                },
                {
                  "expression": {
                    "id": 454,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 449,
                      "name": "collateralBtcUp",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 196,
                      "src": "4489:15:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 452,
                          "name": "amountUsdc",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 431,
                          "src": "4527:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "id": 450,
                          "name": "collateralBtcUp",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 196,
                          "src": "4507:15:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 451,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sub",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1747,
                        "src": "4507:19:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 453,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4507:31:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4489:49:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 455,
                  "nodeType": "ExpressionStatement",
                  "src": "4489:49:8"
                },
                {
                  "assignments": [
                    458
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 458,
                      "mutability": "mutable",
                      "name": "usdc",
                      "nodeType": "VariableDeclaration",
                      "scope": 472,
                      "src": "4549:11:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$38",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "id": 457,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 456,
                          "name": "IERC20",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 38,
                          "src": "4549:6:8"
                        },
                        "referencedDeclaration": 38,
                        "src": "4549:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$38",
                          "typeString": "contract IERC20"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 462,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 460,
                        "name": "addressUsdc",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 214,
                        "src": "4570:11:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 459,
                      "name": "IERC20",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 38,
                      "src": "4563:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IERC20_$38_$",
                        "typeString": "type(contract IERC20)"
                      }
                    },
                    "id": 461,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4563:19:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$38",
                      "typeString": "contract IERC20"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4549:33:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 466,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "4613:3:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 467,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "4613:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 468,
                            "name": "amountUsdc",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 431,
                            "src": "4625:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 464,
                            "name": "usdc",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 458,
                            "src": "4599:4:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$38",
                              "typeString": "contract IERC20"
                            }
                          },
                          "id": 465,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "transfer",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 17,
                          "src": "4599:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) external returns (bool)"
                          }
                        },
                        "id": 469,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4599:37:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 463,
                      "name": "assert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -3,
                      "src": "4592:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 470,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4592:45:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 471,
                  "nodeType": "ExpressionStatement",
                  "src": "4592:45:8"
                }
              ]
            },
            "functionSelector": "d1ee539d",
            "id": 473,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "redeemBtcUp",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 414,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 413,
                  "mutability": "mutable",
                  "name": "amountLeveragedTokens",
                  "nodeType": "VariableDeclaration",
                  "scope": 473,
                  "src": "4179:29:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 412,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4179:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4178:31:8"
            },
            "returnParameters": {
              "id": 415,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4217:0:8"
            },
            "scope": 844,
            "src": "4158:486:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 534,
              "nodeType": "Block",
              "src": "4711:452:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 478,
                      "name": "rebalanceLeveragedTokens",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 601,
                      "src": "4721:24:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 479,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4721:26:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 480,
                  "nodeType": "ExpressionStatement",
                  "src": "4721:26:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 484,
                        "name": "amountLeveragedTokens",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 475,
                        "src": "4770:21:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 481,
                        "name": "btcDown",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 223,
                        "src": "4757:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_BTCDOWN_$178",
                          "typeString": "contract BTCDOWN"
                        }
                      },
                      "id": 483,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "burn",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 157,
                      "src": "4757:12:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256) external"
                      }
                    },
                    "id": 485,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4757:35:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 486,
                  "nodeType": "ExpressionStatement",
                  "src": "4757:35:8"
                },
                {
                  "expression": {
                    "id": 490,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 487,
                      "name": "priceBtcDown",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 193,
                      "src": "4803:12:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 488,
                        "name": "getBtcDownPrice",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 691,
                        "src": "4818:15:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                          "typeString": "function () view returns (uint256)"
                        }
                      },
                      "id": 489,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4818:17:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4803:32:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 491,
                  "nodeType": "ExpressionStatement",
                  "src": "4803:32:8"
                },
                {
                  "assignments": [
                    493
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 493,
                      "mutability": "mutable",
                      "name": "amountUsdc",
                      "nodeType": "VariableDeclaration",
                      "scope": 534,
                      "src": "4845:18:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 492,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4845:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 503,
                  "initialValue": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_rational_1000000_by_1",
                          "typeString": "int_const 1000000"
                        },
                        "id": 501,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "leftExpression": {
                          "hexValue": "3130",
                          "id": 499,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4910:2:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_10_by_1",
                            "typeString": "int_const 10"
                          },
                          "value": "10"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "**",
                        "rightExpression": {
                          "hexValue": "36",
                          "id": 500,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4916:1:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_6_by_1",
                            "typeString": "int_const 6"
                          },
                          "value": "6"
                        },
                        "src": "4910:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1000000_by_1",
                          "typeString": "int_const 1000000"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_rational_1000000_by_1",
                          "typeString": "int_const 1000000"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "id": 496,
                            "name": "priceBtcDown",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 193,
                            "src": "4892:12:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 494,
                            "name": "amountLeveragedTokens",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 475,
                            "src": "4866:21:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 495,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "mul",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1762,
                          "src": "4866:25:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 497,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4866:39:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 498,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "div",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1777,
                      "src": "4866:43:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                        "typeString": "function (uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 502,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4866:52:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4845:73:8"
                },
                {
                  "expression": {
                    "id": 509,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 504,
                      "name": "amountBtcDown",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 205,
                      "src": "4937:13:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 507,
                          "name": "amountLeveragedTokens",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 475,
                          "src": "4971:21:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "id": 505,
                          "name": "amountBtcDown",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 205,
                          "src": "4953:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 506,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sub",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1747,
                        "src": "4953:17:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 508,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4953:40:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4937:56:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 510,
                  "nodeType": "ExpressionStatement",
                  "src": "4937:56:8"
                },
                {
                  "expression": {
                    "id": 516,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 511,
                      "name": "collateralBtcDown",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 199,
                      "src": "5003:17:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 514,
                          "name": "amountUsdc",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 493,
                          "src": "5045:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "id": 512,
                          "name": "collateralBtcDown",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 199,
                          "src": "5023:17:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 513,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sub",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1747,
                        "src": "5023:21:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 515,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5023:33:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5003:53:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 517,
                  "nodeType": "ExpressionStatement",
                  "src": "5003:53:8"
                },
                {
                  "assignments": [
                    520
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 520,
                      "mutability": "mutable",
                      "name": "usdc",
                      "nodeType": "VariableDeclaration",
                      "scope": 534,
                      "src": "5067:11:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$38",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "id": 519,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 518,
                          "name": "IERC20",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 38,
                          "src": "5067:6:8"
                        },
                        "referencedDeclaration": 38,
                        "src": "5067:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$38",
                          "typeString": "contract IERC20"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 524,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 522,
                        "name": "addressUsdc",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 214,
                        "src": "5088:11:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 521,
                      "name": "IERC20",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 38,
                      "src": "5081:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IERC20_$38_$",
                        "typeString": "type(contract IERC20)"
                      }
                    },
                    "id": 523,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5081:19:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$38",
                      "typeString": "contract IERC20"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5067:33:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 528,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "5131:3:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 529,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "5131:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 530,
                            "name": "amountUsdc",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 493,
                            "src": "5144:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 526,
                            "name": "usdc",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 520,
                            "src": "5117:4:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$38",
                              "typeString": "contract IERC20"
                            }
                          },
                          "id": 527,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "transfer",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 17,
                          "src": "5117:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) external returns (bool)"
                          }
                        },
                        "id": 531,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5117:38:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 525,
                      "name": "assert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -3,
                      "src": "5110:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 532,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5110:46:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 533,
                  "nodeType": "ExpressionStatement",
                  "src": "5110:46:8"
                }
              ]
            },
            "functionSelector": "a14274e8",
            "id": 535,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "redeemBtcDown",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 476,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 475,
                  "mutability": "mutable",
                  "name": "amountLeveragedTokens",
                  "nodeType": "VariableDeclaration",
                  "scope": 535,
                  "src": "4673:29:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 474,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4673:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4672:31:8"
            },
            "returnParameters": {
              "id": 477,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4711:0:8"
            },
            "scope": 844,
            "src": "4650:513:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 600,
              "nodeType": "Block",
              "src": "5212:610:8",
              "statements": [
                {
                  "assignments": [
                    539
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 539,
                      "mutability": "mutable",
                      "name": "btcPrice",
                      "nodeType": "VariableDeclaration",
                      "scope": 600,
                      "src": "5222:16:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 538,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5222:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 542,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 540,
                      "name": "getBtcPrice",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 715,
                      "src": "5241:11:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                        "typeString": "function () view returns (uint256)"
                      }
                    },
                    "id": 541,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5241:13:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5222:32:8"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 551,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 545,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 543,
                            "name": "collateralBtcUp",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 196,
                            "src": "5269:15:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 544,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5287:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "5269:19:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        }
                      ],
                      "id": 546,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "5268:21:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "&&",
                    "rightExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 549,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 547,
                            "name": "collateralBtcDown",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 199,
                            "src": "5294:17:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 548,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5314:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "5294:21:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        }
                      ],
                      "id": 550,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "5293:23:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "5268:48:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 595,
                  "nodeType": "IfStatement",
                  "src": "5264:519:8",
                  "trueBody": {
                    "id": 594,
                    "nodeType": "Block",
                    "src": "5318:465:8",
                    "statements": [
                      {
                        "assignments": [
                          553
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 553,
                            "mutability": "mutable",
                            "name": "rebalanceAmount",
                            "nodeType": "VariableDeclaration",
                            "scope": 594,
                            "src": "5332:23:8",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 552,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "5332:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 557,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 555,
                              "name": "btcPrice",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 539,
                              "src": "5377:8:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 554,
                            "name": "getRebalanceAmount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 649,
                            "src": "5358:18:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (uint256) view returns (uint256)"
                            }
                          },
                          "id": 556,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5358:28:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5332:54:8"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          },
                          "id": 562,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "arguments": [
                              {
                                "id": 559,
                                "name": "btcPrice",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 539,
                                "src": "5412:8:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 558,
                              "name": "getSign",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 620,
                              "src": "5404:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_int256_$",
                                "typeString": "function (uint256) view returns (int256)"
                              }
                            },
                            "id": 560,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5404:17:8",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_int256",
                              "typeString": "int256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 561,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5424:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "5404:21:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 592,
                          "nodeType": "Block",
                          "src": "5609:163:8",
                          "statements": [
                            {
                              "expression": {
                                "id": 583,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 578,
                                  "name": "collateralBtcUp",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 196,
                                  "src": "5627:15:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "id": 581,
                                      "name": "rebalanceAmount",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 553,
                                      "src": "5665:15:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "expression": {
                                      "id": 579,
                                      "name": "collateralBtcUp",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 196,
                                      "src": "5645:15:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 580,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "sub",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1747,
                                    "src": "5645:19:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 582,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "5645:36:8",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "5627:54:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 584,
                              "nodeType": "ExpressionStatement",
                              "src": "5627:54:8"
                            },
                            {
                              "expression": {
                                "id": 590,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 585,
                                  "name": "collateralBtcDown",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 199,
                                  "src": "5699:17:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "id": 588,
                                      "name": "rebalanceAmount",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 553,
                                      "src": "5741:15:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "expression": {
                                      "id": 586,
                                      "name": "collateralBtcDown",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 199,
                                      "src": "5719:17:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 587,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "add",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1732,
                                    "src": "5719:21:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 589,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "5719:38:8",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "5699:58:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 591,
                              "nodeType": "ExpressionStatement",
                              "src": "5699:58:8"
                            }
                          ]
                        },
                        "id": 593,
                        "nodeType": "IfStatement",
                        "src": "5400:372:8",
                        "trueBody": {
                          "id": 577,
                          "nodeType": "Block",
                          "src": "5427:163:8",
                          "statements": [
                            {
                              "expression": {
                                "id": 568,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 563,
                                  "name": "collateralBtcUp",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 196,
                                  "src": "5445:15:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "id": 566,
                                      "name": "rebalanceAmount",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 553,
                                      "src": "5483:15:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "expression": {
                                      "id": 564,
                                      "name": "collateralBtcUp",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 196,
                                      "src": "5463:15:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 565,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "add",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1732,
                                    "src": "5463:19:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 567,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "5463:36:8",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "5445:54:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 569,
                              "nodeType": "ExpressionStatement",
                              "src": "5445:54:8"
                            },
                            {
                              "expression": {
                                "id": 575,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 570,
                                  "name": "collateralBtcDown",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 199,
                                  "src": "5517:17:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "id": 573,
                                      "name": "rebalanceAmount",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 553,
                                      "src": "5559:15:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "expression": {
                                      "id": 571,
                                      "name": "collateralBtcDown",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 199,
                                      "src": "5537:17:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 572,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "sub",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1747,
                                    "src": "5537:21:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 574,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "5537:38:8",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "5517:58:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 576,
                              "nodeType": "ExpressionStatement",
                              "src": "5517:58:8"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "id": 598,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 596,
                      "name": "lastBtcPrice",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 208,
                      "src": "5792:12:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 597,
                      "name": "btcPrice",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 539,
                      "src": "5807:8:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5792:23:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 599,
                  "nodeType": "ExpressionStatement",
                  "src": "5792:23:8"
                }
              ]
            },
            "functionSelector": "6e5d6615",
            "id": 601,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "rebalanceLeveragedTokens",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 536,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5202:2:8"
            },
            "returnParameters": {
              "id": 537,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5212:0:8"
            },
            "scope": 844,
            "src": "5169:653:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 619,
              "nodeType": "Block",
              "src": "6065:126:8",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 610,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 608,
                      "name": "btcPrice",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 603,
                      "src": "6079:8:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "id": 609,
                      "name": "lastBtcPrice",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 208,
                      "src": "6090:12:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "6079:23:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 617,
                    "nodeType": "Block",
                    "src": "6151:34:8",
                    "statements": [
                      {
                        "expression": {
                          "id": 615,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "-",
                          "prefix": true,
                          "src": "6172:2:8",
                          "subExpression": {
                            "hexValue": "31",
                            "id": 614,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "6173:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_minus_1_by_1",
                            "typeString": "int_const -1"
                          }
                        },
                        "functionReturnParameters": 607,
                        "id": 616,
                        "nodeType": "Return",
                        "src": "6165:9:8"
                      }
                    ]
                  },
                  "id": 618,
                  "nodeType": "IfStatement",
                  "src": "6075:110:8",
                  "trueBody": {
                    "id": 613,
                    "nodeType": "Block",
                    "src": "6104:33:8",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "31",
                          "id": 611,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6125:1:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          },
                          "value": "1"
                        },
                        "functionReturnParameters": 607,
                        "id": 612,
                        "nodeType": "Return",
                        "src": "6118:8:8"
                      }
                    ]
                  }
                }
              ]
            },
            "id": 620,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getSign",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 604,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 603,
                  "mutability": "mutable",
                  "name": "btcPrice",
                  "nodeType": "VariableDeclaration",
                  "scope": 620,
                  "src": "6016:16:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 602,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6016:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6015:18:8"
            },
            "returnParameters": {
              "id": 607,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 606,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 620,
                  "src": "6057:6:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  },
                  "typeName": {
                    "id": 605,
                    "name": "int256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6057:6:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6056:8:8"
            },
            "scope": 844,
            "src": "5999:192:8",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 648,
              "nodeType": "Block",
              "src": "6276:147:8",
              "statements": [
                {
                  "assignments": [
                    628
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 628,
                      "mutability": "mutable",
                      "name": "priceDiff",
                      "nodeType": "VariableDeclaration",
                      "scope": 648,
                      "src": "6286:17:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 627,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6286:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 632,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 630,
                        "name": "priceBtc",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 622,
                        "src": "6319:8:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 629,
                      "name": "getPriceDiff",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 819,
                      "src": "6306:12:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256) view returns (uint256)"
                      }
                    },
                    "id": 631,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6306:22:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6286:42:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_rational_1000000_by_1",
                          "typeString": "int_const 1000000"
                        },
                        "id": 645,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "leftExpression": {
                          "hexValue": "3130",
                          "id": 643,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6408:2:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_10_by_1",
                            "typeString": "int_const 10"
                          },
                          "value": "10"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "**",
                        "rightExpression": {
                          "hexValue": "36",
                          "id": 644,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6414:1:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_6_by_1",
                            "typeString": "int_const 6"
                          },
                          "value": "6"
                        },
                        "src": "6408:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1000000_by_1",
                          "typeString": "int_const 1000000"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_rational_1000000_by_1",
                          "typeString": "int_const 1000000"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "id": 639,
                                "name": "priceDiff",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 628,
                                "src": "6392:9:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 638,
                              "name": "L",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 775,
                              "src": "6390:1:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (uint256) pure returns (uint256)"
                              }
                            },
                            "id": 640,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6390:12:8",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "id": 634,
                                "name": "collateralBtcUp",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 196,
                                "src": "6350:15:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 635,
                                "name": "collateralBtcDown",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 199,
                                "src": "6367:17:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 633,
                              "name": "min",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 732,
                              "src": "6346:3:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 636,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6346:39:8",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 637,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "mul",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1762,
                          "src": "6346:43:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 641,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6346:57:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 642,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "div",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1777,
                      "src": "6346:61:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                        "typeString": "function (uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 646,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6346:70:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 626,
                  "id": 647,
                  "nodeType": "Return",
                  "src": "6339:77:8"
                }
              ]
            },
            "id": 649,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getRebalanceAmount",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 623,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 622,
                  "mutability": "mutable",
                  "name": "priceBtc",
                  "nodeType": "VariableDeclaration",
                  "scope": 649,
                  "src": "6226:16:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 621,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6226:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6225:18:8"
            },
            "returnParameters": {
              "id": 626,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 625,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 649,
                  "src": "6267:7:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 624,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6267:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6266:9:8"
            },
            "scope": 844,
            "src": "6198:225:8",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 669,
              "nodeType": "Block",
              "src": "6514:102:8",
              "statements": [
                {
                  "expression": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 656,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 654,
                        "name": "amountBtcUp",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 202,
                        "src": "6531:11:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "hexValue": "30",
                        "id": 655,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6546:1:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "src": "6531:16:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseExpression": {
                      "arguments": [
                        {
                          "id": 665,
                          "name": "amountBtcUp",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 202,
                          "src": "6597:11:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_rational_1000000_by_1",
                                "typeString": "int_const 1000000"
                              },
                              "id": 662,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "leftExpression": {
                                "hexValue": "3130",
                                "id": 660,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "6584:2:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_10_by_1",
                                  "typeString": "int_const 10"
                                },
                                "value": "10"
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "**",
                              "rightExpression": {
                                "hexValue": "36",
                                "id": 661,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "6590:1:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_6_by_1",
                                  "typeString": "int_const 6"
                                },
                                "value": "6"
                              },
                              "src": "6584:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1000000_by_1",
                                "typeString": "int_const 1000000"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_1000000_by_1",
                                "typeString": "int_const 1000000"
                              }
                            ],
                            "expression": {
                              "id": 658,
                              "name": "collateralBtcUp",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 196,
                              "src": "6564:15:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 659,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "mul",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1762,
                            "src": "6564:19:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 663,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6564:28:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 664,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "div",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1777,
                        "src": "6564:32:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 666,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "6564:45:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 667,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "Conditional",
                    "src": "6531:78:8",
                    "trueExpression": {
                      "id": 657,
                      "name": "priceBtcUp",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 188,
                      "src": "6551:10:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 653,
                  "id": 668,
                  "nodeType": "Return",
                  "src": "6524:85:8"
                }
              ]
            },
            "functionSelector": "f06847d6",
            "id": 670,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getBtcUpPrice",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 650,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6481:2:8"
            },
            "returnParameters": {
              "id": 653,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 652,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 670,
                  "src": "6505:7:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 651,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6505:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6504:9:8"
            },
            "scope": 844,
            "src": "6459:157:8",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 690,
              "nodeType": "Block",
              "src": "6711:122:8",
              "statements": [
                {
                  "expression": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 677,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 675,
                        "name": "amountBtcDown",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 205,
                        "src": "6740:13:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "hexValue": "30",
                        "id": 676,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6757:1:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "src": "6740:18:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseExpression": {
                      "arguments": [
                        {
                          "id": 686,
                          "name": "amountBtcDown",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 205,
                          "src": "6812:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_rational_1000000_by_1",
                                "typeString": "int_const 1000000"
                              },
                              "id": 683,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "leftExpression": {
                                "hexValue": "3130",
                                "id": 681,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "6799:2:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_10_by_1",
                                  "typeString": "int_const 10"
                                },
                                "value": "10"
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "**",
                              "rightExpression": {
                                "hexValue": "36",
                                "id": 682,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "6805:1:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_6_by_1",
                                  "typeString": "int_const 6"
                                },
                                "value": "6"
                              },
                              "src": "6799:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1000000_by_1",
                                "typeString": "int_const 1000000"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_1000000_by_1",
                                "typeString": "int_const 1000000"
                              }
                            ],
                            "expression": {
                              "id": 679,
                              "name": "collateralBtcDown",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 199,
                              "src": "6777:17:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 680,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "mul",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1762,
                            "src": "6777:21:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 684,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6777:30:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 685,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "div",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1777,
                        "src": "6777:34:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 687,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "6777:49:8",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 688,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "Conditional",
                    "src": "6740:86:8",
                    "trueExpression": {
                      "id": 678,
                      "name": "priceBtcDown",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 193,
                      "src": "6762:12:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 674,
                  "id": 689,
                  "nodeType": "Return",
                  "src": "6733:93:8"
                }
              ]
            },
            "functionSelector": "81c2b29b",
            "id": 691,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getBtcDownPrice",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 671,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6678:2:8"
            },
            "returnParameters": {
              "id": 674,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 673,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 691,
                  "src": "6702:7:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 672,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6702:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6701:9:8"
            },
            "scope": 844,
            "src": "6654:179:8",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 714,
              "nodeType": "Block",
              "src": "6938:264:8",
              "statements": [
                {
                  "assignments": [
                    698
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 698,
                      "mutability": "mutable",
                      "name": "priceFeed",
                      "nodeType": "VariableDeclaration",
                      "scope": 714,
                      "src": "6948:31:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_AggregatorV3Interface_$1914",
                        "typeString": "contract AggregatorV3Interface"
                      },
                      "typeName": {
                        "id": 697,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 696,
                          "name": "AggregatorV3Interface",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 1914,
                          "src": "6948:21:8"
                        },
                        "referencedDeclaration": 1914,
                        "src": "6948:21:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_AggregatorV3Interface_$1914",
                          "typeString": "contract AggregatorV3Interface"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 702,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 700,
                        "name": "addressBtcUSDFeed",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 217,
                        "src": "7004:17:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 699,
                      "name": "AggregatorV3Interface",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1914,
                      "src": "6982:21:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_AggregatorV3Interface_$1914_$",
                        "typeString": "type(contract AggregatorV3Interface)"
                      }
                    },
                    "id": 701,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6982:40:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_AggregatorV3Interface_$1914",
                      "typeString": "contract AggregatorV3Interface"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6948:74:8"
                },
                {
                  "assignments": [
                    null,
                    704,
                    null,
                    null,
                    null
                  ],
                  "declarations": [
                    null,
                    {
                      "constant": false,
                      "id": 704,
                      "mutability": "mutable",
                      "name": "answer",
                      "nodeType": "VariableDeclaration",
                      "scope": 714,
                      "src": "7034:13:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_int256",
                        "typeString": "int256"
                      },
                      "typeName": {
                        "id": 703,
                        "name": "int256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7034:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        }
                      },
                      "visibility": "internal"
                    },
                    null,
                    null,
                    null
                  ],
                  "id": 708,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 705,
                        "name": "priceFeed",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 698,
                        "src": "7054:9:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_AggregatorV3Interface_$1914",
                          "typeString": "contract AggregatorV3Interface"
                        }
                      },
                      "id": 706,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "latestRoundData",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1913,
                      "src": "7054:25:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$__$returns$_t_uint80_$_t_int256_$_t_uint256_$_t_uint256_$_t_uint80_$",
                        "typeString": "function () view external returns (uint80,int256,uint256,uint256,uint80)"
                      }
                    },
                    "id": 707,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7054:27:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_uint80_$_t_int256_$_t_uint256_$_t_uint256_$_t_uint80_$",
                      "typeString": "tuple(uint80,int256,uint256,uint256,uint80)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7032:49:8"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 711,
                        "name": "answer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 704,
                        "src": "7108:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        }
                      ],
                      "id": 710,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "7100:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_uint256_$",
                        "typeString": "type(uint256)"
                      },
                      "typeName": {
                        "id": 709,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7100:7:8",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 712,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7100:15:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 695,
                  "id": 713,
                  "nodeType": "Return",
                  "src": "7093:22:8"
                }
              ]
            },
            "functionSelector": "3a3610bc",
            "id": 715,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getBtcPrice",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 692,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6905:2:8"
            },
            "returnParameters": {
              "id": 695,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 694,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 715,
                  "src": "6929:7:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 693,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6929:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6928:9:8"
            },
            "scope": 844,
            "src": "6885:317:8",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 731,
              "nodeType": "Block",
              "src": "7279:38:8",
              "statements": [
                {
                  "expression": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 726,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 724,
                        "name": "a",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 717,
                        "src": "7296:1:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "<=",
                      "rightExpression": {
                        "id": 725,
                        "name": "b",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 719,
                        "src": "7301:1:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "7296:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseExpression": {
                      "id": 728,
                      "name": "b",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 719,
                      "src": "7309:1:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 729,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "Conditional",
                    "src": "7296:14:8",
                    "trueExpression": {
                      "id": 727,
                      "name": "a",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 717,
                      "src": "7305:1:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 723,
                  "id": 730,
                  "nodeType": "Return",
                  "src": "7289:21:8"
                }
              ]
            },
            "id": 732,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "min",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 720,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 717,
                  "mutability": "mutable",
                  "name": "a",
                  "nodeType": "VariableDeclaration",
                  "scope": 732,
                  "src": "7225:9:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 716,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7225:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 719,
                  "mutability": "mutable",
                  "name": "b",
                  "nodeType": "VariableDeclaration",
                  "scope": 732,
                  "src": "7236:9:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 718,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7236:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7224:22:8"
            },
            "returnParameters": {
              "id": 723,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 722,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 732,
                  "src": "7270:7:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 721,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7270:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7269:9:8"
            },
            "scope": 844,
            "src": "7212:105:8",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 774,
              "nodeType": "Block",
              "src": "7377:171:8",
              "statements": [
                {
                  "assignments": [
                    740
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 740,
                      "mutability": "mutable",
                      "name": "denom",
                      "nodeType": "VariableDeclaration",
                      "scope": 774,
                      "src": "7413:13:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 739,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7413:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 759,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 758,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 754,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 750,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "hexValue": "39",
                          "id": 741,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "7429:1:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_9_by_1",
                            "typeString": "int_const 9"
                          },
                          "value": "9"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "*",
                        "rightExpression": {
                          "components": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 748,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 744,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 742,
                                  "name": "x",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 734,
                                  "src": "7434:1:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "**",
                                "rightExpression": {
                                  "hexValue": "32",
                                  "id": 743,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "7439:1:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_2_by_1",
                                    "typeString": "int_const 2"
                                  },
                                  "value": "2"
                                },
                                "src": "7434:6:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "/",
                              "rightExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_rational_1000000_by_1",
                                  "typeString": "int_const 1000000"
                                },
                                "id": 747,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "hexValue": "3130",
                                  "id": 745,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "7443:2:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_10_by_1",
                                    "typeString": "int_const 10"
                                  },
                                  "value": "10"
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "**",
                                "rightExpression": {
                                  "hexValue": "36",
                                  "id": 746,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "7449:1:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_6_by_1",
                                    "typeString": "int_const 6"
                                  },
                                  "value": "6"
                                },
                                "src": "7443:7:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1000000_by_1",
                                  "typeString": "int_const 1000000"
                                }
                              },
                              "src": "7434:16:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "id": 749,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "7433:18:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "7429:22:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "+",
                      "rightExpression": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 753,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "hexValue": "33",
                          "id": 751,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "7455:1:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_3_by_1",
                            "typeString": "int_const 3"
                          },
                          "value": "3"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "*",
                        "rightExpression": {
                          "id": 752,
                          "name": "x",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 734,
                          "src": "7459:1:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "7455:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "7429:31:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "+",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_rational_1000000_by_1",
                        "typeString": "int_const 1000000"
                      },
                      "id": 757,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "leftExpression": {
                        "hexValue": "3130",
                        "id": 755,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7463:2:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_10_by_1",
                          "typeString": "int_const 10"
                        },
                        "value": "10"
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "**",
                      "rightExpression": {
                        "hexValue": "36",
                        "id": 756,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7469:1:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_6_by_1",
                          "typeString": "int_const 6"
                        },
                        "value": "6"
                      },
                      "src": "7463:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1000000_by_1",
                        "typeString": "int_const 1000000"
                      }
                    },
                    "src": "7429:41:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7413:57:8"
                },
                {
                  "assignments": [
                    761
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 761,
                      "mutability": "mutable",
                      "name": "num",
                      "nodeType": "VariableDeclaration",
                      "scope": 774,
                      "src": "7480:11:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 760,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7480:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 765,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_rational_1000000000000_by_1",
                      "typeString": "int_const 1000000000000"
                    },
                    "id": 764,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "leftExpression": {
                      "hexValue": "3130",
                      "id": 762,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "7494:2:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_10_by_1",
                        "typeString": "int_const 10"
                      },
                      "value": "10"
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "**",
                    "rightExpression": {
                      "hexValue": "3132",
                      "id": 763,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "7500:2:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_12_by_1",
                        "typeString": "int_const 12"
                      },
                      "value": "12"
                    },
                    "src": "7494:8:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_1000000000000_by_1",
                      "typeString": "int_const 1000000000000"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7480:22:8"
                },
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 772,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_rational_1000000_by_1",
                        "typeString": "int_const 1000000"
                      },
                      "id": 768,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "leftExpression": {
                        "hexValue": "3130",
                        "id": 766,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7520:2:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_10_by_1",
                          "typeString": "int_const 10"
                        },
                        "value": "10"
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "**",
                      "rightExpression": {
                        "hexValue": "36",
                        "id": 767,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7526:1:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_6_by_1",
                          "typeString": "int_const 6"
                        },
                        "value": "6"
                      },
                      "src": "7520:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1000000_by_1",
                        "typeString": "int_const 1000000"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "-",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 771,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 769,
                        "name": "num",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 761,
                        "src": "7530:3:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "/",
                      "rightExpression": {
                        "id": 770,
                        "name": "denom",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 740,
                        "src": "7536:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "7530:11:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7520:21:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 738,
                  "id": 773,
                  "nodeType": "Return",
                  "src": "7513:28:8"
                }
              ]
            },
            "id": 775,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "L",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 735,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 734,
                  "mutability": "mutable",
                  "name": "x",
                  "nodeType": "VariableDeclaration",
                  "scope": 775,
                  "src": "7334:9:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 733,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7334:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7333:11:8"
            },
            "returnParameters": {
              "id": 738,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 737,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 775,
                  "src": "7368:7:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 736,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7368:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7367:9:8"
            },
            "scope": 844,
            "src": "7323:225:8",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 818,
              "nodeType": "Block",
              "src": "7626:246:8",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 784,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 782,
                      "name": "btcPrice",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 777,
                      "src": "7657:8:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "id": 783,
                      "name": "lastBtcPrice",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 208,
                      "src": "7668:12:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7657:23:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 816,
                    "nodeType": "Block",
                    "src": "7781:84:8",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_rational_1000000_by_1",
                                "typeString": "int_const 1000000"
                              },
                              "id": 813,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "leftExpression": {
                                "hexValue": "3130",
                                "id": 811,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "7846:2:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_10_by_1",
                                  "typeString": "int_const 10"
                                },
                                "value": "10"
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "**",
                              "rightExpression": {
                                "hexValue": "36",
                                "id": 812,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "7852:1:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_6_by_1",
                                  "typeString": "int_const 6"
                                },
                                "value": "6"
                              },
                              "src": "7846:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1000000_by_1",
                                "typeString": "int_const 1000000"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_1000000_by_1",
                                "typeString": "int_const 1000000"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 808,
                                  "name": "btcPrice",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 777,
                                  "src": "7832:8:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "arguments": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_rational_1000000_by_1",
                                        "typeString": "int_const 1000000"
                                      },
                                      "id": 805,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "hexValue": "3130",
                                        "id": 803,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "7819:2:8",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_10_by_1",
                                          "typeString": "int_const 10"
                                        },
                                        "value": "10"
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "**",
                                      "rightExpression": {
                                        "hexValue": "36",
                                        "id": 804,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "7825:1:8",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_6_by_1",
                                          "typeString": "int_const 6"
                                        },
                                        "value": "6"
                                      },
                                      "src": "7819:7:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_1000000_by_1",
                                        "typeString": "int_const 1000000"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_1000000_by_1",
                                        "typeString": "int_const 1000000"
                                      }
                                    ],
                                    "expression": {
                                      "id": 801,
                                      "name": "lastBtcPrice",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 208,
                                      "src": "7802:12:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 802,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "mul",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1762,
                                    "src": "7802:16:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 806,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "7802:25:8",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 807,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "div",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1777,
                                "src": "7802:29:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                  "typeString": "function (uint256,uint256) pure returns (uint256)"
                                }
                              },
                              "id": 809,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "7802:39:8",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 810,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sub",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1747,
                            "src": "7802:43:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 814,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7802:52:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 781,
                        "id": 815,
                        "nodeType": "Return",
                        "src": "7795:59:8"
                      }
                    ]
                  },
                  "id": 817,
                  "nodeType": "IfStatement",
                  "src": "7653:212:8",
                  "trueBody": {
                    "id": 800,
                    "nodeType": "Block",
                    "src": "7682:84:8",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_rational_1000000_by_1",
                                "typeString": "int_const 1000000"
                              },
                              "id": 797,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "leftExpression": {
                                "hexValue": "3130",
                                "id": 795,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "7747:2:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_10_by_1",
                                  "typeString": "int_const 10"
                                },
                                "value": "10"
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "**",
                              "rightExpression": {
                                "hexValue": "36",
                                "id": 796,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "7753:1:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_6_by_1",
                                  "typeString": "int_const 6"
                                },
                                "value": "6"
                              },
                              "src": "7747:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1000000_by_1",
                                "typeString": "int_const 1000000"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_1000000_by_1",
                                "typeString": "int_const 1000000"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 792,
                                  "name": "lastBtcPrice",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 208,
                                  "src": "7729:12:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "arguments": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_rational_1000000_by_1",
                                        "typeString": "int_const 1000000"
                                      },
                                      "id": 789,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "hexValue": "3130",
                                        "id": 787,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "7716:2:8",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_10_by_1",
                                          "typeString": "int_const 10"
                                        },
                                        "value": "10"
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "**",
                                      "rightExpression": {
                                        "hexValue": "36",
                                        "id": 788,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "7722:1:8",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_6_by_1",
                                          "typeString": "int_const 6"
                                        },
                                        "value": "6"
                                      },
                                      "src": "7716:7:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_1000000_by_1",
                                        "typeString": "int_const 1000000"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_1000000_by_1",
                                        "typeString": "int_const 1000000"
                                      }
                                    ],
                                    "expression": {
                                      "id": 785,
                                      "name": "btcPrice",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 777,
                                      "src": "7703:8:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 786,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "mul",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1762,
                                    "src": "7703:12:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 790,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "7703:21:8",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 791,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "div",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1777,
                                "src": "7703:25:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                  "typeString": "function (uint256,uint256) pure returns (uint256)"
                                }
                              },
                              "id": 793,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "7703:39:8",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 794,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sub",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1747,
                            "src": "7703:43:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 798,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7703:52:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 781,
                        "id": 799,
                        "nodeType": "Return",
                        "src": "7696:59:8"
                      }
                    ]
                  }
                }
              ]
            },
            "id": 819,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getPriceDiff",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 778,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 777,
                  "mutability": "mutable",
                  "name": "btcPrice",
                  "nodeType": "VariableDeclaration",
                  "scope": 819,
                  "src": "7576:16:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 776,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7576:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7575:18:8"
            },
            "returnParameters": {
              "id": 781,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 780,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 819,
                  "src": "7617:7:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 779,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7617:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7616:9:8"
            },
            "scope": 844,
            "src": "7554:318:8",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 830,
              "nodeType": "Block",
              "src": "7934:51:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 826,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "7967:3:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 827,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "7967:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 824,
                        "name": "btcUp",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 220,
                        "src": "7951:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_BTCUP_$108",
                          "typeString": "contract BTCUP"
                        }
                      },
                      "id": 825,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "balanceOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1047,
                      "src": "7951:15:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 828,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7951:27:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 823,
                  "id": 829,
                  "nodeType": "Return",
                  "src": "7944:34:8"
                }
              ]
            },
            "functionSelector": "157d0129",
            "id": 831,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getBtcupBalance",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 820,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7902:2:8"
            },
            "returnParameters": {
              "id": 823,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 822,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 831,
                  "src": "7925:7:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 821,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7925:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7924:9:8"
            },
            "scope": 844,
            "src": "7878:107:8",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 842,
              "nodeType": "Block",
              "src": "8049:53:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 838,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "8084:3:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 839,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "8084:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 836,
                        "name": "btcDown",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 223,
                        "src": "8066:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_BTCDOWN_$178",
                          "typeString": "contract BTCDOWN"
                        }
                      },
                      "id": 837,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "balanceOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1047,
                      "src": "8066:17:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 840,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8066:29:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 835,
                  "id": 841,
                  "nodeType": "Return",
                  "src": "8059:36:8"
                }
              ]
            },
            "functionSelector": "c7e3b124",
            "id": 843,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getBtcdownBalance",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 832,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8017:2:8"
            },
            "returnParameters": {
              "id": 835,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 834,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 843,
                  "src": "8040:7:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 833,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8040:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8039:9:8"
            },
            "scope": 844,
            "src": "7991:111:8",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 845,
        "src": "1863:6243:8"
      }
    ],
    "src": "32:8081:8"
  },
  "bytecode": "",
  "bytecodeSha1": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.0+commit.c7dfd78e"
  },
  "contractName": "IERC20",
  "coverageMap": {
    "branches": {},
    "statements": {}
  },
  "dependencies": [],
  "deployedBytecode": "",
  "deployedSourceMap": "",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    414,
    697
  ],
  "opcodes": "",
  "pcMap": {},
  "sha1": "929dd75fae3fcc587c23505153556e17e8802f12",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport  {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport  {ERC20Burnable} from \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n\ninterface IERC20 {\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    function approve(address spender, uint256 amount) external returns (bool);\n}\n\n\ncontract BTCUP is  ERC20, ERC20Burnable {\n    address parentAddress;\n\n    constructor(address _parentAddress) ERC20(\"Bitcoin Up\", \"BTCUP\") {\n        parentAddress = _parentAddress;\n    }\n\n    function mint(uint256 quantity) public onlyParent {\n        _mint(tx.origin, quantity);\n    }\n\n    function burn(uint256 quantity) public override onlyParent {\n        burnFrom(tx.origin, quantity);\n    }\n\n    function decimals() public view override returns (uint8) {\n        return 6;\n    }\n\n    modifier onlyParent {\n        require(msg.sender == parentAddress);\n        _;\n    }\n}\n\n\ncontract BTCDOWN is ERC20, ERC20Burnable {\n    address parentAddress;\n\n    constructor(address _parentAddress) ERC20(\"Bitcoin Down\", \"BTCDOWN\") {\n        parentAddress = _parentAddress;\n    }\n\n    function mint(uint256 quantity) public onlyParent {\n        _mint(tx.origin, quantity);\n    }\n\n    function burn(uint256 quantity) public override onlyParent {\n        burnFrom(tx.origin, quantity);\n    }\n\n    function decimals() public view override returns (uint8) {\n        return 6;\n    }\n\n    modifier onlyParent {\n        require(msg.sender == parentAddress);\n        _;\n    }\n}\n\n\ncontract LeveragedTrading is Ownable {\n    using SafeMath for uint256;\n\n    uint256 public priceBtcUp = 10 ** 6;\n    uint256 public priceBtcDown = 10 ** 6;        // 6 decimals\n\n    uint256 public collateralBtcUp = 0;          //6 decimals\n    uint256 public collateralBtcDown = 0;\n\n    uint256 public amountBtcUp = 0;           // 6 decimals\n    uint256 public amountBtcDown = 0;         // 6 decimals\n\n    uint256 public lastBtcPrice = 0;       // 8 decimals, chainlink conventions\n\n    bool public poolIsInitialized = false;\n\n    address addressUsdc = 0xb7a4F3E9097C08dA09517b5aB877F7a917224ede;  // <- Kovan  //0xeb8f08a975Ab53E34D8a0330E0D34de942C95926;\n    address addressBtcUSDFeed =  0x6135b13325bfC4B00278B4abC5e20bbce2D6580e; // <- Kovan          // 0xECe365B379E1dD183B20fc5f022230C044d51404;\n\n    BTCUP btcUp;\n    BTCDOWN btcDown;\n\n    function initializePool(uint256 amountUsdc) public onlyOwner {\n        require(!poolIsInitialized, \"The pool was already initiated.\");\n\n        btcUp = new BTCUP(address(this));\n        btcDown = new BTCDOWN(address(this));\n\n        issueBtcUp(amountUsdc.div(2));\n        issueBtcDown(amountUsdc.div(2));\n\n        poolIsInitialized = true;\n    }\n\n    function issueBtcUp(uint256 amountUsdc) public {\n        rebalanceLeveragedTokens();\n        \n        priceBtcUp = getBtcUpPrice();\n        uint256 amountLeveragedTokens = amountUsdc.mul(10 ** 6).div(priceBtcUp);\n\n        btcUp.mint(amountLeveragedTokens);\n        amountBtcUp = amountBtcUp.add(amountLeveragedTokens);\n        collateralBtcUp = collateralBtcUp.add(amountUsdc);\n\n        IERC20 usdc = IERC20(addressUsdc);\n        require(usdc.transferFrom(msg.sender, address(this), amountUsdc), \"You don't have enough USDC.\");\n    }\n\n    function issueBtcDown(uint256 amountUsdc) public {\n        rebalanceLeveragedTokens();\n        \n        priceBtcDown = getBtcDownPrice();\n        uint256 amountLeveragedTokens = amountUsdc.mul(10 ** 6).div(priceBtcDown);\n\n        btcDown.mint(amountLeveragedTokens);\n        amountBtcDown = amountBtcDown.add(amountLeveragedTokens);\n        collateralBtcDown = collateralBtcDown.add(amountUsdc);\n\n        IERC20 usdc = IERC20(addressUsdc);\n        require(usdc.transferFrom(msg.sender, address(this), amountUsdc), \"You don't have enough USDC.\");\n    }\n\n    function redeemBtcUp(uint256 amountLeveragedTokens) public {\n        rebalanceLeveragedTokens();\n        btcUp.burn(amountLeveragedTokens);\n\n        priceBtcUp = getBtcUpPrice();\n        uint256 amountUsdc = amountLeveragedTokens.mul(priceBtcUp).div(10 ** 6);\n\n        amountBtcUp = amountBtcUp.sub(amountLeveragedTokens);\n        collateralBtcUp = collateralBtcUp.sub(amountUsdc);\n\n        IERC20 usdc = IERC20(addressUsdc);\n        assert(usdc.transfer(msg.sender, amountUsdc));\n    }\n\n    function redeemBtcDown(uint256 amountLeveragedTokens) public {\n        rebalanceLeveragedTokens();\n        btcDown.burn(amountLeveragedTokens);\n\n        priceBtcDown = getBtcDownPrice();\n        uint256 amountUsdc = amountLeveragedTokens.mul(priceBtcDown).div(10 ** 6);\n        \n        amountBtcDown = amountBtcDown.sub(amountLeveragedTokens);\n        collateralBtcDown = collateralBtcDown.sub(amountUsdc);\n\n        IERC20 usdc = IERC20(addressUsdc);\n        assert(usdc.transfer(msg.sender,  amountUsdc));\n    }\n\n    function rebalanceLeveragedTokens() public {\n        uint256 btcPrice = getBtcPrice();\n        if ((collateralBtcUp > 0) && (collateralBtcDown > 0)) {\n            uint256 rebalanceAmount = getRebalanceAmount(btcPrice);\n            if (getSign(btcPrice) > 0) {\n                collateralBtcUp = collateralBtcUp.add(rebalanceAmount);\n                collateralBtcDown = collateralBtcDown.sub(rebalanceAmount);\n            }\n\n            else {\n                collateralBtcUp = collateralBtcUp.sub(rebalanceAmount);\n                collateralBtcDown = collateralBtcDown.add(rebalanceAmount);\n            }\n\n        }\n        lastBtcPrice = btcPrice;\n    }\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    function getSign(uint256 btcPrice) internal view returns (int256) {\n        if (btcPrice > lastBtcPrice) {\n            return 1;\n        }\n        else {\n            return -1;\n        }\n    }\n \n    function getRebalanceAmount(uint256 priceBtc) internal view returns (uint256) {\n        uint256 priceDiff = getPriceDiff(priceBtc);\n\n        return min(collateralBtcUp, collateralBtcDown).mul(L(priceDiff)).div(10 ** 6);\n    }\n\n// getBtcUpPrice() 6 decimals\n    function getBtcUpPrice() public view returns (uint256) {\n        return amountBtcUp == 0 ?  priceBtcUp : collateralBtcUp.mul(10 ** 6).div(amountBtcUp);\n    }\n\n// getBtcDownPrice() 6 decimals\n    function getBtcDownPrice() public view returns (uint256) {//6 decimals\n        return amountBtcDown == 0 ?  priceBtcDown : collateralBtcDown.mul(10 ** 6).div(amountBtcDown);\n    }\n\n// get the price of our asset with 8 decimals\n    function getBtcPrice() public view returns (uint256) {\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(addressBtcUSDFeed);\n        (,int256 answer,,,) = priceFeed.latestRoundData();\n\n         return uint256(answer);             // we call chainlink oracle to get the price of the asset\n         \n    }\n    \n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a <= b ? a : b;\n    }\n\n    function L(uint256 x) internal pure returns (uint256) {            //6  decimals\n\n        uint256 denom = 9 * (x ** 2 / 10 ** 6)  + 3 * x + 10 ** 6;\n        uint256 num = 10 ** 12;\n\n        return 10 ** 6 - num / denom;\n    }\n\n    function getPriceDiff(uint256 btcPrice) internal view returns (uint256) {     //6 decimals\n        if (btcPrice > lastBtcPrice) {\n            return btcPrice.mul(10 ** 6).div(lastBtcPrice).sub(10 ** 6);\n        }\n\n        else {\n            return lastBtcPrice.mul(10 ** 6).div(btcPrice).sub(10 ** 6);\n        }\n\n    }\n\n    function getBtcupBalance() public view returns(uint256) {\n        return btcUp.balanceOf(msg.sender);\n    }\n\n    function getBtcdownBalance() public view returns(uint256) {\n        return btcDown.balanceOf(msg.sender);\n    }\n\n\n}\n\n\n\n\n\n\n",
  "sourceMap": "",
  "sourcePath": "contracts/LeveragedTrading.sol",
  "type": "interface"
}
},{}],4:[function(require,module,exports){
module.exports={"abi": [{"anonymous": false, "inputs": [{"indexed": true, "internalType": "address", "name": "previousOwner", "type": "address"}, {"indexed": true, "internalType": "address", "name": "newOwner", "type": "address"}], "name": "OwnershipTransferred", "type": "event"}, {"inputs": [], "name": "amountBtcDown", "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}], "stateMutability": "view", "type": "function"}, {"inputs": [], "name": "amountBtcUp", "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}], "stateMutability": "view", "type": "function"}, {"inputs": [], "name": "collateralBtcDown", "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}], "stateMutability": "view", "type": "function"}, {"inputs": [], "name": "collateralBtcUp", "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}], "stateMutability": "view", "type": "function"}, {"inputs": [], "name": "getBtcDownPrice", "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}], "stateMutability": "view", "type": "function"}, {"inputs": [], "name": "getBtcPrice", "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}], "stateMutability": "view", "type": "function"}, {"inputs": [], "name": "getBtcUpPrice", "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}], "stateMutability": "view", "type": "function"}, {"inputs": [], "name": "getBtcdownBalance", "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}], "stateMutability": "view", "type": "function"}, {"inputs": [], "name": "getBtcupBalance", "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "uint256", "name": "amountUsdc", "type": "uint256"}], "name": "initializePool", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "uint256", "name": "amountUsdc", "type": "uint256"}], "name": "issueBtcDown", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "uint256", "name": "amountUsdc", "type": "uint256"}], "name": "issueBtcUp", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [], "name": "lastBtcPrice", "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}], "stateMutability": "view", "type": "function"}, {"inputs": [], "name": "owner", "outputs": [{"internalType": "address", "name": "", "type": "address"}], "stateMutability": "view", "type": "function"}, {"inputs": [], "name": "poolIsInitialized", "outputs": [{"internalType": "bool", "name": "", "type": "bool"}], "stateMutability": "view", "type": "function"}, {"inputs": [], "name": "priceBtcDown", "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}], "stateMutability": "view", "type": "function"}, {"inputs": [], "name": "priceBtcUp", "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}], "stateMutability": "view", "type": "function"}, {"inputs": [], "name": "rebalanceLeveragedTokens", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "uint256", "name": "amountLeveragedTokens", "type": "uint256"}], "name": "redeemBtcDown", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "uint256", "name": "amountLeveragedTokens", "type": "uint256"}], "name": "redeemBtcUp", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [], "name": "renounceOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "newOwner", "type": "address"}], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function"}], "allSourcePaths": {"0": "/home/alex/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/access/Ownable.sol", "1": "/home/alex/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/token/ERC20/ERC20.sol", "2": "/home/alex/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/token/ERC20/IERC20.sol", "3": "/home/alex/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/token/ERC20/extensions/ERC20Burnable.sol", "4": "/home/alex/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/token/ERC20/extensions/IERC20Metadata.sol", "5": "/home/alex/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/utils/Context.sol", "6": "/home/alex/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/utils/math/SafeMath.sol", "7": "/home/alex/.brownie/packages/smartcontractkit/chainlink@1.3.0/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol", "8": "contracts/LeveragedTrading.sol"}, "ast": {"absolutePath": "contracts/LeveragedTrading.sol", "exportedSymbols": {"AggregatorV3Interface": [1914], "BTCDOWN": [178], "BTCUP": [108], "Context": [1935], "ERC20": [1494], "ERC20Burnable": [1556], "IERC20": [38], "LeveragedTrading": [844], "Ownable": [948], "SafeMath": [1868]}, "id": 845, "license": "MIT", "nodeType": "SourceUnit", "nodes": [{"id": 1, "literals": ["solidity", "^", "0.8", ".0"], "nodeType": "PragmaDirective", "src": "32:23:8"}, {"absolutePath": "/home/alex/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/token/ERC20/ERC20.sol", "file": "@openzeppelin/contracts/token/ERC20/ERC20.sol", "id": 3, "nodeType": "ImportDirective", "scope": 845, "sourceUnit": 1495, "src": "57:69:8", "symbolAliases": [{"foreign": {"id": 2, "name": "ERC20", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "66:5:8", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "/home/alex/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/token/ERC20/extensions/ERC20Burnable.sol", "file": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol", "id": 5, "nodeType": "ImportDirective", "scope": 845, "sourceUnit": 1557, "src": "127:96:8", "symbolAliases": [{"foreign": {"id": 4, "name": "ERC20Burnable", "nodeType": "Identifier", "overloadedDeclarations": [], "src": "136:13:8", "typeDescriptions": {}}}], "unitAlias": ""}, {"absolutePath": "/home/alex/.brownie/packages/smartcontractkit/chainlink@1.3.0/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol", "file": "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol", "id": 6, "nodeType": "ImportDirective", "scope": 845, "sourceUnit": 1915, "src": "224:76:8", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "/home/alex/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/utils/math/SafeMath.sol", "file": "@openzeppelin/contracts/utils/math/SafeMath.sol", "id": 7, "nodeType": "ImportDirective", "scope": 845, "sourceUnit": 1869, "src": "301:57:8", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "/home/alex/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/access/Ownable.sol", "file": "@openzeppelin/contracts/access/Ownable.sol", "id": 8, "nodeType": "ImportDirective", "scope": 845, "sourceUnit": 949, "src": "359:52:8", "symbolAliases": [], "unitAlias": ""}, {"abstract": false, "baseContracts": [], "contractDependencies": [], "contractKind": "interface", "fullyImplemented": false, "id": 38, "linearizedBaseContracts": [38], "name": "IERC20", "nodeType": "ContractDefinition", "nodes": [{"functionSelector": "a9059cbb", "id": 17, "implemented": false, "kind": "function", "modifiers": [], "name": "transfer", "nodeType": "FunctionDefinition", "parameters": {"id": 13, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 10, "mutability": "mutable", "name": "recipient", "nodeType": "VariableDeclaration", "scope": 17, "src": "455:17:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 9, "name": "address", "nodeType": "ElementaryTypeName", "src": "455:7:8", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 12, "mutability": "mutable", "name": "amount", "nodeType": "VariableDeclaration", "scope": 17, "src": "474:14:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 11, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "474:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "454:35:8"}, "returnParameters": {"id": 16, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 15, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 17, "src": "508:4:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "typeName": {"id": 14, "name": "bool", "nodeType": "ElementaryTypeName", "src": "508:4:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "visibility": "internal"}], "src": "507:6:8"}, "scope": 38, "src": "437:77:8", "stateMutability": "nonpayable", "virtual": false, "visibility": "external"}, {"functionSelector": "23b872dd", "id": 28, "implemented": false, "kind": "function", "modifiers": [], "name": "transferFrom", "nodeType": "FunctionDefinition", "parameters": {"id": 24, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 19, "mutability": "mutable", "name": "sender", "nodeType": "VariableDeclaration", "scope": 28, "src": "541:14:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 18, "name": "address", "nodeType": "ElementaryTypeName", "src": "541:7:8", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 21, "mutability": "mutable", "name": "recipient", "nodeType": "VariableDeclaration", "scope": 28, "src": "557:17:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 20, "name": "address", "nodeType": "ElementaryTypeName", "src": "557:7:8", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 23, "mutability": "mutable", "name": "amount", "nodeType": "VariableDeclaration", "scope": 28, "src": "576:14:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 22, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "576:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "540:51:8"}, "returnParameters": {"id": 27, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 26, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 28, "src": "610:4:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "typeName": {"id": 25, "name": "bool", "nodeType": "ElementaryTypeName", "src": "610:4:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "visibility": "internal"}], "src": "609:6:8"}, "scope": 38, "src": "519:97:8", "stateMutability": "nonpayable", "virtual": false, "visibility": "external"}, {"functionSelector": "095ea7b3", "id": 37, "implemented": false, "kind": "function", "modifiers": [], "name": "approve", "nodeType": "FunctionDefinition", "parameters": {"id": 33, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 30, "mutability": "mutable", "name": "spender", "nodeType": "VariableDeclaration", "scope": 37, "src": "638:15:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 29, "name": "address", "nodeType": "ElementaryTypeName", "src": "638:7:8", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 32, "mutability": "mutable", "name": "amount", "nodeType": "VariableDeclaration", "scope": 37, "src": "655:14:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 31, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "655:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "637:33:8"}, "returnParameters": {"id": 36, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 35, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 37, "src": "689:4:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "typeName": {"id": 34, "name": "bool", "nodeType": "ElementaryTypeName", "src": "689:4:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "visibility": "internal"}], "src": "688:6:8"}, "scope": 38, "src": "621:74:8", "stateMutability": "nonpayable", "virtual": false, "visibility": "external"}], "scope": 845, "src": "414:283:8"}, {"abstract": false, "baseContracts": [{"baseName": {"id": 39, "name": "ERC20", "nodeType": "IdentifierPath", "referencedDeclaration": 1494, "src": "719:5:8"}, "id": 40, "nodeType": "InheritanceSpecifier", "src": "719:5:8"}, {"baseName": {"id": 41, "name": "ERC20Burnable", "nodeType": "IdentifierPath", "referencedDeclaration": 1556, "src": "726:13:8"}, "id": 42, "nodeType": "InheritanceSpecifier", "src": "726:13:8"}], "contractDependencies": [1494, 1556, 1935, 2013, 2038], "contractKind": "contract", "fullyImplemented": true, "id": 108, "linearizedBaseContracts": [108, 1556, 1494, 2038, 2013, 1935], "name": "BTCUP", "nodeType": "ContractDefinition", "nodes": [{"constant": false, "id": 44, "mutability": "mutable", "name": "parentAddress", "nodeType": "VariableDeclaration", "scope": 108, "src": "746:21:8", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 43, "name": "address", "nodeType": "ElementaryTypeName", "src": "746:7:8", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"body": {"id": 57, "nodeType": "Block", "src": "839:47:8", "statements": [{"expression": {"id": 55, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 53, "name": "parentAddress", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 44, "src": "849:13:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"id": 54, "name": "_parentAddress", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 46, "src": "865:14:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "src": "849:30:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "id": 56, "nodeType": "ExpressionStatement", "src": "849:30:8"}]}, "id": 58, "implemented": true, "kind": "constructor", "modifiers": [{"arguments": [{"hexValue": "426974636f696e205570", "id": 49, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "816:12:8", "typeDescriptions": {"typeIdentifier": "t_stringliteral_9cbc1d0721872492c3eae100dd6a7dad3b4b199dc4e72a46010b2b1c98a11964", "typeString": "literal_string \"Bitcoin Up\""}, "value": "Bitcoin Up"}, {"hexValue": "4254435550", "id": 50, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "830:7:8", "typeDescriptions": {"typeIdentifier": "t_stringliteral_f92903022a172a42cae03bdc1621474c2ab6bc2b8980d8251e05283c61f8c975", "typeString": "literal_string \"BTCUP\""}, "value": "BTCUP"}], "id": 51, "modifierName": {"id": 48, "name": "ERC20", "nodeType": "IdentifierPath", "referencedDeclaration": 1494, "src": "810:5:8"}, "nodeType": "ModifierInvocation", "src": "810:28:8"}], "name": "", "nodeType": "FunctionDefinition", "parameters": {"id": 47, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 46, "mutability": "mutable", "name": "_parentAddress", "nodeType": "VariableDeclaration", "scope": 58, "src": "786:22:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 45, "name": "address", "nodeType": "ElementaryTypeName", "src": "786:7:8", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}], "src": "785:24:8"}, "returnParameters": {"id": 52, "nodeType": "ParameterList", "parameters": [], "src": "839:0:8"}, "scope": 108, "src": "774:112:8", "stateMutability": "nonpayable", "virtual": false, "visibility": "public"}, {"body": {"id": 71, "nodeType": "Block", "src": "942:43:8", "statements": [{"expression": {"arguments": [{"expression": {"id": 66, "name": "tx", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -26, "src": "958:2:8", "typeDescriptions": {"typeIdentifier": "t_magic_transaction", "typeString": "tx"}}, "id": 67, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "origin", "nodeType": "MemberAccess", "src": "958:9:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 68, "name": "quantity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 60, "src": "969:8:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 65, "name": "_mint", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1354, "src": "952:5:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$", "typeString": "function (address,uint256)"}}, "id": 69, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "952:26:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 70, "nodeType": "ExpressionStatement", "src": "952:26:8"}]}, "functionSelector": "a0712d68", "id": 72, "implemented": true, "kind": "function", "modifiers": [{"id": 63, "modifierName": {"id": 62, "name": "onlyParent", "nodeType": "IdentifierPath", "referencedDeclaration": 107, "src": "931:10:8"}, "nodeType": "ModifierInvocation", "src": "931:10:8"}], "name": "mint", "nodeType": "FunctionDefinition", "parameters": {"id": 61, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 60, "mutability": "mutable", "name": "quantity", "nodeType": "VariableDeclaration", "scope": 72, "src": "906:16:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 59, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "906:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "905:18:8"}, "returnParameters": {"id": 64, "nodeType": "ParameterList", "parameters": [], "src": "942:0:8"}, "scope": 108, "src": "892:93:8", "stateMutability": "nonpayable", "virtual": false, "visibility": "public"}, {"baseFunctions": [1516], "body": {"id": 86, "nodeType": "Block", "src": "1050:46:8", "statements": [{"expression": {"arguments": [{"expression": {"id": 81, "name": "tx", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -26, "src": "1069:2:8", "typeDescriptions": {"typeIdentifier": "t_magic_transaction", "typeString": "tx"}}, "id": 82, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "origin", "nodeType": "MemberAccess", "src": "1069:9:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 83, "name": "quantity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 74, "src": "1080:8:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 80, "name": "burnFrom", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1555, "src": "1060:8:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$", "typeString": "function (address,uint256)"}}, "id": 84, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "1060:29:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 85, "nodeType": "ExpressionStatement", "src": "1060:29:8"}]}, "functionSelector": "42966c68", "id": 87, "implemented": true, "kind": "function", "modifiers": [{"id": 78, "modifierName": {"id": 77, "name": "onlyParent", "nodeType": "IdentifierPath", "referencedDeclaration": 107, "src": "1039:10:8"}, "nodeType": "ModifierInvocation", "src": "1039:10:8"}], "name": "burn", "nodeType": "FunctionDefinition", "overrides": {"id": 76, "nodeType": "OverrideSpecifier", "overrides": [], "src": "1030:8:8"}, "parameters": {"id": 75, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 74, "mutability": "mutable", "name": "quantity", "nodeType": "VariableDeclaration", "scope": 87, "src": "1005:16:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 73, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "1005:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "1004:18:8"}, "returnParameters": {"id": 79, "nodeType": "ParameterList", "parameters": [], "src": "1050:0:8"}, "scope": 108, "src": "991:105:8", "stateMutability": "nonpayable", "virtual": false, "visibility": "public"}, {"baseFunctions": [1023], "body": {"id": 95, "nodeType": "Block", "src": "1159:25:8", "statements": [{"expression": {"hexValue": "36", "id": 93, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "1176:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_6_by_1", "typeString": "int_const 6"}, "value": "6"}, "functionReturnParameters": 92, "id": 94, "nodeType": "Return", "src": "1169:8:8"}]}, "functionSelector": "313ce567", "id": 96, "implemented": true, "kind": "function", "modifiers": [], "name": "decimals", "nodeType": "FunctionDefinition", "overrides": {"id": 89, "nodeType": "OverrideSpecifier", "overrides": [], "src": "1134:8:8"}, "parameters": {"id": 88, "nodeType": "ParameterList", "parameters": [], "src": "1119:2:8"}, "returnParameters": {"id": 92, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 91, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 96, "src": "1152:5:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}, "typeName": {"id": 90, "name": "uint8", "nodeType": "ElementaryTypeName", "src": "1152:5:8", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "visibility": "internal"}], "src": "1151:7:8"}, "scope": 108, "src": "1102:82:8", "stateMutability": "view", "virtual": false, "visibility": "public"}, {"body": {"id": 106, "nodeType": "Block", "src": "1210:64:8", "statements": [{"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_address", "typeString": "address"}, "id": 102, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 99, "name": "msg", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -15, "src": "1228:3:8", "typeDescriptions": {"typeIdentifier": "t_magic_message", "typeString": "msg"}}, "id": 100, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sender", "nodeType": "MemberAccess", "src": "1228:10:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"id": 101, "name": "parentAddress", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 44, "src": "1242:13:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "src": "1228:27:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 98, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "1220:7:8", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$", "typeString": "function (bool) pure"}}, "id": 103, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "1220:36:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 104, "nodeType": "ExpressionStatement", "src": "1220:36:8"}, {"id": 105, "nodeType": "PlaceholderStatement", "src": "1266:1:8"}]}, "id": 107, "name": "onlyParent", "nodeType": "ModifierDefinition", "parameters": {"id": 97, "nodeType": "ParameterList", "parameters": [], "src": "1210:0:8"}, "src": "1190:84:8", "virtual": false, "visibility": "internal"}], "scope": 845, "src": "700:576:8"}, {"abstract": false, "baseContracts": [{"baseName": {"id": 109, "name": "ERC20", "nodeType": "IdentifierPath", "referencedDeclaration": 1494, "src": "1299:5:8"}, "id": 110, "nodeType": "InheritanceSpecifier", "src": "1299:5:8"}, {"baseName": {"id": 111, "name": "ERC20Burnable", "nodeType": "IdentifierPath", "referencedDeclaration": 1556, "src": "1306:13:8"}, "id": 112, "nodeType": "InheritanceSpecifier", "src": "1306:13:8"}], "contractDependencies": [1494, 1556, 1935, 2013, 2038], "contractKind": "contract", "fullyImplemented": true, "id": 178, "linearizedBaseContracts": [178, 1556, 1494, 2038, 2013, 1935], "name": "BTCDOWN", "nodeType": "ContractDefinition", "nodes": [{"constant": false, "id": 114, "mutability": "mutable", "name": "parentAddress", "nodeType": "VariableDeclaration", "scope": 178, "src": "1326:21:8", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 113, "name": "address", "nodeType": "ElementaryTypeName", "src": "1326:7:8", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"body": {"id": 127, "nodeType": "Block", "src": "1423:47:8", "statements": [{"expression": {"id": 125, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 123, "name": "parentAddress", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 114, "src": "1433:13:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"id": 124, "name": "_parentAddress", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 116, "src": "1449:14:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "src": "1433:30:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "id": 126, "nodeType": "ExpressionStatement", "src": "1433:30:8"}]}, "id": 128, "implemented": true, "kind": "constructor", "modifiers": [{"arguments": [{"hexValue": "426974636f696e20446f776e", "id": 119, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "1396:14:8", "typeDescriptions": {"typeIdentifier": "t_stringliteral_165fe89d7acd7320260d3007f731660e2a452d2e9dbef2c2e44ee15c6b8bc1ec", "typeString": "literal_string \"Bitcoin Down\""}, "value": "Bitcoin Down"}, {"hexValue": "425443444f574e", "id": 120, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "1412:9:8", "typeDescriptions": {"typeIdentifier": "t_stringliteral_72f3d7098f717fcc170dbb6c7dad0b9049f1ed825e03177180edf7a0240d28f2", "typeString": "literal_string \"BTCDOWN\""}, "value": "BTCDOWN"}], "id": 121, "modifierName": {"id": 118, "name": "ERC20", "nodeType": "IdentifierPath", "referencedDeclaration": 1494, "src": "1390:5:8"}, "nodeType": "ModifierInvocation", "src": "1390:32:8"}], "name": "", "nodeType": "FunctionDefinition", "parameters": {"id": 117, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 116, "mutability": "mutable", "name": "_parentAddress", "nodeType": "VariableDeclaration", "scope": 128, "src": "1366:22:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 115, "name": "address", "nodeType": "ElementaryTypeName", "src": "1366:7:8", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}], "src": "1365:24:8"}, "returnParameters": {"id": 122, "nodeType": "ParameterList", "parameters": [], "src": "1423:0:8"}, "scope": 178, "src": "1354:116:8", "stateMutability": "nonpayable", "virtual": false, "visibility": "public"}, {"body": {"id": 141, "nodeType": "Block", "src": "1526:43:8", "statements": [{"expression": {"arguments": [{"expression": {"id": 136, "name": "tx", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -26, "src": "1542:2:8", "typeDescriptions": {"typeIdentifier": "t_magic_transaction", "typeString": "tx"}}, "id": 137, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "origin", "nodeType": "MemberAccess", "src": "1542:9:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 138, "name": "quantity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 130, "src": "1553:8:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 135, "name": "_mint", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1354, "src": "1536:5:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$", "typeString": "function (address,uint256)"}}, "id": 139, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "1536:26:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 140, "nodeType": "ExpressionStatement", "src": "1536:26:8"}]}, "functionSelector": "a0712d68", "id": 142, "implemented": true, "kind": "function", "modifiers": [{"id": 133, "modifierName": {"id": 132, "name": "onlyParent", "nodeType": "IdentifierPath", "referencedDeclaration": 177, "src": "1515:10:8"}, "nodeType": "ModifierInvocation", "src": "1515:10:8"}], "name": "mint", "nodeType": "FunctionDefinition", "parameters": {"id": 131, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 130, "mutability": "mutable", "name": "quantity", "nodeType": "VariableDeclaration", "scope": 142, "src": "1490:16:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 129, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "1490:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "1489:18:8"}, "returnParameters": {"id": 134, "nodeType": "ParameterList", "parameters": [], "src": "1526:0:8"}, "scope": 178, "src": "1476:93:8", "stateMutability": "nonpayable", "virtual": false, "visibility": "public"}, {"baseFunctions": [1516], "body": {"id": 156, "nodeType": "Block", "src": "1634:46:8", "statements": [{"expression": {"arguments": [{"expression": {"id": 151, "name": "tx", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -26, "src": "1653:2:8", "typeDescriptions": {"typeIdentifier": "t_magic_transaction", "typeString": "tx"}}, "id": 152, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "origin", "nodeType": "MemberAccess", "src": "1653:9:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 153, "name": "quantity", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 144, "src": "1664:8:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 150, "name": "burnFrom", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1555, "src": "1644:8:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$", "typeString": "function (address,uint256)"}}, "id": 154, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "1644:29:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 155, "nodeType": "ExpressionStatement", "src": "1644:29:8"}]}, "functionSelector": "42966c68", "id": 157, "implemented": true, "kind": "function", "modifiers": [{"id": 148, "modifierName": {"id": 147, "name": "onlyParent", "nodeType": "IdentifierPath", "referencedDeclaration": 177, "src": "1623:10:8"}, "nodeType": "ModifierInvocation", "src": "1623:10:8"}], "name": "burn", "nodeType": "FunctionDefinition", "overrides": {"id": 146, "nodeType": "OverrideSpecifier", "overrides": [], "src": "1614:8:8"}, "parameters": {"id": 145, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 144, "mutability": "mutable", "name": "quantity", "nodeType": "VariableDeclaration", "scope": 157, "src": "1589:16:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 143, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "1589:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "1588:18:8"}, "returnParameters": {"id": 149, "nodeType": "ParameterList", "parameters": [], "src": "1634:0:8"}, "scope": 178, "src": "1575:105:8", "stateMutability": "nonpayable", "virtual": false, "visibility": "public"}, {"baseFunctions": [1023], "body": {"id": 165, "nodeType": "Block", "src": "1743:25:8", "statements": [{"expression": {"hexValue": "36", "id": 163, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "1760:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_6_by_1", "typeString": "int_const 6"}, "value": "6"}, "functionReturnParameters": 162, "id": 164, "nodeType": "Return", "src": "1753:8:8"}]}, "functionSelector": "313ce567", "id": 166, "implemented": true, "kind": "function", "modifiers": [], "name": "decimals", "nodeType": "FunctionDefinition", "overrides": {"id": 159, "nodeType": "OverrideSpecifier", "overrides": [], "src": "1718:8:8"}, "parameters": {"id": 158, "nodeType": "ParameterList", "parameters": [], "src": "1703:2:8"}, "returnParameters": {"id": 162, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 161, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 166, "src": "1736:5:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}, "typeName": {"id": 160, "name": "uint8", "nodeType": "ElementaryTypeName", "src": "1736:5:8", "typeDescriptions": {"typeIdentifier": "t_uint8", "typeString": "uint8"}}, "visibility": "internal"}], "src": "1735:7:8"}, "scope": 178, "src": "1686:82:8", "stateMutability": "view", "virtual": false, "visibility": "public"}, {"body": {"id": 176, "nodeType": "Block", "src": "1794:64:8", "statements": [{"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_address", "typeString": "address"}, "id": 172, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 169, "name": "msg", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -15, "src": "1812:3:8", "typeDescriptions": {"typeIdentifier": "t_magic_message", "typeString": "msg"}}, "id": 170, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sender", "nodeType": "MemberAccess", "src": "1812:10:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"id": 171, "name": "parentAddress", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 114, "src": "1826:13:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "src": "1812:27:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 168, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "1804:7:8", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$", "typeString": "function (bool) pure"}}, "id": 173, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "1804:36:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 174, "nodeType": "ExpressionStatement", "src": "1804:36:8"}, {"id": 175, "nodeType": "PlaceholderStatement", "src": "1850:1:8"}]}, "id": 177, "name": "onlyParent", "nodeType": "ModifierDefinition", "parameters": {"id": 167, "nodeType": "ParameterList", "parameters": [], "src": "1794:0:8"}, "src": "1774:84:8", "virtual": false, "visibility": "internal"}], "scope": 845, "src": "1279:581:8"}, {"abstract": false, "baseContracts": [{"baseName": {"id": 179, "name": "Ownable", "nodeType": "IdentifierPath", "referencedDeclaration": 948, "src": "1892:7:8"}, "id": 180, "nodeType": "InheritanceSpecifier", "src": "1892:7:8"}], "contractDependencies": [108, 178, 948, 1935], "contractKind": "contract", "fullyImplemented": true, "id": 844, "linearizedBaseContracts": [844, 948, 1935], "name": "LeveragedTrading", "nodeType": "ContractDefinition", "nodes": [{"id": 183, "libraryName": {"id": 181, "name": "SafeMath", "nodeType": "IdentifierPath", "referencedDeclaration": 1868, "src": "1912:8:8"}, "nodeType": "UsingForDirective", "src": "1906:27:8", "typeName": {"id": 182, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "1925:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}}, {"constant": false, "functionSelector": "f0156e8a", "id": 188, "mutability": "mutable", "name": "priceBtcUp", "nodeType": "VariableDeclaration", "scope": 844, "src": "1939:35:8", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 184, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "1939:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "value": {"commonType": {"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}, "id": 187, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "leftExpression": {"hexValue": "3130", "id": 185, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "1967:2:8", "typeDescriptions": {"typeIdentifier": "t_rational_10_by_1", "typeString": "int_const 10"}, "value": "10"}, "nodeType": "BinaryOperation", "operator": "**", "rightExpression": {"hexValue": "36", "id": 186, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "1973:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_6_by_1", "typeString": "int_const 6"}, "value": "6"}, "src": "1967:7:8", "typeDescriptions": {"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}}, "visibility": "public"}, {"constant": false, "functionSelector": "0c3e5343", "id": 193, "mutability": "mutable", "name": "priceBtcDown", "nodeType": "VariableDeclaration", "scope": 844, "src": "1980:37:8", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 189, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "1980:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "value": {"commonType": {"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}, "id": 192, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "leftExpression": {"hexValue": "3130", "id": 190, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2010:2:8", "typeDescriptions": {"typeIdentifier": "t_rational_10_by_1", "typeString": "int_const 10"}, "value": "10"}, "nodeType": "BinaryOperation", "operator": "**", "rightExpression": {"hexValue": "36", "id": 191, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2016:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_6_by_1", "typeString": "int_const 6"}, "value": "6"}, "src": "2010:7:8", "typeDescriptions": {"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}}, "visibility": "public"}, {"constant": false, "functionSelector": "dde7be2c", "id": 196, "mutability": "mutable", "name": "collateralBtcUp", "nodeType": "VariableDeclaration", "scope": 844, "src": "2045:34:8", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 194, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "2045:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "value": {"hexValue": "30", "id": 195, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2078:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "visibility": "public"}, {"constant": false, "functionSelector": "14d7c6d2", "id": 199, "mutability": "mutable", "name": "collateralBtcDown", "nodeType": "VariableDeclaration", "scope": 844, "src": "2107:36:8", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 197, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "2107:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "value": {"hexValue": "30", "id": 198, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2142:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "visibility": "public"}, {"constant": false, "functionSelector": "0034b9cc", "id": 202, "mutability": "mutable", "name": "amountBtcUp", "nodeType": "VariableDeclaration", "scope": 844, "src": "2150:30:8", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 200, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "2150:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "value": {"hexValue": "30", "id": 201, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2179:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "visibility": "public"}, {"constant": false, "functionSelector": "b75cbe0b", "id": 205, "mutability": "mutable", "name": "amountBtcDown", "nodeType": "VariableDeclaration", "scope": 844, "src": "2210:32:8", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 203, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "2210:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "value": {"hexValue": "30", "id": 204, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2241:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "visibility": "public"}, {"constant": false, "functionSelector": "f4352c57", "id": 208, "mutability": "mutable", "name": "lastBtcPrice", "nodeType": "VariableDeclaration", "scope": 844, "src": "2271:31:8", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 206, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "2271:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "value": {"hexValue": "30", "id": 207, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2301:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "visibility": "public"}, {"constant": false, "functionSelector": "feae67b0", "id": 211, "mutability": "mutable", "name": "poolIsInitialized", "nodeType": "VariableDeclaration", "scope": 844, "src": "2352:37:8", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "typeName": {"id": 209, "name": "bool", "nodeType": "ElementaryTypeName", "src": "2352:4:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "value": {"hexValue": "66616c7365", "id": 210, "isConstant": false, "isLValue": false, "isPure": true, "kind": "bool", "lValueRequested": false, "nodeType": "Literal", "src": "2384:5:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "value": "false"}, "visibility": "public"}, {"constant": false, "id": 214, "mutability": "mutable", "name": "addressUsdc", "nodeType": "VariableDeclaration", "scope": 844, "src": "2396:64:8", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 212, "name": "address", "nodeType": "ElementaryTypeName", "src": "2396:7:8", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": {"hexValue": "307862376134463345393039374330386441303935313762356142383737463761393137323234656465", "id": 213, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2418:42:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "value": "0xb7a4F3E9097C08dA09517b5aB877F7a917224ede"}, "visibility": "internal"}, {"constant": false, "id": 217, "mutability": "mutable", "name": "addressBtcUSDFeed", "nodeType": "VariableDeclaration", "scope": 844, "src": "2526:71:8", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 215, "name": "address", "nodeType": "ElementaryTypeName", "src": "2526:7:8", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "value": {"hexValue": "307836313335623133333235626643344230303237384234616243356532306262636532443635383065", "id": 216, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2555:42:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "value": "0x6135b13325bfC4B00278B4abC5e20bbce2D6580e"}, "visibility": "internal"}, {"constant": false, "id": 220, "mutability": "mutable", "name": "btcUp", "nodeType": "VariableDeclaration", "scope": 844, "src": "2672:11:8", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_contract$_BTCUP_$108", "typeString": "contract BTCUP"}, "typeName": {"id": 219, "nodeType": "UserDefinedTypeName", "pathNode": {"id": 218, "name": "BTCUP", "nodeType": "IdentifierPath", "referencedDeclaration": 108, "src": "2672:5:8"}, "referencedDeclaration": 108, "src": "2672:5:8", "typeDescriptions": {"typeIdentifier": "t_contract$_BTCUP_$108", "typeString": "contract BTCUP"}}, "visibility": "internal"}, {"constant": false, "id": 223, "mutability": "mutable", "name": "btcDown", "nodeType": "VariableDeclaration", "scope": 844, "src": "2689:15:8", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_contract$_BTCDOWN_$178", "typeString": "contract BTCDOWN"}, "typeName": {"id": 222, "nodeType": "UserDefinedTypeName", "pathNode": {"id": 221, "name": "BTCDOWN", "nodeType": "IdentifierPath", "referencedDeclaration": 178, "src": "2689:7:8"}, "referencedDeclaration": 178, "src": "2689:7:8", "typeDescriptions": {"typeIdentifier": "t_contract$_BTCDOWN_$178", "typeString": "contract BTCDOWN"}}, "visibility": "internal"}, {"body": {"id": 276, "nodeType": "Block", "src": "2772:284:8", "statements": [{"expression": {"arguments": [{"id": 232, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "!", "prefix": true, "src": "2790:18:8", "subExpression": {"id": 231, "name": "poolIsInitialized", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 211, "src": "2791:17:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "54686520706f6f6c2077617320616c726561647920696e697469617465642e", "id": 233, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "2810:33:8", "typeDescriptions": {"typeIdentifier": "t_stringliteral_580e872a0bf3ae438081ad6284342a647742aae71fdfc53b8a10245734a22e81", "typeString": "literal_string \"The pool was already initiated.\""}, "value": "The pool was already initiated."}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_580e872a0bf3ae438081ad6284342a647742aae71fdfc53b8a10245734a22e81", "typeString": "literal_string \"The pool was already initiated.\""}], "id": 230, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "2782:7:8", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 234, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2782:62:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 235, "nodeType": "ExpressionStatement", "src": "2782:62:8"}, {"expression": {"id": 245, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 236, "name": "btcUp", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 220, "src": "2855:5:8", "typeDescriptions": {"typeIdentifier": "t_contract$_BTCUP_$108", "typeString": "contract BTCUP"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"arguments": [{"id": 242, "name": "this", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -28, "src": "2881:4:8", "typeDescriptions": {"typeIdentifier": "t_contract$_LeveragedTrading_$844", "typeString": "contract LeveragedTrading"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_contract$_LeveragedTrading_$844", "typeString": "contract LeveragedTrading"}], "id": 241, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "2873:7:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_address_$", "typeString": "type(address)"}, "typeName": {"id": 240, "name": "address", "nodeType": "ElementaryTypeName", "src": "2873:7:8", "typeDescriptions": {}}}, "id": 243, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2873:13:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}], "id": 239, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "NewExpression", "src": "2863:9:8", "typeDescriptions": {"typeIdentifier": "t_function_creation_nonpayable$_t_address_$returns$_t_contract$_BTCUP_$108_$", "typeString": "function (address) returns (contract BTCUP)"}, "typeName": {"id": 238, "nodeType": "UserDefinedTypeName", "pathNode": {"id": 237, "name": "BTCUP", "nodeType": "IdentifierPath", "referencedDeclaration": 108, "src": "2867:5:8"}, "referencedDeclaration": 108, "src": "2867:5:8", "typeDescriptions": {"typeIdentifier": "t_contract$_BTCUP_$108", "typeString": "contract BTCUP"}}}, "id": 244, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2863:24:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_contract$_BTCUP_$108", "typeString": "contract BTCUP"}}, "src": "2855:32:8", "typeDescriptions": {"typeIdentifier": "t_contract$_BTCUP_$108", "typeString": "contract BTCUP"}}, "id": 246, "nodeType": "ExpressionStatement", "src": "2855:32:8"}, {"expression": {"id": 256, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 247, "name": "btcDown", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 223, "src": "2897:7:8", "typeDescriptions": {"typeIdentifier": "t_contract$_BTCDOWN_$178", "typeString": "contract BTCDOWN"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"arguments": [{"id": 253, "name": "this", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -28, "src": "2927:4:8", "typeDescriptions": {"typeIdentifier": "t_contract$_LeveragedTrading_$844", "typeString": "contract LeveragedTrading"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_contract$_LeveragedTrading_$844", "typeString": "contract LeveragedTrading"}], "id": 252, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "2919:7:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_address_$", "typeString": "type(address)"}, "typeName": {"id": 251, "name": "address", "nodeType": "ElementaryTypeName", "src": "2919:7:8", "typeDescriptions": {}}}, "id": 254, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2919:13:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}], "id": 250, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "NewExpression", "src": "2907:11:8", "typeDescriptions": {"typeIdentifier": "t_function_creation_nonpayable$_t_address_$returns$_t_contract$_BTCDOWN_$178_$", "typeString": "function (address) returns (contract BTCDOWN)"}, "typeName": {"id": 249, "nodeType": "UserDefinedTypeName", "pathNode": {"id": 248, "name": "BTCDOWN", "nodeType": "IdentifierPath", "referencedDeclaration": 178, "src": "2911:7:8"}, "referencedDeclaration": 178, "src": "2911:7:8", "typeDescriptions": {"typeIdentifier": "t_contract$_BTCDOWN_$178", "typeString": "contract BTCDOWN"}}}, "id": 255, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2907:26:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_contract$_BTCDOWN_$178", "typeString": "contract BTCDOWN"}}, "src": "2897:36:8", "typeDescriptions": {"typeIdentifier": "t_contract$_BTCDOWN_$178", "typeString": "contract BTCDOWN"}}, "id": 257, "nodeType": "ExpressionStatement", "src": "2897:36:8"}, {"expression": {"arguments": [{"arguments": [{"hexValue": "32", "id": 261, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2970:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_2_by_1", "typeString": "int_const 2"}, "value": "2"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_rational_2_by_1", "typeString": "int_const 2"}], "expression": {"id": 259, "name": "amountUsdc", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 225, "src": "2955:10:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 260, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "div", "nodeType": "MemberAccess", "referencedDeclaration": 1777, "src": "2955:14:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 262, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2955:17:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 258, "name": "issueBtcUp", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 344, "src": "2944:10:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$", "typeString": "function (uint256)"}}, "id": 263, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2944:29:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 264, "nodeType": "ExpressionStatement", "src": "2944:29:8"}, {"expression": {"arguments": [{"arguments": [{"hexValue": "32", "id": 268, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "3011:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_2_by_1", "typeString": "int_const 2"}, "value": "2"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_rational_2_by_1", "typeString": "int_const 2"}], "expression": {"id": 266, "name": "amountUsdc", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 225, "src": "2996:10:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 267, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "div", "nodeType": "MemberAccess", "referencedDeclaration": 1777, "src": "2996:14:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 269, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2996:17:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 265, "name": "issueBtcDown", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 411, "src": "2983:12:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$", "typeString": "function (uint256)"}}, "id": 270, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2983:31:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 271, "nodeType": "ExpressionStatement", "src": "2983:31:8"}, {"expression": {"id": 274, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 272, "name": "poolIsInitialized", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 211, "src": "3025:17:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"hexValue": "74727565", "id": 273, "isConstant": false, "isLValue": false, "isPure": true, "kind": "bool", "lValueRequested": false, "nodeType": "Literal", "src": "3045:4:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "value": "true"}, "src": "3025:24:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 275, "nodeType": "ExpressionStatement", "src": "3025:24:8"}]}, "functionSelector": "98881bc9", "id": 277, "implemented": true, "kind": "function", "modifiers": [{"id": 228, "modifierName": {"id": 227, "name": "onlyOwner", "nodeType": "IdentifierPath", "referencedDeclaration": 891, "src": "2762:9:8"}, "nodeType": "ModifierInvocation", "src": "2762:9:8"}], "name": "initializePool", "nodeType": "FunctionDefinition", "parameters": {"id": 226, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 225, "mutability": "mutable", "name": "amountUsdc", "nodeType": "VariableDeclaration", "scope": 277, "src": "2735:18:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 224, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "2735:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "2734:20:8"}, "returnParameters": {"id": 229, "nodeType": "ParameterList", "parameters": [], "src": "2772:0:8"}, "scope": 844, "src": "2711:345:8", "stateMutability": "nonpayable", "virtual": false, "visibility": "public"}, {"body": {"id": 343, "nodeType": "Block", "src": "3109:486:8", "statements": [{"expression": {"arguments": [], "expression": {"argumentTypes": [], "id": 282, "name": "rebalanceLeveragedTokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 601, "src": "3119:24:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$", "typeString": "function ()"}}, "id": 283, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3119:26:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 284, "nodeType": "ExpressionStatement", "src": "3119:26:8"}, {"expression": {"id": 288, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 285, "name": "priceBtcUp", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 188, "src": "3164:10:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [], "expression": {"argumentTypes": [], "id": 286, "name": "getBtcUpPrice", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 670, "src": "3177:13:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$", "typeString": "function () view returns (uint256)"}}, "id": 287, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3177:15:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "3164:28:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 289, "nodeType": "ExpressionStatement", "src": "3164:28:8"}, {"assignments": [291], "declarations": [{"constant": false, "id": 291, "mutability": "mutable", "name": "amountLeveragedTokens", "nodeType": "VariableDeclaration", "scope": 343, "src": "3202:29:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 290, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "3202:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 301, "initialValue": {"arguments": [{"id": 299, "name": "priceBtcUp", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 188, "src": "3262:10:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"arguments": [{"commonType": {"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}, "id": 296, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "leftExpression": {"hexValue": "3130", "id": 294, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "3249:2:8", "typeDescriptions": {"typeIdentifier": "t_rational_10_by_1", "typeString": "int_const 10"}, "value": "10"}, "nodeType": "BinaryOperation", "operator": "**", "rightExpression": {"hexValue": "36", "id": 295, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "3255:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_6_by_1", "typeString": "int_const 6"}, "value": "6"}, "src": "3249:7:8", "typeDescriptions": {"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}], "expression": {"id": 292, "name": "amountUsdc", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 279, "src": "3234:10:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 293, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "mul", "nodeType": "MemberAccess", "referencedDeclaration": 1762, "src": "3234:14:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 297, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3234:23:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 298, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "div", "nodeType": "MemberAccess", "referencedDeclaration": 1777, "src": "3234:27:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 300, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3234:39:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "3202:71:8"}, {"expression": {"arguments": [{"id": 305, "name": "amountLeveragedTokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 291, "src": "3295:21:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 302, "name": "btcUp", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 220, "src": "3284:5:8", "typeDescriptions": {"typeIdentifier": "t_contract$_BTCUP_$108", "typeString": "contract BTCUP"}}, "id": 304, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "mint", "nodeType": "MemberAccess", "referencedDeclaration": 72, "src": "3284:10:8", "typeDescriptions": {"typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$", "typeString": "function (uint256) external"}}, "id": 306, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3284:33:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 307, "nodeType": "ExpressionStatement", "src": "3284:33:8"}, {"expression": {"id": 313, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 308, "name": "amountBtcUp", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 202, "src": "3327:11:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 311, "name": "amountLeveragedTokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 291, "src": "3357:21:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 309, "name": "amountBtcUp", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 202, "src": "3341:11:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 310, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 1732, "src": "3341:15:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 312, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3341:38:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "3327:52:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 314, "nodeType": "ExpressionStatement", "src": "3327:52:8"}, {"expression": {"id": 320, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 315, "name": "collateralBtcUp", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 196, "src": "3389:15:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 318, "name": "amountUsdc", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 279, "src": "3427:10:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 316, "name": "collateralBtcUp", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 196, "src": "3407:15:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 317, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 1732, "src": "3407:19:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 319, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3407:31:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "3389:49:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 321, "nodeType": "ExpressionStatement", "src": "3389:49:8"}, {"assignments": [324], "declarations": [{"constant": false, "id": 324, "mutability": "mutable", "name": "usdc", "nodeType": "VariableDeclaration", "scope": 343, "src": "3449:11:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$38", "typeString": "contract IERC20"}, "typeName": {"id": 323, "nodeType": "UserDefinedTypeName", "pathNode": {"id": 322, "name": "IERC20", "nodeType": "IdentifierPath", "referencedDeclaration": 38, "src": "3449:6:8"}, "referencedDeclaration": 38, "src": "3449:6:8", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$38", "typeString": "contract IERC20"}}, "visibility": "internal"}], "id": 328, "initialValue": {"arguments": [{"id": 326, "name": "addressUsdc", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 214, "src": "3470:11:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}], "id": 325, "name": "IERC20", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 38, "src": "3463:6:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_IERC20_$38_$", "typeString": "type(contract IERC20)"}}, "id": 327, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3463:19:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$38", "typeString": "contract IERC20"}}, "nodeType": "VariableDeclarationStatement", "src": "3449:33:8"}, {"expression": {"arguments": [{"arguments": [{"expression": {"id": 332, "name": "msg", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -15, "src": "3518:3:8", "typeDescriptions": {"typeIdentifier": "t_magic_message", "typeString": "msg"}}, "id": 333, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sender", "nodeType": "MemberAccess", "src": "3518:10:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"arguments": [{"id": 336, "name": "this", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -28, "src": "3538:4:8", "typeDescriptions": {"typeIdentifier": "t_contract$_LeveragedTrading_$844", "typeString": "contract LeveragedTrading"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_contract$_LeveragedTrading_$844", "typeString": "contract LeveragedTrading"}], "id": 335, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "3530:7:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_address_$", "typeString": "type(address)"}, "typeName": {"id": 334, "name": "address", "nodeType": "ElementaryTypeName", "src": "3530:7:8", "typeDescriptions": {}}}, "id": 337, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3530:13:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 338, "name": "amountUsdc", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 279, "src": "3545:10:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 330, "name": "usdc", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 324, "src": "3500:4:8", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$38", "typeString": "contract IERC20"}}, "id": 331, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "transferFrom", "nodeType": "MemberAccess", "referencedDeclaration": 28, "src": "3500:17:8", "typeDescriptions": {"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$", "typeString": "function (address,address,uint256) external returns (bool)"}}, "id": 339, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3500:56:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "596f7520646f6e2774206861766520656e6f75676820555344432e", "id": 340, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "3558:29:8", "typeDescriptions": {"typeIdentifier": "t_stringliteral_fa81e2605579e88471722381a01380eff7db3c869a8b4d6c5142c052f717215d", "typeString": "literal_string \"You don't have enough USDC.\""}, "value": "You don't have enough USDC."}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_fa81e2605579e88471722381a01380eff7db3c869a8b4d6c5142c052f717215d", "typeString": "literal_string \"You don't have enough USDC.\""}], "id": 329, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "3492:7:8", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 341, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3492:96:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 342, "nodeType": "ExpressionStatement", "src": "3492:96:8"}]}, "functionSelector": "f530c04a", "id": 344, "implemented": true, "kind": "function", "modifiers": [], "name": "issueBtcUp", "nodeType": "FunctionDefinition", "parameters": {"id": 280, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 279, "mutability": "mutable", "name": "amountUsdc", "nodeType": "VariableDeclaration", "scope": 344, "src": "3082:18:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 278, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "3082:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "3081:20:8"}, "returnParameters": {"id": 281, "nodeType": "ParameterList", "parameters": [], "src": "3109:0:8"}, "scope": 844, "src": "3062:533:8", "stateMutability": "nonpayable", "virtual": false, "visibility": "public"}, {"body": {"id": 410, "nodeType": "Block", "src": "3650:502:8", "statements": [{"expression": {"arguments": [], "expression": {"argumentTypes": [], "id": 349, "name": "rebalanceLeveragedTokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 601, "src": "3660:24:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$", "typeString": "function ()"}}, "id": 350, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3660:26:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 351, "nodeType": "ExpressionStatement", "src": "3660:26:8"}, {"expression": {"id": 355, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 352, "name": "priceBtcDown", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 193, "src": "3705:12:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [], "expression": {"argumentTypes": [], "id": 353, "name": "getBtcDownPrice", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 691, "src": "3720:15:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$", "typeString": "function () view returns (uint256)"}}, "id": 354, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3720:17:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "3705:32:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 356, "nodeType": "ExpressionStatement", "src": "3705:32:8"}, {"assignments": [358], "declarations": [{"constant": false, "id": 358, "mutability": "mutable", "name": "amountLeveragedTokens", "nodeType": "VariableDeclaration", "scope": 410, "src": "3747:29:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 357, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "3747:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 368, "initialValue": {"arguments": [{"id": 366, "name": "priceBtcDown", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 193, "src": "3807:12:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"arguments": [{"commonType": {"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}, "id": 363, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "leftExpression": {"hexValue": "3130", "id": 361, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "3794:2:8", "typeDescriptions": {"typeIdentifier": "t_rational_10_by_1", "typeString": "int_const 10"}, "value": "10"}, "nodeType": "BinaryOperation", "operator": "**", "rightExpression": {"hexValue": "36", "id": 362, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "3800:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_6_by_1", "typeString": "int_const 6"}, "value": "6"}, "src": "3794:7:8", "typeDescriptions": {"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}], "expression": {"id": 359, "name": "amountUsdc", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 346, "src": "3779:10:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 360, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "mul", "nodeType": "MemberAccess", "referencedDeclaration": 1762, "src": "3779:14:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 364, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3779:23:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 365, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "div", "nodeType": "MemberAccess", "referencedDeclaration": 1777, "src": "3779:27:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 367, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3779:41:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "3747:73:8"}, {"expression": {"arguments": [{"id": 372, "name": "amountLeveragedTokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 358, "src": "3844:21:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 369, "name": "btcDown", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 223, "src": "3831:7:8", "typeDescriptions": {"typeIdentifier": "t_contract$_BTCDOWN_$178", "typeString": "contract BTCDOWN"}}, "id": 371, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "mint", "nodeType": "MemberAccess", "referencedDeclaration": 142, "src": "3831:12:8", "typeDescriptions": {"typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$", "typeString": "function (uint256) external"}}, "id": 373, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3831:35:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 374, "nodeType": "ExpressionStatement", "src": "3831:35:8"}, {"expression": {"id": 380, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 375, "name": "amountBtcDown", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 205, "src": "3876:13:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 378, "name": "amountLeveragedTokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 358, "src": "3910:21:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 376, "name": "amountBtcDown", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 205, "src": "3892:13:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 377, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 1732, "src": "3892:17:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 379, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3892:40:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "3876:56:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 381, "nodeType": "ExpressionStatement", "src": "3876:56:8"}, {"expression": {"id": 387, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 382, "name": "collateralBtcDown", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 199, "src": "3942:17:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 385, "name": "amountUsdc", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 346, "src": "3984:10:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 383, "name": "collateralBtcDown", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 199, "src": "3962:17:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 384, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 1732, "src": "3962:21:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 386, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3962:33:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "3942:53:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 388, "nodeType": "ExpressionStatement", "src": "3942:53:8"}, {"assignments": [391], "declarations": [{"constant": false, "id": 391, "mutability": "mutable", "name": "usdc", "nodeType": "VariableDeclaration", "scope": 410, "src": "4006:11:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$38", "typeString": "contract IERC20"}, "typeName": {"id": 390, "nodeType": "UserDefinedTypeName", "pathNode": {"id": 389, "name": "IERC20", "nodeType": "IdentifierPath", "referencedDeclaration": 38, "src": "4006:6:8"}, "referencedDeclaration": 38, "src": "4006:6:8", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$38", "typeString": "contract IERC20"}}, "visibility": "internal"}], "id": 395, "initialValue": {"arguments": [{"id": 393, "name": "addressUsdc", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 214, "src": "4027:11:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}], "id": 392, "name": "IERC20", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 38, "src": "4020:6:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_IERC20_$38_$", "typeString": "type(contract IERC20)"}}, "id": 394, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4020:19:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$38", "typeString": "contract IERC20"}}, "nodeType": "VariableDeclarationStatement", "src": "4006:33:8"}, {"expression": {"arguments": [{"arguments": [{"expression": {"id": 399, "name": "msg", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -15, "src": "4075:3:8", "typeDescriptions": {"typeIdentifier": "t_magic_message", "typeString": "msg"}}, "id": 400, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sender", "nodeType": "MemberAccess", "src": "4075:10:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"arguments": [{"id": 403, "name": "this", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -28, "src": "4095:4:8", "typeDescriptions": {"typeIdentifier": "t_contract$_LeveragedTrading_$844", "typeString": "contract LeveragedTrading"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_contract$_LeveragedTrading_$844", "typeString": "contract LeveragedTrading"}], "id": 402, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "4087:7:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_address_$", "typeString": "type(address)"}, "typeName": {"id": 401, "name": "address", "nodeType": "ElementaryTypeName", "src": "4087:7:8", "typeDescriptions": {}}}, "id": 404, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4087:13:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 405, "name": "amountUsdc", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 346, "src": "4102:10:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 397, "name": "usdc", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 391, "src": "4057:4:8", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$38", "typeString": "contract IERC20"}}, "id": 398, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "transferFrom", "nodeType": "MemberAccess", "referencedDeclaration": 28, "src": "4057:17:8", "typeDescriptions": {"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$", "typeString": "function (address,address,uint256) external returns (bool)"}}, "id": 406, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4057:56:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "596f7520646f6e2774206861766520656e6f75676820555344432e", "id": 407, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "4115:29:8", "typeDescriptions": {"typeIdentifier": "t_stringliteral_fa81e2605579e88471722381a01380eff7db3c869a8b4d6c5142c052f717215d", "typeString": "literal_string \"You don't have enough USDC.\""}, "value": "You don't have enough USDC."}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_fa81e2605579e88471722381a01380eff7db3c869a8b4d6c5142c052f717215d", "typeString": "literal_string \"You don't have enough USDC.\""}], "id": 396, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "4049:7:8", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 408, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4049:96:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 409, "nodeType": "ExpressionStatement", "src": "4049:96:8"}]}, "functionSelector": "c46d4f09", "id": 411, "implemented": true, "kind": "function", "modifiers": [], "name": "issueBtcDown", "nodeType": "FunctionDefinition", "parameters": {"id": 347, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 346, "mutability": "mutable", "name": "amountUsdc", "nodeType": "VariableDeclaration", "scope": 411, "src": "3623:18:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 345, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "3623:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "3622:20:8"}, "returnParameters": {"id": 348, "nodeType": "ParameterList", "parameters": [], "src": "3650:0:8"}, "scope": 844, "src": "3601:551:8", "stateMutability": "nonpayable", "virtual": false, "visibility": "public"}, {"body": {"id": 472, "nodeType": "Block", "src": "4217:427:8", "statements": [{"expression": {"arguments": [], "expression": {"argumentTypes": [], "id": 416, "name": "rebalanceLeveragedTokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 601, "src": "4227:24:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$", "typeString": "function ()"}}, "id": 417, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4227:26:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 418, "nodeType": "ExpressionStatement", "src": "4227:26:8"}, {"expression": {"arguments": [{"id": 422, "name": "amountLeveragedTokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 413, "src": "4274:21:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 419, "name": "btcUp", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 220, "src": "4263:5:8", "typeDescriptions": {"typeIdentifier": "t_contract$_BTCUP_$108", "typeString": "contract BTCUP"}}, "id": 421, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "burn", "nodeType": "MemberAccess", "referencedDeclaration": 87, "src": "4263:10:8", "typeDescriptions": {"typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$", "typeString": "function (uint256) external"}}, "id": 423, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4263:33:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 424, "nodeType": "ExpressionStatement", "src": "4263:33:8"}, {"expression": {"id": 428, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 425, "name": "priceBtcUp", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 188, "src": "4307:10:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [], "expression": {"argumentTypes": [], "id": 426, "name": "getBtcUpPrice", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 670, "src": "4320:13:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$", "typeString": "function () view returns (uint256)"}}, "id": 427, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4320:15:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "4307:28:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 429, "nodeType": "ExpressionStatement", "src": "4307:28:8"}, {"assignments": [431], "declarations": [{"constant": false, "id": 431, "mutability": "mutable", "name": "amountUsdc", "nodeType": "VariableDeclaration", "scope": 472, "src": "4345:18:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 430, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "4345:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 441, "initialValue": {"arguments": [{"commonType": {"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}, "id": 439, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "leftExpression": {"hexValue": "3130", "id": 437, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "4408:2:8", "typeDescriptions": {"typeIdentifier": "t_rational_10_by_1", "typeString": "int_const 10"}, "value": "10"}, "nodeType": "BinaryOperation", "operator": "**", "rightExpression": {"hexValue": "36", "id": 438, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "4414:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_6_by_1", "typeString": "int_const 6"}, "value": "6"}, "src": "4408:7:8", "typeDescriptions": {"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}], "expression": {"arguments": [{"id": 434, "name": "priceBtcUp", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 188, "src": "4392:10:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 432, "name": "amountLeveragedTokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 413, "src": "4366:21:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 433, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "mul", "nodeType": "MemberAccess", "referencedDeclaration": 1762, "src": "4366:25:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 435, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4366:37:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 436, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "div", "nodeType": "MemberAccess", "referencedDeclaration": 1777, "src": "4366:41:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 440, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4366:50:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "4345:71:8"}, {"expression": {"id": 447, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 442, "name": "amountBtcUp", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 202, "src": "4427:11:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 445, "name": "amountLeveragedTokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 413, "src": "4457:21:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 443, "name": "amountBtcUp", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 202, "src": "4441:11:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 444, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sub", "nodeType": "MemberAccess", "referencedDeclaration": 1747, "src": "4441:15:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 446, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4441:38:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "4427:52:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 448, "nodeType": "ExpressionStatement", "src": "4427:52:8"}, {"expression": {"id": 454, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 449, "name": "collateralBtcUp", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 196, "src": "4489:15:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 452, "name": "amountUsdc", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 431, "src": "4527:10:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 450, "name": "collateralBtcUp", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 196, "src": "4507:15:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 451, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sub", "nodeType": "MemberAccess", "referencedDeclaration": 1747, "src": "4507:19:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 453, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4507:31:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "4489:49:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 455, "nodeType": "ExpressionStatement", "src": "4489:49:8"}, {"assignments": [458], "declarations": [{"constant": false, "id": 458, "mutability": "mutable", "name": "usdc", "nodeType": "VariableDeclaration", "scope": 472, "src": "4549:11:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$38", "typeString": "contract IERC20"}, "typeName": {"id": 457, "nodeType": "UserDefinedTypeName", "pathNode": {"id": 456, "name": "IERC20", "nodeType": "IdentifierPath", "referencedDeclaration": 38, "src": "4549:6:8"}, "referencedDeclaration": 38, "src": "4549:6:8", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$38", "typeString": "contract IERC20"}}, "visibility": "internal"}], "id": 462, "initialValue": {"arguments": [{"id": 460, "name": "addressUsdc", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 214, "src": "4570:11:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}], "id": 459, "name": "IERC20", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 38, "src": "4563:6:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_IERC20_$38_$", "typeString": "type(contract IERC20)"}}, "id": 461, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4563:19:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$38", "typeString": "contract IERC20"}}, "nodeType": "VariableDeclarationStatement", "src": "4549:33:8"}, {"expression": {"arguments": [{"arguments": [{"expression": {"id": 466, "name": "msg", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -15, "src": "4613:3:8", "typeDescriptions": {"typeIdentifier": "t_magic_message", "typeString": "msg"}}, "id": 467, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sender", "nodeType": "MemberAccess", "src": "4613:10:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 468, "name": "amountUsdc", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 431, "src": "4625:10:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 464, "name": "usdc", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 458, "src": "4599:4:8", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$38", "typeString": "contract IERC20"}}, "id": 465, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "transfer", "nodeType": "MemberAccess", "referencedDeclaration": 17, "src": "4599:13:8", "typeDescriptions": {"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$", "typeString": "function (address,uint256) external returns (bool)"}}, "id": 469, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4599:37:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 463, "name": "assert", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -3, "src": "4592:6:8", "typeDescriptions": {"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$", "typeString": "function (bool) pure"}}, "id": 470, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4592:45:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 471, "nodeType": "ExpressionStatement", "src": "4592:45:8"}]}, "functionSelector": "d1ee539d", "id": 473, "implemented": true, "kind": "function", "modifiers": [], "name": "redeemBtcUp", "nodeType": "FunctionDefinition", "parameters": {"id": 414, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 413, "mutability": "mutable", "name": "amountLeveragedTokens", "nodeType": "VariableDeclaration", "scope": 473, "src": "4179:29:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 412, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "4179:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "4178:31:8"}, "returnParameters": {"id": 415, "nodeType": "ParameterList", "parameters": [], "src": "4217:0:8"}, "scope": 844, "src": "4158:486:8", "stateMutability": "nonpayable", "virtual": false, "visibility": "public"}, {"body": {"id": 534, "nodeType": "Block", "src": "4711:452:8", "statements": [{"expression": {"arguments": [], "expression": {"argumentTypes": [], "id": 478, "name": "rebalanceLeveragedTokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 601, "src": "4721:24:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$", "typeString": "function ()"}}, "id": 479, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4721:26:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 480, "nodeType": "ExpressionStatement", "src": "4721:26:8"}, {"expression": {"arguments": [{"id": 484, "name": "amountLeveragedTokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 475, "src": "4770:21:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 481, "name": "btcDown", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 223, "src": "4757:7:8", "typeDescriptions": {"typeIdentifier": "t_contract$_BTCDOWN_$178", "typeString": "contract BTCDOWN"}}, "id": 483, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "burn", "nodeType": "MemberAccess", "referencedDeclaration": 157, "src": "4757:12:8", "typeDescriptions": {"typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$", "typeString": "function (uint256) external"}}, "id": 485, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4757:35:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 486, "nodeType": "ExpressionStatement", "src": "4757:35:8"}, {"expression": {"id": 490, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 487, "name": "priceBtcDown", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 193, "src": "4803:12:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [], "expression": {"argumentTypes": [], "id": 488, "name": "getBtcDownPrice", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 691, "src": "4818:15:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$", "typeString": "function () view returns (uint256)"}}, "id": 489, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4818:17:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "4803:32:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 491, "nodeType": "ExpressionStatement", "src": "4803:32:8"}, {"assignments": [493], "declarations": [{"constant": false, "id": 493, "mutability": "mutable", "name": "amountUsdc", "nodeType": "VariableDeclaration", "scope": 534, "src": "4845:18:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 492, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "4845:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 503, "initialValue": {"arguments": [{"commonType": {"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}, "id": 501, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "leftExpression": {"hexValue": "3130", "id": 499, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "4910:2:8", "typeDescriptions": {"typeIdentifier": "t_rational_10_by_1", "typeString": "int_const 10"}, "value": "10"}, "nodeType": "BinaryOperation", "operator": "**", "rightExpression": {"hexValue": "36", "id": 500, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "4916:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_6_by_1", "typeString": "int_const 6"}, "value": "6"}, "src": "4910:7:8", "typeDescriptions": {"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}], "expression": {"arguments": [{"id": 496, "name": "priceBtcDown", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 193, "src": "4892:12:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 494, "name": "amountLeveragedTokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 475, "src": "4866:21:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 495, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "mul", "nodeType": "MemberAccess", "referencedDeclaration": 1762, "src": "4866:25:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 497, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4866:39:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 498, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "div", "nodeType": "MemberAccess", "referencedDeclaration": 1777, "src": "4866:43:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 502, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4866:52:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "4845:73:8"}, {"expression": {"id": 509, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 504, "name": "amountBtcDown", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 205, "src": "4937:13:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 507, "name": "amountLeveragedTokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 475, "src": "4971:21:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 505, "name": "amountBtcDown", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 205, "src": "4953:13:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 506, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sub", "nodeType": "MemberAccess", "referencedDeclaration": 1747, "src": "4953:17:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 508, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4953:40:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "4937:56:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 510, "nodeType": "ExpressionStatement", "src": "4937:56:8"}, {"expression": {"id": 516, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 511, "name": "collateralBtcDown", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 199, "src": "5003:17:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 514, "name": "amountUsdc", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 493, "src": "5045:10:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 512, "name": "collateralBtcDown", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 199, "src": "5023:17:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 513, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sub", "nodeType": "MemberAccess", "referencedDeclaration": 1747, "src": "5023:21:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 515, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5023:33:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "5003:53:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 517, "nodeType": "ExpressionStatement", "src": "5003:53:8"}, {"assignments": [520], "declarations": [{"constant": false, "id": 520, "mutability": "mutable", "name": "usdc", "nodeType": "VariableDeclaration", "scope": 534, "src": "5067:11:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$38", "typeString": "contract IERC20"}, "typeName": {"id": 519, "nodeType": "UserDefinedTypeName", "pathNode": {"id": 518, "name": "IERC20", "nodeType": "IdentifierPath", "referencedDeclaration": 38, "src": "5067:6:8"}, "referencedDeclaration": 38, "src": "5067:6:8", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$38", "typeString": "contract IERC20"}}, "visibility": "internal"}], "id": 524, "initialValue": {"arguments": [{"id": 522, "name": "addressUsdc", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 214, "src": "5088:11:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}], "id": 521, "name": "IERC20", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 38, "src": "5081:6:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_IERC20_$38_$", "typeString": "type(contract IERC20)"}}, "id": 523, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5081:19:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$38", "typeString": "contract IERC20"}}, "nodeType": "VariableDeclarationStatement", "src": "5067:33:8"}, {"expression": {"arguments": [{"arguments": [{"expression": {"id": 528, "name": "msg", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -15, "src": "5131:3:8", "typeDescriptions": {"typeIdentifier": "t_magic_message", "typeString": "msg"}}, "id": 529, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sender", "nodeType": "MemberAccess", "src": "5131:10:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 530, "name": "amountUsdc", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 493, "src": "5144:10:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 526, "name": "usdc", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 520, "src": "5117:4:8", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$38", "typeString": "contract IERC20"}}, "id": 527, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "transfer", "nodeType": "MemberAccess", "referencedDeclaration": 17, "src": "5117:13:8", "typeDescriptions": {"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$", "typeString": "function (address,uint256) external returns (bool)"}}, "id": 531, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5117:38:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}], "id": 525, "name": "assert", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -3, "src": "5110:6:8", "typeDescriptions": {"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$", "typeString": "function (bool) pure"}}, "id": 532, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5110:46:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 533, "nodeType": "ExpressionStatement", "src": "5110:46:8"}]}, "functionSelector": "a14274e8", "id": 535, "implemented": true, "kind": "function", "modifiers": [], "name": "redeemBtcDown", "nodeType": "FunctionDefinition", "parameters": {"id": 476, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 475, "mutability": "mutable", "name": "amountLeveragedTokens", "nodeType": "VariableDeclaration", "scope": 535, "src": "4673:29:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 474, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "4673:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "4672:31:8"}, "returnParameters": {"id": 477, "nodeType": "ParameterList", "parameters": [], "src": "4711:0:8"}, "scope": 844, "src": "4650:513:8", "stateMutability": "nonpayable", "virtual": false, "visibility": "public"}, {"body": {"id": 600, "nodeType": "Block", "src": "5212:610:8", "statements": [{"assignments": [539], "declarations": [{"constant": false, "id": 539, "mutability": "mutable", "name": "btcPrice", "nodeType": "VariableDeclaration", "scope": 600, "src": "5222:16:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 538, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "5222:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 542, "initialValue": {"arguments": [], "expression": {"argumentTypes": [], "id": 540, "name": "getBtcPrice", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 715, "src": "5241:11:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$", "typeString": "function () view returns (uint256)"}}, "id": 541, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5241:13:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "5222:32:8"}, {"condition": {"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 551, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"components": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 545, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 543, "name": "collateralBtcUp", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 196, "src": "5269:15:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"hexValue": "30", "id": 544, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "5287:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "5269:19:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "id": 546, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "5268:21:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "&&", "rightExpression": {"components": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 549, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 547, "name": "collateralBtcDown", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 199, "src": "5294:17:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"hexValue": "30", "id": 548, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "5314:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "5294:21:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "id": 550, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "5293:23:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "5268:48:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 595, "nodeType": "IfStatement", "src": "5264:519:8", "trueBody": {"id": 594, "nodeType": "Block", "src": "5318:465:8", "statements": [{"assignments": [553], "declarations": [{"constant": false, "id": 553, "mutability": "mutable", "name": "rebalanceAmount", "nodeType": "VariableDeclaration", "scope": 594, "src": "5332:23:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 552, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "5332:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 557, "initialValue": {"arguments": [{"id": 555, "name": "btcPrice", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 539, "src": "5377:8:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 554, "name": "getRebalanceAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 649, "src": "5358:18:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) view returns (uint256)"}}, "id": 556, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5358:28:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "5332:54:8"}, {"condition": {"commonType": {"typeIdentifier": "t_int256", "typeString": "int256"}, "id": 562, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"arguments": [{"id": 559, "name": "btcPrice", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 539, "src": "5412:8:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 558, "name": "getSign", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 620, "src": "5404:7:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_int256_$", "typeString": "function (uint256) view returns (int256)"}}, "id": 560, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5404:17:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"hexValue": "30", "id": 561, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "5424:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "5404:21:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 592, "nodeType": "Block", "src": "5609:163:8", "statements": [{"expression": {"id": 583, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 578, "name": "collateralBtcUp", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 196, "src": "5627:15:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 581, "name": "rebalanceAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 553, "src": "5665:15:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 579, "name": "collateralBtcUp", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 196, "src": "5645:15:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 580, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sub", "nodeType": "MemberAccess", "referencedDeclaration": 1747, "src": "5645:19:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 582, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5645:36:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "5627:54:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 584, "nodeType": "ExpressionStatement", "src": "5627:54:8"}, {"expression": {"id": 590, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 585, "name": "collateralBtcDown", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 199, "src": "5699:17:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 588, "name": "rebalanceAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 553, "src": "5741:15:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 586, "name": "collateralBtcDown", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 199, "src": "5719:17:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 587, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 1732, "src": "5719:21:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 589, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5719:38:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "5699:58:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 591, "nodeType": "ExpressionStatement", "src": "5699:58:8"}]}, "id": 593, "nodeType": "IfStatement", "src": "5400:372:8", "trueBody": {"id": 577, "nodeType": "Block", "src": "5427:163:8", "statements": [{"expression": {"id": 568, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 563, "name": "collateralBtcUp", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 196, "src": "5445:15:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 566, "name": "rebalanceAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 553, "src": "5483:15:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 564, "name": "collateralBtcUp", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 196, "src": "5463:15:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 565, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "add", "nodeType": "MemberAccess", "referencedDeclaration": 1732, "src": "5463:19:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 567, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5463:36:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "5445:54:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 569, "nodeType": "ExpressionStatement", "src": "5445:54:8"}, {"expression": {"id": 575, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 570, "name": "collateralBtcDown", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 199, "src": "5517:17:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 573, "name": "rebalanceAmount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 553, "src": "5559:15:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 571, "name": "collateralBtcDown", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 199, "src": "5537:17:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 572, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sub", "nodeType": "MemberAccess", "referencedDeclaration": 1747, "src": "5537:21:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 574, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5537:38:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "5517:58:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 576, "nodeType": "ExpressionStatement", "src": "5517:58:8"}]}}]}}, {"expression": {"id": 598, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 596, "name": "lastBtcPrice", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 208, "src": "5792:12:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"id": 597, "name": "btcPrice", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 539, "src": "5807:8:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "5792:23:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 599, "nodeType": "ExpressionStatement", "src": "5792:23:8"}]}, "functionSelector": "6e5d6615", "id": 601, "implemented": true, "kind": "function", "modifiers": [], "name": "rebalanceLeveragedTokens", "nodeType": "FunctionDefinition", "parameters": {"id": 536, "nodeType": "ParameterList", "parameters": [], "src": "5202:2:8"}, "returnParameters": {"id": 537, "nodeType": "ParameterList", "parameters": [], "src": "5212:0:8"}, "scope": 844, "src": "5169:653:8", "stateMutability": "nonpayable", "virtual": false, "visibility": "public"}, {"body": {"id": 619, "nodeType": "Block", "src": "6065:126:8", "statements": [{"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 610, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 608, "name": "btcPrice", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 603, "src": "6079:8:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"id": 609, "name": "lastBtcPrice", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 208, "src": "6090:12:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "6079:23:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 617, "nodeType": "Block", "src": "6151:34:8", "statements": [{"expression": {"id": 615, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "-", "prefix": true, "src": "6172:2:8", "subExpression": {"hexValue": "31", "id": 614, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "6173:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "typeDescriptions": {"typeIdentifier": "t_rational_minus_1_by_1", "typeString": "int_const -1"}}, "functionReturnParameters": 607, "id": 616, "nodeType": "Return", "src": "6165:9:8"}]}, "id": 618, "nodeType": "IfStatement", "src": "6075:110:8", "trueBody": {"id": 613, "nodeType": "Block", "src": "6104:33:8", "statements": [{"expression": {"hexValue": "31", "id": 611, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "6125:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "functionReturnParameters": 607, "id": 612, "nodeType": "Return", "src": "6118:8:8"}]}}]}, "id": 620, "implemented": true, "kind": "function", "modifiers": [], "name": "getSign", "nodeType": "FunctionDefinition", "parameters": {"id": 604, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 603, "mutability": "mutable", "name": "btcPrice", "nodeType": "VariableDeclaration", "scope": 620, "src": "6016:16:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 602, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "6016:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "6015:18:8"}, "returnParameters": {"id": 607, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 606, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 620, "src": "6057:6:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 605, "name": "int256", "nodeType": "ElementaryTypeName", "src": "6057:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}], "src": "6056:8:8"}, "scope": 844, "src": "5999:192:8", "stateMutability": "view", "virtual": false, "visibility": "internal"}, {"body": {"id": 648, "nodeType": "Block", "src": "6276:147:8", "statements": [{"assignments": [628], "declarations": [{"constant": false, "id": 628, "mutability": "mutable", "name": "priceDiff", "nodeType": "VariableDeclaration", "scope": 648, "src": "6286:17:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 627, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "6286:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 632, "initialValue": {"arguments": [{"id": 630, "name": "priceBtc", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 622, "src": "6319:8:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 629, "name": "getPriceDiff", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 819, "src": "6306:12:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) view returns (uint256)"}}, "id": 631, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6306:22:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "6286:42:8"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}, "id": 645, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "leftExpression": {"hexValue": "3130", "id": 643, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "6408:2:8", "typeDescriptions": {"typeIdentifier": "t_rational_10_by_1", "typeString": "int_const 10"}, "value": "10"}, "nodeType": "BinaryOperation", "operator": "**", "rightExpression": {"hexValue": "36", "id": 644, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "6414:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_6_by_1", "typeString": "int_const 6"}, "value": "6"}, "src": "6408:7:8", "typeDescriptions": {"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}], "expression": {"arguments": [{"arguments": [{"id": 639, "name": "priceDiff", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 628, "src": "6392:9:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 638, "name": "L", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 775, "src": "6390:1:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256) pure returns (uint256)"}}, "id": 640, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6390:12:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"arguments": [{"id": 634, "name": "collateralBtcUp", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 196, "src": "6350:15:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 635, "name": "collateralBtcDown", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 199, "src": "6367:17:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 633, "name": "min", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 732, "src": "6346:3:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 636, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6346:39:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 637, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "mul", "nodeType": "MemberAccess", "referencedDeclaration": 1762, "src": "6346:43:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 641, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6346:57:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 642, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "div", "nodeType": "MemberAccess", "referencedDeclaration": 1777, "src": "6346:61:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 646, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6346:70:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "functionReturnParameters": 626, "id": 647, "nodeType": "Return", "src": "6339:77:8"}]}, "id": 649, "implemented": true, "kind": "function", "modifiers": [], "name": "getRebalanceAmount", "nodeType": "FunctionDefinition", "parameters": {"id": 623, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 622, "mutability": "mutable", "name": "priceBtc", "nodeType": "VariableDeclaration", "scope": 649, "src": "6226:16:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 621, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "6226:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "6225:18:8"}, "returnParameters": {"id": 626, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 625, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 649, "src": "6267:7:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 624, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "6267:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "6266:9:8"}, "scope": 844, "src": "6198:225:8", "stateMutability": "view", "virtual": false, "visibility": "internal"}, {"body": {"id": 669, "nodeType": "Block", "src": "6514:102:8", "statements": [{"expression": {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 656, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 654, "name": "amountBtcUp", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 202, "src": "6531:11:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "30", "id": 655, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "6546:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "6531:16:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseExpression": {"arguments": [{"id": 665, "name": "amountBtcUp", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 202, "src": "6597:11:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"arguments": [{"commonType": {"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}, "id": 662, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "leftExpression": {"hexValue": "3130", "id": 660, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "6584:2:8", "typeDescriptions": {"typeIdentifier": "t_rational_10_by_1", "typeString": "int_const 10"}, "value": "10"}, "nodeType": "BinaryOperation", "operator": "**", "rightExpression": {"hexValue": "36", "id": 661, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "6590:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_6_by_1", "typeString": "int_const 6"}, "value": "6"}, "src": "6584:7:8", "typeDescriptions": {"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}], "expression": {"id": 658, "name": "collateralBtcUp", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 196, "src": "6564:15:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 659, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "mul", "nodeType": "MemberAccess", "referencedDeclaration": 1762, "src": "6564:19:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 663, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6564:28:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 664, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "div", "nodeType": "MemberAccess", "referencedDeclaration": 1777, "src": "6564:32:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 666, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6564:45:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 667, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "Conditional", "src": "6531:78:8", "trueExpression": {"id": 657, "name": "priceBtcUp", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 188, "src": "6551:10:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "functionReturnParameters": 653, "id": 668, "nodeType": "Return", "src": "6524:85:8"}]}, "functionSelector": "f06847d6", "id": 670, "implemented": true, "kind": "function", "modifiers": [], "name": "getBtcUpPrice", "nodeType": "FunctionDefinition", "parameters": {"id": 650, "nodeType": "ParameterList", "parameters": [], "src": "6481:2:8"}, "returnParameters": {"id": 653, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 652, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 670, "src": "6505:7:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 651, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "6505:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "6504:9:8"}, "scope": 844, "src": "6459:157:8", "stateMutability": "view", "virtual": false, "visibility": "public"}, {"body": {"id": 690, "nodeType": "Block", "src": "6711:122:8", "statements": [{"expression": {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 677, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 675, "name": "amountBtcDown", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 205, "src": "6740:13:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "30", "id": 676, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "6757:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "6740:18:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseExpression": {"arguments": [{"id": 686, "name": "amountBtcDown", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 205, "src": "6812:13:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"arguments": [{"commonType": {"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}, "id": 683, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "leftExpression": {"hexValue": "3130", "id": 681, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "6799:2:8", "typeDescriptions": {"typeIdentifier": "t_rational_10_by_1", "typeString": "int_const 10"}, "value": "10"}, "nodeType": "BinaryOperation", "operator": "**", "rightExpression": {"hexValue": "36", "id": 682, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "6805:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_6_by_1", "typeString": "int_const 6"}, "value": "6"}, "src": "6799:7:8", "typeDescriptions": {"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}], "expression": {"id": 679, "name": "collateralBtcDown", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 199, "src": "6777:17:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 680, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "mul", "nodeType": "MemberAccess", "referencedDeclaration": 1762, "src": "6777:21:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 684, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6777:30:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 685, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "div", "nodeType": "MemberAccess", "referencedDeclaration": 1777, "src": "6777:34:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 687, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6777:49:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 688, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "Conditional", "src": "6740:86:8", "trueExpression": {"id": 678, "name": "priceBtcDown", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 193, "src": "6762:12:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "functionReturnParameters": 674, "id": 689, "nodeType": "Return", "src": "6733:93:8"}]}, "functionSelector": "81c2b29b", "id": 691, "implemented": true, "kind": "function", "modifiers": [], "name": "getBtcDownPrice", "nodeType": "FunctionDefinition", "parameters": {"id": 671, "nodeType": "ParameterList", "parameters": [], "src": "6678:2:8"}, "returnParameters": {"id": 674, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 673, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 691, "src": "6702:7:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 672, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "6702:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "6701:9:8"}, "scope": 844, "src": "6654:179:8", "stateMutability": "view", "virtual": false, "visibility": "public"}, {"body": {"id": 714, "nodeType": "Block", "src": "6938:264:8", "statements": [{"assignments": [698], "declarations": [{"constant": false, "id": 698, "mutability": "mutable", "name": "priceFeed", "nodeType": "VariableDeclaration", "scope": 714, "src": "6948:31:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_contract$_AggregatorV3Interface_$1914", "typeString": "contract AggregatorV3Interface"}, "typeName": {"id": 697, "nodeType": "UserDefinedTypeName", "pathNode": {"id": 696, "name": "AggregatorV3Interface", "nodeType": "IdentifierPath", "referencedDeclaration": 1914, "src": "6948:21:8"}, "referencedDeclaration": 1914, "src": "6948:21:8", "typeDescriptions": {"typeIdentifier": "t_contract$_AggregatorV3Interface_$1914", "typeString": "contract AggregatorV3Interface"}}, "visibility": "internal"}], "id": 702, "initialValue": {"arguments": [{"id": 700, "name": "addressBtcUSDFeed", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 217, "src": "7004:17:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}], "id": 699, "name": "AggregatorV3Interface", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1914, "src": "6982:21:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_AggregatorV3Interface_$1914_$", "typeString": "type(contract AggregatorV3Interface)"}}, "id": 701, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6982:40:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_contract$_AggregatorV3Interface_$1914", "typeString": "contract AggregatorV3Interface"}}, "nodeType": "VariableDeclarationStatement", "src": "6948:74:8"}, {"assignments": [null, 704, null, null, null], "declarations": [null, {"constant": false, "id": 704, "mutability": "mutable", "name": "answer", "nodeType": "VariableDeclaration", "scope": 714, "src": "7034:13:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}, "typeName": {"id": 703, "name": "int256", "nodeType": "ElementaryTypeName", "src": "7034:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "visibility": "internal"}, null, null, null], "id": 708, "initialValue": {"arguments": [], "expression": {"argumentTypes": [], "expression": {"id": 705, "name": "priceFeed", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 698, "src": "7054:9:8", "typeDescriptions": {"typeIdentifier": "t_contract$_AggregatorV3Interface_$1914", "typeString": "contract AggregatorV3Interface"}}, "id": 706, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "latestRoundData", "nodeType": "MemberAccess", "referencedDeclaration": 1913, "src": "7054:25:8", "typeDescriptions": {"typeIdentifier": "t_function_external_view$__$returns$_t_uint80_$_t_int256_$_t_uint256_$_t_uint256_$_t_uint80_$", "typeString": "function () view external returns (uint80,int256,uint256,uint256,uint80)"}}, "id": 707, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7054:27:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_uint80_$_t_int256_$_t_uint256_$_t_uint256_$_t_uint80_$", "typeString": "tuple(uint80,int256,uint256,uint256,uint80)"}}, "nodeType": "VariableDeclarationStatement", "src": "7032:49:8"}, {"expression": {"arguments": [{"id": 711, "name": "answer", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 704, "src": "7108:6:8", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_int256", "typeString": "int256"}], "id": 710, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "7100:7:8", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 709, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "7100:7:8", "typeDescriptions": {}}}, "id": 712, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7100:15:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "functionReturnParameters": 695, "id": 713, "nodeType": "Return", "src": "7093:22:8"}]}, "functionSelector": "3a3610bc", "id": 715, "implemented": true, "kind": "function", "modifiers": [], "name": "getBtcPrice", "nodeType": "FunctionDefinition", "parameters": {"id": 692, "nodeType": "ParameterList", "parameters": [], "src": "6905:2:8"}, "returnParameters": {"id": 695, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 694, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 715, "src": "6929:7:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 693, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "6929:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "6928:9:8"}, "scope": 844, "src": "6885:317:8", "stateMutability": "view", "virtual": false, "visibility": "public"}, {"body": {"id": 731, "nodeType": "Block", "src": "7279:38:8", "statements": [{"expression": {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 726, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 724, "name": "a", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 717, "src": "7296:1:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<=", "rightExpression": {"id": 725, "name": "b", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 719, "src": "7301:1:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "7296:6:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseExpression": {"id": 728, "name": "b", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 719, "src": "7309:1:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 729, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "Conditional", "src": "7296:14:8", "trueExpression": {"id": 727, "name": "a", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 717, "src": "7305:1:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "functionReturnParameters": 723, "id": 730, "nodeType": "Return", "src": "7289:21:8"}]}, "id": 732, "implemented": true, "kind": "function", "modifiers": [], "name": "min", "nodeType": "FunctionDefinition", "parameters": {"id": 720, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 717, "mutability": "mutable", "name": "a", "nodeType": "VariableDeclaration", "scope": 732, "src": "7225:9:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 716, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "7225:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 719, "mutability": "mutable", "name": "b", "nodeType": "VariableDeclaration", "scope": 732, "src": "7236:9:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 718, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "7236:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "7224:22:8"}, "returnParameters": {"id": 723, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 722, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 732, "src": "7270:7:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 721, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "7270:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "7269:9:8"}, "scope": 844, "src": "7212:105:8", "stateMutability": "pure", "virtual": false, "visibility": "internal"}, {"body": {"id": 774, "nodeType": "Block", "src": "7377:171:8", "statements": [{"assignments": [740], "declarations": [{"constant": false, "id": 740, "mutability": "mutable", "name": "denom", "nodeType": "VariableDeclaration", "scope": 774, "src": "7413:13:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 739, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "7413:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 759, "initialValue": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 758, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 754, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 750, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"hexValue": "39", "id": 741, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "7429:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_9_by_1", "typeString": "int_const 9"}, "value": "9"}, "nodeType": "BinaryOperation", "operator": "*", "rightExpression": {"components": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 748, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 744, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 742, "name": "x", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 734, "src": "7434:1:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "**", "rightExpression": {"hexValue": "32", "id": 743, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "7439:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_2_by_1", "typeString": "int_const 2"}, "value": "2"}, "src": "7434:6:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "/", "rightExpression": {"commonType": {"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}, "id": 747, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "leftExpression": {"hexValue": "3130", "id": 745, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "7443:2:8", "typeDescriptions": {"typeIdentifier": "t_rational_10_by_1", "typeString": "int_const 10"}, "value": "10"}, "nodeType": "BinaryOperation", "operator": "**", "rightExpression": {"hexValue": "36", "id": 746, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "7449:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_6_by_1", "typeString": "int_const 6"}, "value": "6"}, "src": "7443:7:8", "typeDescriptions": {"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}}, "src": "7434:16:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "id": 749, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "7433:18:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "7429:22:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 753, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"hexValue": "33", "id": 751, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "7455:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_3_by_1", "typeString": "int_const 3"}, "value": "3"}, "nodeType": "BinaryOperation", "operator": "*", "rightExpression": {"id": 752, "name": "x", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 734, "src": "7459:1:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "7455:5:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "7429:31:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"commonType": {"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}, "id": 757, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "leftExpression": {"hexValue": "3130", "id": 755, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "7463:2:8", "typeDescriptions": {"typeIdentifier": "t_rational_10_by_1", "typeString": "int_const 10"}, "value": "10"}, "nodeType": "BinaryOperation", "operator": "**", "rightExpression": {"hexValue": "36", "id": 756, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "7469:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_6_by_1", "typeString": "int_const 6"}, "value": "6"}, "src": "7463:7:8", "typeDescriptions": {"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}}, "src": "7429:41:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "7413:57:8"}, {"assignments": [761], "declarations": [{"constant": false, "id": 761, "mutability": "mutable", "name": "num", "nodeType": "VariableDeclaration", "scope": 774, "src": "7480:11:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 760, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "7480:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 765, "initialValue": {"commonType": {"typeIdentifier": "t_rational_1000000000000_by_1", "typeString": "int_const 1000000000000"}, "id": 764, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "leftExpression": {"hexValue": "3130", "id": 762, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "7494:2:8", "typeDescriptions": {"typeIdentifier": "t_rational_10_by_1", "typeString": "int_const 10"}, "value": "10"}, "nodeType": "BinaryOperation", "operator": "**", "rightExpression": {"hexValue": "3132", "id": 763, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "7500:2:8", "typeDescriptions": {"typeIdentifier": "t_rational_12_by_1", "typeString": "int_const 12"}, "value": "12"}, "src": "7494:8:8", "typeDescriptions": {"typeIdentifier": "t_rational_1000000000000_by_1", "typeString": "int_const 1000000000000"}}, "nodeType": "VariableDeclarationStatement", "src": "7480:22:8"}, {"expression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 772, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}, "id": 768, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "leftExpression": {"hexValue": "3130", "id": 766, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "7520:2:8", "typeDescriptions": {"typeIdentifier": "t_rational_10_by_1", "typeString": "int_const 10"}, "value": "10"}, "nodeType": "BinaryOperation", "operator": "**", "rightExpression": {"hexValue": "36", "id": 767, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "7526:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_6_by_1", "typeString": "int_const 6"}, "value": "6"}, "src": "7520:7:8", "typeDescriptions": {"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 771, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 769, "name": "num", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 761, "src": "7530:3:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "/", "rightExpression": {"id": 770, "name": "denom", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 740, "src": "7536:5:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "7530:11:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "7520:21:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "functionReturnParameters": 738, "id": 773, "nodeType": "Return", "src": "7513:28:8"}]}, "id": 775, "implemented": true, "kind": "function", "modifiers": [], "name": "L", "nodeType": "FunctionDefinition", "parameters": {"id": 735, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 734, "mutability": "mutable", "name": "x", "nodeType": "VariableDeclaration", "scope": 775, "src": "7334:9:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 733, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "7334:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "7333:11:8"}, "returnParameters": {"id": 738, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 737, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 775, "src": "7368:7:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 736, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "7368:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "7367:9:8"}, "scope": 844, "src": "7323:225:8", "stateMutability": "pure", "virtual": false, "visibility": "internal"}, {"body": {"id": 818, "nodeType": "Block", "src": "7626:246:8", "statements": [{"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 784, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 782, "name": "btcPrice", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 777, "src": "7657:8:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"id": 783, "name": "lastBtcPrice", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 208, "src": "7668:12:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "7657:23:8", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 816, "nodeType": "Block", "src": "7781:84:8", "statements": [{"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}, "id": 813, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "leftExpression": {"hexValue": "3130", "id": 811, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "7846:2:8", "typeDescriptions": {"typeIdentifier": "t_rational_10_by_1", "typeString": "int_const 10"}, "value": "10"}, "nodeType": "BinaryOperation", "operator": "**", "rightExpression": {"hexValue": "36", "id": 812, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "7852:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_6_by_1", "typeString": "int_const 6"}, "value": "6"}, "src": "7846:7:8", "typeDescriptions": {"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}], "expression": {"arguments": [{"id": 808, "name": "btcPrice", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 777, "src": "7832:8:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"arguments": [{"commonType": {"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}, "id": 805, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "leftExpression": {"hexValue": "3130", "id": 803, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "7819:2:8", "typeDescriptions": {"typeIdentifier": "t_rational_10_by_1", "typeString": "int_const 10"}, "value": "10"}, "nodeType": "BinaryOperation", "operator": "**", "rightExpression": {"hexValue": "36", "id": 804, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "7825:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_6_by_1", "typeString": "int_const 6"}, "value": "6"}, "src": "7819:7:8", "typeDescriptions": {"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}], "expression": {"id": 801, "name": "lastBtcPrice", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 208, "src": "7802:12:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 802, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "mul", "nodeType": "MemberAccess", "referencedDeclaration": 1762, "src": "7802:16:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 806, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7802:25:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 807, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "div", "nodeType": "MemberAccess", "referencedDeclaration": 1777, "src": "7802:29:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 809, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7802:39:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 810, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sub", "nodeType": "MemberAccess", "referencedDeclaration": 1747, "src": "7802:43:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 814, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7802:52:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "functionReturnParameters": 781, "id": 815, "nodeType": "Return", "src": "7795:59:8"}]}, "id": 817, "nodeType": "IfStatement", "src": "7653:212:8", "trueBody": {"id": 800, "nodeType": "Block", "src": "7682:84:8", "statements": [{"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}, "id": 797, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "leftExpression": {"hexValue": "3130", "id": 795, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "7747:2:8", "typeDescriptions": {"typeIdentifier": "t_rational_10_by_1", "typeString": "int_const 10"}, "value": "10"}, "nodeType": "BinaryOperation", "operator": "**", "rightExpression": {"hexValue": "36", "id": 796, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "7753:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_6_by_1", "typeString": "int_const 6"}, "value": "6"}, "src": "7747:7:8", "typeDescriptions": {"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}], "expression": {"arguments": [{"id": 792, "name": "lastBtcPrice", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 208, "src": "7729:12:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"arguments": [{"commonType": {"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}, "id": 789, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "leftExpression": {"hexValue": "3130", "id": 787, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "7716:2:8", "typeDescriptions": {"typeIdentifier": "t_rational_10_by_1", "typeString": "int_const 10"}, "value": "10"}, "nodeType": "BinaryOperation", "operator": "**", "rightExpression": {"hexValue": "36", "id": 788, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "7722:1:8", "typeDescriptions": {"typeIdentifier": "t_rational_6_by_1", "typeString": "int_const 6"}, "value": "6"}, "src": "7716:7:8", "typeDescriptions": {"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}], "expression": {"id": 785, "name": "btcPrice", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 777, "src": "7703:8:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 786, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "mul", "nodeType": "MemberAccess", "referencedDeclaration": 1762, "src": "7703:12:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 790, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7703:21:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 791, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "div", "nodeType": "MemberAccess", "referencedDeclaration": 1777, "src": "7703:25:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 793, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7703:39:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 794, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sub", "nodeType": "MemberAccess", "referencedDeclaration": 1747, "src": "7703:43:8", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$", "typeString": "function (uint256,uint256) pure returns (uint256)"}}, "id": 798, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7703:52:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "functionReturnParameters": 781, "id": 799, "nodeType": "Return", "src": "7696:59:8"}]}}]}, "id": 819, "implemented": true, "kind": "function", "modifiers": [], "name": "getPriceDiff", "nodeType": "FunctionDefinition", "parameters": {"id": 778, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 777, "mutability": "mutable", "name": "btcPrice", "nodeType": "VariableDeclaration", "scope": 819, "src": "7576:16:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 776, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "7576:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "7575:18:8"}, "returnParameters": {"id": 781, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 780, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 819, "src": "7617:7:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 779, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "7617:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "7616:9:8"}, "scope": 844, "src": "7554:318:8", "stateMutability": "view", "virtual": false, "visibility": "internal"}, {"body": {"id": 830, "nodeType": "Block", "src": "7934:51:8", "statements": [{"expression": {"arguments": [{"expression": {"id": 826, "name": "msg", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -15, "src": "7967:3:8", "typeDescriptions": {"typeIdentifier": "t_magic_message", "typeString": "msg"}}, "id": 827, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sender", "nodeType": "MemberAccess", "src": "7967:10:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}], "expression": {"id": 824, "name": "btcUp", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 220, "src": "7951:5:8", "typeDescriptions": {"typeIdentifier": "t_contract$_BTCUP_$108", "typeString": "contract BTCUP"}}, "id": 825, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "balanceOf", "nodeType": "MemberAccess", "referencedDeclaration": 1047, "src": "7951:15:8", "typeDescriptions": {"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$", "typeString": "function (address) view external returns (uint256)"}}, "id": 828, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7951:27:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "functionReturnParameters": 823, "id": 829, "nodeType": "Return", "src": "7944:34:8"}]}, "functionSelector": "157d0129", "id": 831, "implemented": true, "kind": "function", "modifiers": [], "name": "getBtcupBalance", "nodeType": "FunctionDefinition", "parameters": {"id": 820, "nodeType": "ParameterList", "parameters": [], "src": "7902:2:8"}, "returnParameters": {"id": 823, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 822, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 831, "src": "7925:7:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 821, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "7925:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "7924:9:8"}, "scope": 844, "src": "7878:107:8", "stateMutability": "view", "virtual": false, "visibility": "public"}, {"body": {"id": 842, "nodeType": "Block", "src": "8049:53:8", "statements": [{"expression": {"arguments": [{"expression": {"id": 838, "name": "msg", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -15, "src": "8084:3:8", "typeDescriptions": {"typeIdentifier": "t_magic_message", "typeString": "msg"}}, "id": 839, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sender", "nodeType": "MemberAccess", "src": "8084:10:8", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}], "expression": {"id": 836, "name": "btcDown", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 223, "src": "8066:7:8", "typeDescriptions": {"typeIdentifier": "t_contract$_BTCDOWN_$178", "typeString": "contract BTCDOWN"}}, "id": 837, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "balanceOf", "nodeType": "MemberAccess", "referencedDeclaration": 1047, "src": "8066:17:8", "typeDescriptions": {"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$", "typeString": "function (address) view external returns (uint256)"}}, "id": 840, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "8066:29:8", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "functionReturnParameters": 835, "id": 841, "nodeType": "Return", "src": "8059:36:8"}]}, "functionSelector": "c7e3b124", "id": 843, "implemented": true, "kind": "function", "modifiers": [], "name": "getBtcdownBalance", "nodeType": "FunctionDefinition", "parameters": {"id": 832, "nodeType": "ParameterList", "parameters": [], "src": "8017:2:8"}, "returnParameters": {"id": 835, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 834, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 843, "src": "8040:7:8", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 833, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "8040:7:8", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "8039:9:8"}, "scope": 844, "src": "7991:111:8", "stateMutability": "view", "virtual": false, "visibility": "public"}], "scope": 845, "src": "1863:6243:8"}], "src": "32:8081:8"}, "bytecode": "6080604052620f42406001819055600255600060038190556004819055600581905560068190556007556008805474b7a4f3e9097c08da09517b5ab877f7a917224ede006001600160a81b0319909116179055600980546001600160a01b031916736135b13325bfc4b00278b4abc5e20bbce2d6580e17905534801561008457600080fd5b5061009561009061009a565b61009e565b6100ee565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61320a806100fd6000396000f3fe60806040523480156200001157600080fd5b50600436106200015f5760003560e01c8063b75cbe0b11620000c9578063f0156e8a1162000087578063f0156e8a1462000261578063f06847d6146200026b578063f2fde38b1462000275578063f4352c57146200028c578063f530c04a1462000296578063feae67b014620002ad576200015f565b8063b75cbe0b1462000215578063c46d4f09146200021f578063c7e3b1241462000236578063d1ee539d1462000240578063dde7be2c1462000257576200015f565b80636e5d661511620001235780636e5d661514620001ae578063715018a614620001ba57806381c2b29b14620001c45780638da5cb5b14620001ce57806398881bc914620001e7578063a14274e814620001fe576200015f565b806234b9cc14620001645780630c3e5343146200018657806314d7c6d21462000190578063157d0129146200019a5780633a3610bc14620001a4575b600080fd5b6200016e620002c6565b6040516200017d9190620010b5565b60405180910390f35b6200016e620002cc565b6200016e620002d2565b6200016e620002d8565b6200016e62000364565b620001b8620003f5565b005b620001b862000497565b6200016e620004f4565b620001d862000536565b6040516200017d919062000f70565b620001b8620001f836600462000eea565b62000545565b620001b86200020f36600462000eea565b62000696565b6200016e62000806565b620001b86200023036600462000eea565b6200080c565b6200016e62000979565b620001b86200025136600462000eea565b620009ac565b6200016e62000aa6565b6200016e62000aac565b6200016e62000ab2565b620001b86200028636600462000e9f565b62000ae7565b6200016e62000b64565b620001b8620002a736600462000eea565b62000b6a565b620002b762000c62565b6040516200017d919062000fc1565b60055481565b60025481565b60045481565b600a546040516370a0823160e01b81526000916001600160a01b0316906370a08231906200030b90339060040162000f70565b60206040518083038186803b1580156200032457600080fd5b505afa15801562000339573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200035f919062000f03565b905090565b60095460408051633fabe5a360e21b815290516000926001600160a01b0316918391839163feaf968c9160048083019260a0929190829003018186803b158015620003ae57600080fd5b505afa158015620003c3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003e9919062000f1c565b50919550505050505090565b60006200040162000364565b905060006003541180156200041857506000600454115b15620004925760006200042b8262000c6b565b905060006200043a8362000cb2565b13156200046b5760035462000450908262000cd2565b60035560045462000462908262000ce7565b60045562000490565b6003546200047a908262000ce7565b6003556004546200048c908262000cd2565b6004555b505b600755565b620004a162000cf5565b6001600160a01b0316620004b462000536565b6001600160a01b031614620004e65760405162461bcd60e51b8152600401620004dd9062001049565b60405180910390fd5b620004f2600062000cf9565b565b60006006546000146200052f576200052960065462000522620f424060045462000d4990919063ffffffff16565b9062000d57565b6200035f565b5060025490565b6000546001600160a01b031690565b6200054f62000cf5565b6001600160a01b03166200056262000536565b6001600160a01b0316146200058b5760405162461bcd60e51b8152600401620004dd9062001049565b60085460ff1615620005b15760405162461bcd60e51b8152600401620004dd9062001012565b30604051620005c09062000e68565b620005cc919062000f70565b604051809103906000f080158015620005e9573d6000803e3d6000fd5b50600a80546001600160a01b0319166001600160a01b039290921691909117905560405130906200061a9062000e76565b62000626919062000f70565b604051809103906000f08015801562000643573d6000803e3d6000fd5b50600b80546001600160a01b0319166001600160a01b039290921691909117905562000675620002a782600262000d57565b620006866200023082600262000d57565b506008805460ff19166001179055565b620006a0620003f5565b600b54604051630852cd8d60e31b81526001600160a01b03909116906342966c6890620006d2908490600401620010b5565b600060405180830381600087803b158015620006ed57600080fd5b505af115801562000702573d6000803e3d6000fd5b5050505062000710620004f4565b60028190556000906200072f90620f4240906200052290859062000d49565b60065490915062000741908362000ce7565b60065560045462000753908262000ce7565b600490815560085460405163a9059cbb60e01b81526101009091046001600160a01b031691829163a9059cbb916200079091339187910162000fa8565b602060405180830381600087803b158015620007ab57600080fd5b505af1158015620007c0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007e6919062000ec8565b6200080157634e487b7160e01b600052600160045260246000fd5b505050565b60065481565b62000816620003f5565b62000820620004f4565b60028190556000906200083c906200052284620f424062000d49565b600b5460405163140e25ad60e31b81529192506001600160a01b03169063a0712d68906200086f908490600401620010b5565b600060405180830381600087803b1580156200088a57600080fd5b505af11580156200089f573d6000803e3d6000fd5b5050600654620008b3925090508262000cd2565b600655600454620008c5908362000cd2565b60049081556008546040516323b872dd60e01b81526101009091046001600160a01b03169182916323b872dd9162000904913391309189910162000f84565b602060405180830381600087803b1580156200091f57600080fd5b505af115801562000934573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200095a919062000ec8565b620008015760405162461bcd60e51b8152600401620004dd906200107e565b600b546040516370a0823160e01b81526000916001600160a01b0316906370a08231906200030b90339060040162000f70565b620009b6620003f5565b600a54604051630852cd8d60e31b81526001600160a01b03909116906342966c6890620009e8908490600401620010b5565b600060405180830381600087803b15801562000a0357600080fd5b505af115801562000a18573d6000803e3d6000fd5b5050505062000a2662000ab2565b600181905560009062000a4590620f4240906200052290859062000d49565b60055490915062000a57908362000ce7565b60055560035462000a69908262000ce7565b60035560085460405163a9059cbb60e01b81526101009091046001600160a01b031690819063a9059cbb9062000790903390869060040162000fa8565b60035481565b60015481565b600060055460001462000ae0576200052960055462000522620f424060035462000d4990919063ffffffff16565b5060015490565b62000af162000cf5565b6001600160a01b031662000b0462000536565b6001600160a01b03161462000b2d5760405162461bcd60e51b8152600401620004dd9062001049565b6001600160a01b03811662000b565760405162461bcd60e51b8152600401620004dd9062000fcc565b62000b618162000cf9565b50565b60075481565b62000b74620003f5565b62000b7e62000ab2565b600181905560009062000b9a906200052284620f424062000d49565b600a5460405163140e25ad60e31b81529192506001600160a01b03169063a0712d689062000bcd908490600401620010b5565b600060405180830381600087803b15801562000be857600080fd5b505af115801562000bfd573d6000803e3d6000fd5b505060055462000c11925090508262000cd2565b60055560035462000c23908362000cd2565b6003556008546040516323b872dd60e01b81526101009091046001600160a01b03169081906323b872dd90620009049033903090889060040162000f84565b60085460ff1681565b60008062000c798362000d65565b905062000ca9620f42406200052262000c928462000dcf565b62000ca260035460045462000e4f565b9062000d49565b9150505b919050565b600060075482111562000cc85750600162000cad565b5060001962000cad565b600062000ce08284620010be565b9392505050565b600062000ce0828462001254565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600062000ce0828462001232565b600062000ce08284620010d9565b600060075482111562000da85762000da0620f424062000d9960075462000522620f42408762000d4990919063ffffffff16565b9062000ce7565b905062000cad565b62000da0620f424062000d998462000522620f424060075462000d4990919063ffffffff16565b60008062000ddf83600362001232565b620f424062000df060028662001147565b62000dfc9190620010d9565b62000e0990600962001232565b62000e159190620010be565b62000e2490620f4240620010be565b905064e8d4a5100062000e388282620010d9565b62000e4790620f424062001254565b949350505050565b60008183111562000e61578162000ce0565b5090919050565b610fa6806200128583390190565b610faa806200222b83390190565b805169ffffffffffffffffffff8116811462000cad57600080fd5b60006020828403121562000eb1578081fd5b81356001600160a01b038116811462000ce0578182fd5b60006020828403121562000eda578081fd5b8151801515811462000ce0578182fd5b60006020828403121562000efc578081fd5b5035919050565b60006020828403121562000f15578081fd5b5051919050565b600080600080600060a0868803121562000f34578081fd5b62000f3f8662000e84565b945060208601519350604086015192506060860151915062000f646080870162000e84565b90509295509295909350565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601f908201527f54686520706f6f6c2077617320616c726561647920696e697469617465642e00604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601b908201527f596f7520646f6e2774206861766520656e6f75676820555344432e0000000000604082015260600190565b90815260200190565b60008219821115620010d457620010d46200126e565b500190565b600082620010f557634e487b7160e01b81526012600452602481fd5b500490565b80825b60018086116200110e57506200113e565b8187048211156200112357620011236200126e565b808616156200113157918102915b9490941c938002620010fd565b94509492505050565b600062000ce060001960ff851684600082620011665750600162000ce0565b81620011755750600062000ce0565b81600181146200118e57600281146200119957620011cd565b600191505062000ce0565b60ff841115620011ad57620011ad6200126e565b6001841b915084821115620011c657620011c66200126e565b5062000ce0565b5060208310610133831016604e8410600b841016171562001205575081810a83811115620011ff57620011ff6200126e565b62000ce0565b620012148484846001620010fa565b8086048211156200122957620012296200126e565b02949350505050565b60008160001904831182151516156200124f576200124f6200126e565b500290565b6000828210156200126957620012696200126e565b500390565b634e487b7160e01b600052601160045260246000fdfe60806040523480156200001157600080fd5b5060405162000fa638038062000fa6833981016040819052620000349162000169565b604080518082018252600a8152690426974636f696e2055760b41b602080830191825283518085019094526005845264042544355560dc1b9084015281519192916200008391600391620000c3565b50805162000099906004906020840190620000c3565b5050600580546001600160a01b0319166001600160a01b03939093169290921790915550620001d6565b828054620000d19062000199565b90600052602060002090601f016020900481019282620000f5576000855562000140565b82601f106200011057805160ff191683800117855562000140565b8280016001018555821562000140579182015b828111156200014057825182559160200191906001019062000123565b506200014e92915062000152565b5090565b5b808211156200014e576000815560010162000153565b6000602082840312156200017b578081fd5b81516001600160a01b038116811462000192578182fd5b9392505050565b600281046001821680620001ae57607f821691505b60208210811415620001d057634e487b7160e01b600052602260045260246000fd5b50919050565b610dc080620001e66000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806370a082311161008c578063a0712d6811610066578063a0712d68146101c0578063a457c2d7146101d3578063a9059cbb146101e6578063dd62ed3e146101f9576100ea565b806370a082311461019257806379cc6790146101a557806395d89b41146101b8576100ea565b806323b872dd116100c857806323b872dd14610142578063313ce56714610155578063395093511461016a57806342966c681461017d576100ea565b806306fdde03146100ef578063095ea7b31461010d57806318160ddd1461012d575b600080fd5b6100f761020c565b60405161010491906109c1565b60405180910390f35b61012061011b366004610975565b61029e565b60405161010491906109b6565b6101356102bb565b6040516101049190610cf3565b61012061015036600461093a565b6102c1565b61015d61035a565b6040516101049190610cfc565b610120610178366004610975565b61035f565b61019061018b36600461099e565b6103b3565b005b6101356101a03660046108e7565b6103d7565b6101906101b3366004610975565b6103f6565b6100f7610449565b6101906101ce36600461099e565b610458565b6101206101e1366004610975565b610479565b6101206101f4366004610975565b6104f2565b610135610207366004610908565b610506565b60606003805461021b90610d39565b80601f016020809104026020016040519081016040528092919081815260200182805461024790610d39565b80156102945780601f1061026957610100808354040283529160200191610294565b820191906000526020600020905b81548152906001019060200180831161027757829003601f168201915b5050505050905090565b60006102b26102ab610531565b8484610535565b50600192915050565b60025490565b60006102ce8484846105e9565b6001600160a01b0384166000908152600160205260408120816102ef610531565b6001600160a01b03166001600160a01b031681526020019081526020016000205490508281101561033b5760405162461bcd60e51b815260040161033290610b21565b60405180910390fd5b61034f85610347610531565b858403610535565b506001949350505050565b600690565b60006102b261036c610531565b84846001600061037a610531565b6001600160a01b03908116825260208083019390935260409182016000908120918b16815292529020546103ae9190610d0a565b610535565b6005546001600160a01b031633146103ca57600080fd5b6103d432826103f6565b50565b6001600160a01b0381166000908152602081905260409020545b919050565b600061040483610207610531565b9050818110156104265760405162461bcd60e51b815260040161033290610b69565b61043a83610432610531565b848403610535565b6104448383610713565b505050565b60606004805461021b90610d39565b6005546001600160a01b0316331461046f57600080fd5b6103d43282610804565b60008060016000610488610531565b6001600160a01b03908116825260208083019390935260409182016000908120918816815292529020549050828110156104d45760405162461bcd60e51b815260040161033290610c77565b6104e86104df610531565b85858403610535565b5060019392505050565b60006102b26104ff610531565b84846105e9565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3390565b6001600160a01b03831661055b5760405162461bcd60e51b815260040161033290610c33565b6001600160a01b0382166105815760405162461bcd60e51b815260040161033290610a99565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906105dc908590610cf3565b60405180910390a3505050565b6001600160a01b03831661060f5760405162461bcd60e51b815260040161033290610bee565b6001600160a01b0382166106355760405162461bcd60e51b815260040161033290610a14565b610640838383610444565b6001600160a01b038316600090815260208190526040902054818110156106795760405162461bcd60e51b815260040161033290610adb565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906106b0908490610d0a565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106fa9190610cf3565b60405180910390a361070d848484610444565b50505050565b6001600160a01b0382166107395760405162461bcd60e51b815260040161033290610bad565b61074582600083610444565b6001600160a01b0382166000908152602081905260409020548181101561077e5760405162461bcd60e51b815260040161033290610a57565b6001600160a01b03831660009081526020819052604081208383039055600280548492906107ad908490610d22565b90915550506040516000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906107f0908690610cf3565b60405180910390a361044483600084610444565b6001600160a01b03821661082a5760405162461bcd60e51b815260040161033290610cbc565b61083660008383610444565b80600260008282546108489190610d0a565b90915550506001600160a01b03821660009081526020819052604081208054839290610875908490610d0a565b90915550506040516001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906108b8908590610cf3565b60405180910390a36108cc60008383610444565b5050565b80356001600160a01b03811681146103f157600080fd5b6000602082840312156108f8578081fd5b610901826108d0565b9392505050565b6000806040838503121561091a578081fd5b610923836108d0565b9150610931602084016108d0565b90509250929050565b60008060006060848603121561094e578081fd5b610957846108d0565b9250610965602085016108d0565b9150604084013590509250925092565b60008060408385031215610987578182fd5b610990836108d0565b946020939093013593505050565b6000602082840312156109af578081fd5b5035919050565b901515815260200190565b6000602080835283518082850152825b818110156109ed578581018301518582016040015282016109d1565b818111156109fe5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526022908201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604082015261636560f01b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526026908201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604082015265616c616e636560d01b606082015260800190565b60208082526028908201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616040820152676c6c6f77616e636560c01b606082015260800190565b60208082526024908201527f45524332303a206275726e20616d6f756e74206578636565647320616c6c6f77604082015263616e636560e01b606082015260800190565b60208082526021908201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526025908201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604082015264207a65726f60d81b606082015260800190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b90815260200190565b60ff91909116815260200190565b60008219821115610d1d57610d1d610d74565b500190565b600082821015610d3457610d34610d74565b500390565b600281046001821680610d4d57607f821691505b60208210811415610d6e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea26469706673582212204b56f0cf37d0c33c8e1f8790574f12511ae6d7a93357d34f6358125da763b44c64736f6c6343000800003360806040523480156200001157600080fd5b5060405162000faa38038062000faa83398101604081905262000034916200016d565b604080518082018252600c81526b2134ba31b7b4b7102237bbb760a11b602080830191825283518085019094526007845266212a21a227aba760c91b9084015281519192916200008791600391620000c7565b5080516200009d906004906020840190620000c7565b5050600580546001600160a01b0319166001600160a01b03939093169290921790915550620001da565b828054620000d5906200019d565b90600052602060002090601f016020900481019282620000f9576000855562000144565b82601f106200011457805160ff191683800117855562000144565b8280016001018555821562000144579182015b828111156200014457825182559160200191906001019062000127565b506200015292915062000156565b5090565b5b8082111562000152576000815560010162000157565b6000602082840312156200017f578081fd5b81516001600160a01b038116811462000196578182fd5b9392505050565b600281046001821680620001b257607f821691505b60208210811415620001d457634e487b7160e01b600052602260045260246000fd5b50919050565b610dc080620001ea6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806370a082311161008c578063a0712d6811610066578063a0712d68146101c0578063a457c2d7146101d3578063a9059cbb146101e6578063dd62ed3e146101f9576100ea565b806370a082311461019257806379cc6790146101a557806395d89b41146101b8576100ea565b806323b872dd116100c857806323b872dd14610142578063313ce56714610155578063395093511461016a57806342966c681461017d576100ea565b806306fdde03146100ef578063095ea7b31461010d57806318160ddd1461012d575b600080fd5b6100f761020c565b60405161010491906109c1565b60405180910390f35b61012061011b366004610975565b61029e565b60405161010491906109b6565b6101356102bb565b6040516101049190610cf3565b61012061015036600461093a565b6102c1565b61015d61035a565b6040516101049190610cfc565b610120610178366004610975565b61035f565b61019061018b36600461099e565b6103b3565b005b6101356101a03660046108e7565b6103d7565b6101906101b3366004610975565b6103f6565b6100f7610449565b6101906101ce36600461099e565b610458565b6101206101e1366004610975565b610479565b6101206101f4366004610975565b6104f2565b610135610207366004610908565b610506565b60606003805461021b90610d39565b80601f016020809104026020016040519081016040528092919081815260200182805461024790610d39565b80156102945780601f1061026957610100808354040283529160200191610294565b820191906000526020600020905b81548152906001019060200180831161027757829003601f168201915b5050505050905090565b60006102b26102ab610531565b8484610535565b50600192915050565b60025490565b60006102ce8484846105e9565b6001600160a01b0384166000908152600160205260408120816102ef610531565b6001600160a01b03166001600160a01b031681526020019081526020016000205490508281101561033b5760405162461bcd60e51b815260040161033290610b21565b60405180910390fd5b61034f85610347610531565b858403610535565b506001949350505050565b600690565b60006102b261036c610531565b84846001600061037a610531565b6001600160a01b03908116825260208083019390935260409182016000908120918b16815292529020546103ae9190610d0a565b610535565b6005546001600160a01b031633146103ca57600080fd5b6103d432826103f6565b50565b6001600160a01b0381166000908152602081905260409020545b919050565b600061040483610207610531565b9050818110156104265760405162461bcd60e51b815260040161033290610b69565b61043a83610432610531565b848403610535565b6104448383610713565b505050565b60606004805461021b90610d39565b6005546001600160a01b0316331461046f57600080fd5b6103d43282610804565b60008060016000610488610531565b6001600160a01b03908116825260208083019390935260409182016000908120918816815292529020549050828110156104d45760405162461bcd60e51b815260040161033290610c77565b6104e86104df610531565b85858403610535565b5060019392505050565b60006102b26104ff610531565b84846105e9565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3390565b6001600160a01b03831661055b5760405162461bcd60e51b815260040161033290610c33565b6001600160a01b0382166105815760405162461bcd60e51b815260040161033290610a99565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906105dc908590610cf3565b60405180910390a3505050565b6001600160a01b03831661060f5760405162461bcd60e51b815260040161033290610bee565b6001600160a01b0382166106355760405162461bcd60e51b815260040161033290610a14565b610640838383610444565b6001600160a01b038316600090815260208190526040902054818110156106795760405162461bcd60e51b815260040161033290610adb565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906106b0908490610d0a565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106fa9190610cf3565b60405180910390a361070d848484610444565b50505050565b6001600160a01b0382166107395760405162461bcd60e51b815260040161033290610bad565b61074582600083610444565b6001600160a01b0382166000908152602081905260409020548181101561077e5760405162461bcd60e51b815260040161033290610a57565b6001600160a01b03831660009081526020819052604081208383039055600280548492906107ad908490610d22565b90915550506040516000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906107f0908690610cf3565b60405180910390a361044483600084610444565b6001600160a01b03821661082a5760405162461bcd60e51b815260040161033290610cbc565b61083660008383610444565b80600260008282546108489190610d0a565b90915550506001600160a01b03821660009081526020819052604081208054839290610875908490610d0a565b90915550506040516001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906108b8908590610cf3565b60405180910390a36108cc60008383610444565b5050565b80356001600160a01b03811681146103f157600080fd5b6000602082840312156108f8578081fd5b610901826108d0565b9392505050565b6000806040838503121561091a578081fd5b610923836108d0565b9150610931602084016108d0565b90509250929050565b60008060006060848603121561094e578081fd5b610957846108d0565b9250610965602085016108d0565b9150604084013590509250925092565b60008060408385031215610987578182fd5b610990836108d0565b946020939093013593505050565b6000602082840312156109af578081fd5b5035919050565b901515815260200190565b6000602080835283518082850152825b818110156109ed578581018301518582016040015282016109d1565b818111156109fe5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526022908201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604082015261636560f01b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526026908201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604082015265616c616e636560d01b606082015260800190565b60208082526028908201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616040820152676c6c6f77616e636560c01b606082015260800190565b60208082526024908201527f45524332303a206275726e20616d6f756e74206578636565647320616c6c6f77604082015263616e636560e01b606082015260800190565b60208082526021908201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526025908201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604082015264207a65726f60d81b606082015260800190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b90815260200190565b60ff91909116815260200190565b60008219821115610d1d57610d1d610d74565b500190565b600082821015610d3457610d34610d74565b500390565b600281046001821680610d4d57607f821691505b60208210811415610d6e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea26469706673582212204e1c6d573572959203575a7ef9e80d49a5273f50819d26ad7285e1265cc9eec664736f6c63430008000033a26469706673582212206eb16b4aa67d309939f62d43371989c51808787b63d8e50fccb32c3795026bf764736f6c63430008000033", "bytecodeSha1": "5fbd8aa674de23e45d2fa104ad158ca577257bff", "compiler": {"evm_version": "istanbul", "optimizer": {"enabled": true, "runs": 200}, "version": "0.8.0+commit.c7dfd78e"}, "contractName": "LeveragedTrading", "coverageMap": {"branches": {"0": {"Ownable.transferOwnership": {"66": [1185, 1208, true], "67": [1934, 1956, true]}}, "1": {}, "2": {}, "3": {}, "4": {}, "5": {}, "6": {}, "7": {}, "8": {"LeveragedTrading.getBtcDownPrice": {"58": [6740, 6758, true]}, "LeveragedTrading.getBtcUpPrice": {"61": [6531, 6547, true]}, "LeveragedTrading.getPriceDiff": {"64": [7657, 7680, false]}, "LeveragedTrading.getSign": {"63": [6079, 6102, false]}, "LeveragedTrading.initializePool": {"59": [2790, 2808, true]}, "LeveragedTrading.issueBtcDown": {"60": [4057, 4113, true]}, "LeveragedTrading.issueBtcUp": {"62": [3500, 3556, true]}, "LeveragedTrading.min": {"65": [7296, 7302, true]}, "LeveragedTrading.rebalanceLeveragedTokens": {"57": [5404, 5425, false]}}}, "statements": {"0": {"Ownable._setOwner": {"49": [2131, 2148], "50": [2158, 2203]}, "Ownable.owner": {"8": [1038, 1051]}, "Ownable.renounceOwnership": {"6": [1669, 1690]}, "Ownable.transferOwnership": {"35": [1926, 1999], "36": [2009, 2028]}}, "1": {}, "2": {}, "3": {}, "4": {}, "5": {"Context._msgSender": {"48": [658, 675]}}, "6": {"SafeMath.add": {"46": [2749, 2761]}, "SafeMath.div": {"52": [3844, 3856]}, "SafeMath.mul": {"51": [3459, 3471]}, "SafeMath.sub": {"47": [3116, 3128]}}, "7": {}, "8": {"LeveragedTrading.L": {"55": [7513, 7541]}, "LeveragedTrading.getBtcDownPrice": {"7": [6733, 6826]}, "LeveragedTrading.getBtcUpPrice": {"34": [6524, 6609]}, "LeveragedTrading.getBtcdownBalance": {"27": [8059, 8095]}, "LeveragedTrading.getBtcupBalance": {"0": [7944, 7978]}, "LeveragedTrading.getPriceDiff": {"53": [7696, 7755], "54": [7795, 7854]}, "LeveragedTrading.getRebalanceAmount": {"43": [6339, 6416]}, "LeveragedTrading.getSign": {"44": [6118, 6126], "45": [6165, 6174]}, "LeveragedTrading.initializePool": {"9": [2782, 2844], "10": [2855, 2887], "11": [2897, 2933], "12": [2944, 2973], "13": [2983, 3014], "14": [3025, 3049]}, "LeveragedTrading.issueBtcDown": {"21": [3660, 3686], "22": [3705, 3737], "23": [3831, 3866], "24": [3876, 3932], "25": [3942, 3995], "26": [4049, 4145]}, "LeveragedTrading.issueBtcUp": {"37": [3119, 3145], "38": [3164, 3192], "39": [3284, 3317], "40": [3327, 3379], "41": [3389, 3438], "42": [3492, 3588]}, "LeveragedTrading.min": {"56": [7289, 7310]}, "LeveragedTrading.rebalanceLeveragedTokens": {"1": [5445, 5499], "2": [5517, 5575], "3": [5627, 5681], "4": [5699, 5757], "5": [5792, 5815]}, "LeveragedTrading.redeemBtcDown": {"15": [4721, 4747], "16": [4757, 4792], "17": [4803, 4835], "18": [4937, 4993], "19": [5003, 5056], "20": [5110, 5156]}, "LeveragedTrading.redeemBtcUp": {"28": [4227, 4253], "29": [4263, 4296], "30": [4307, 4335], "31": [4427, 4479], "32": [4489, 4538], "33": [4592, 4637]}}}}, "dependencies": ["smartcontractkit/chainlink@1.3.0/AggregatorV3Interface", "BTCDOWN", "BTCUP", "OpenZeppelin/openzeppelin-contracts@4.2.0/Context", "OpenZeppelin/openzeppelin-contracts@4.2.0/ERC20", "OpenZeppelin/openzeppelin-contracts@4.2.0/ERC20Burnable", "IERC20", "OpenZeppelin/openzeppelin-contracts@4.2.0/IERC20", "OpenZeppelin/openzeppelin-contracts@4.2.0/IERC20Metadata", "OpenZeppelin/openzeppelin-contracts@4.2.0/Ownable", "OpenZeppelin/openzeppelin-contracts@4.2.0/SafeMath"], "deployedBytecode": "", "deployedSourceMap": "1863:6243:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2150:30;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1980:37;;;:::i;2107:36::-;;;:::i;7878:107::-;;;:::i;6885:317::-;;;:::i;5169:653::-;;;:::i;:::-;;1605:92:0;;;:::i;6654:179:8:-;;;:::i;973:85:0:-;;;:::i;:::-;;;;;;;:::i;2711:345:8:-;;;;;;:::i;:::-;;:::i;4650:513::-;;;;;;:::i;:::-;;:::i;2210:32::-;;;:::i;3601:551::-;;;;;;:::i;:::-;;:::i;7991:111::-;;;:::i;4158:486::-;;;;;;:::i;:::-;;:::i;2045:34::-;;;:::i;1939:35::-;;;:::i;6459:157::-;;;:::i;1846:189:0:-;;;;;;:::i;:::-;;:::i;2271:31:8:-;;;:::i;3062:533::-;;;;;;:::i;:::-;;:::i;2352:37::-;;;:::i;:::-;;;;;;;:::i;2150:30::-;;;;:::o;1980:37::-;;;;:::o;2107:36::-;;;;:::o;7878:107::-;7951:5;;:27;;-1:-1:-1;;;7951:27:8;;7925:7;;-1:-1:-1;;;;;7951:5:8;;:15;;:27;;7967:10;;7951:27;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7944:34;;7878:107;:::o;6885:317::-;7004:17;;7054:27;;;-1:-1:-1;;;7054:27:8;;;;6929:7;;-1:-1:-1;;;;;7004:17:8;;6929:7;;7004:17;;7054:25;;:27;;;;;;;;;;;;;;7004:17;7054:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;7032:49:8;;-1:-1:-1;;;;;;6885:317:8;:::o;5169:653::-;5222:16;5241:13;:11;:13::i;:::-;5222:32;;5287:1;5269:15;;:19;5268:48;;;;;5314:1;5294:17;;:21;5268:48;5264:519;;;5332:23;5358:28;5377:8;5358:18;:28::i;:::-;5332:54;;5424:1;5404:17;5412:8;5404:7;:17::i;:::-;:21;5400:372;;;5463:15;;:36;;5483:15;5463:19;:36::i;:::-;5445:15;:54;5537:17;;:38;;5559:15;5537:21;:38::i;:::-;5517:17;:58;5400:372;;;5645:15;;:36;;5665:15;5645:19;:36::i;:::-;5627:15;:54;5719:17;;:38;;5741:15;5719:21;:38::i;:::-;5699:17;:58;5400:372;5264:519;;5792:12;:23;5169:653::o;1605:92:0:-;1196:12;:10;:12::i;:::-;-1:-1:-1;;;;;1185:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1185:23:0;;1177:68;;;;-1:-1:-1;;;1177:68:0;;;;;;;:::i;:::-;;;;;;;;;1669:21:::1;1687:1;1669:9;:21::i;:::-;1605:92::o:0;6654:179:8:-;6702:7;6740:13;;6757:1;6740:18;:86;;6777:49;6812:13;;6777:30;6799:7;6777:17;;:21;;:30;;;;:::i;:::-;:34;;:49::i;:::-;6740:86;;;-1:-1:-1;6762:12:8;;;6654:179::o;973:85:0:-;1019:7;1045:6;-1:-1:-1;;;;;1045:6:0;973:85;:::o;2711:345:8:-;1196:12:0;:10;:12::i;:::-;-1:-1:-1;;;;;1185:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1185:23:0;;1177:68;;;;-1:-1:-1;;;1177:68:0;;;;;;;:::i;:::-;2791:17:8::1;::::0;::::1;;2790:18;2782:62;;;;-1:-1:-1::0;;;2782:62:8::1;;;;;;;:::i;:::-;2881:4;2863:24;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;2855:5:8::1;:32:::0;;-1:-1:-1;;;;;;2855:32:8::1;-1:-1:-1::0;;;;;2855:32:8;;;::::1;::::0;;;::::1;::::0;;2907:26:::1;::::0;2927:4:::1;::::0;2907:26:::1;::::0;::::1;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;2897:7:8::1;:36:::0;;-1:-1:-1;;;;;;2897:36:8::1;-1:-1:-1::0;;;;;2897:36:8;;;::::1;::::0;;;::::1;::::0;;2944:29:::1;2955:17;:10:::0;2970:1:::1;2955:14;:17::i;2944:29::-;2983:31;2996:17;:10:::0;3011:1:::1;2996:14;:17::i;2983:31::-;-1:-1:-1::0;3025:17:8::1;:24:::0;;-1:-1:-1;;3025:24:8::1;3045:4;3025:24;::::0;;2711:345::o;4650:513::-;4721:26;:24;:26::i;:::-;4757:7;;:35;;-1:-1:-1;;;4757:35:8;;-1:-1:-1;;;;;4757:7:8;;;;:12;;:35;;4770:21;;4757:35;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4818:17;:15;:17::i;:::-;4803:12;:32;;;4845:18;;4866:52;;4910:7;;4866:39;;:21;;:25;:39::i;:52::-;4953:13;;4845:73;;-1:-1:-1;4953:40:8;;4971:21;4953:17;:40::i;:::-;4937:13;:56;5023:17;;:33;;5045:10;5023:21;:33::i;:::-;5003:17;:53;;;5088:11;;5117:38;;-1:-1:-1;;;5117:38:8;;5088:11;;;;-1:-1:-1;;;;;5088:11:8;;;;5117:13;;:38;;5131:10;;5144;;5117:38;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5110:46;;-1:-1:-1;;;5110:46:8;;;;;;;;;4650:513;;;:::o;2210:32::-;;;;:::o;3601:551::-;3660:26;:24;:26::i;:::-;3720:17;:15;:17::i;:::-;3705:12;:32;;;3747:29;;3779:41;;:23;:10;3794:7;3779:14;:23::i;:41::-;3831:7;;:35;;-1:-1:-1;;;3831:35:8;;3747:73;;-1:-1:-1;;;;;;3831:7:8;;:12;;:35;;3747:73;;3831:35;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3892:13:8;;:40;;-1:-1:-1;3892:13:8;-1:-1:-1;3910:21:8;3892:17;:40::i;:::-;3876:13;:56;3962:17;;:33;;3984:10;3962:21;:33::i;:::-;3942:17;:53;;;4027:11;;4057:56;;-1:-1:-1;;;4057:56:8;;4027:11;;;;-1:-1:-1;;;;;4027:11:8;;;;4057:17;;:56;;4075:10;;4095:4;;4102:10;;4057:56;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4049:96;;;;-1:-1:-1;;;4049:96:8;;;;;;;:::i;7991:111::-;8066:7;;:29;;-1:-1:-1;;;8066:29:8;;8040:7;;-1:-1:-1;;;;;8066:7:8;;:17;;:29;;8084:10;;8066:29;;;:::i;4158:486::-;4227:26;:24;:26::i;:::-;4263:5;;:33;;-1:-1:-1;;;4263:33:8;;-1:-1:-1;;;;;4263:5:8;;;;:10;;:33;;4274:21;;4263:33;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4320:15;:13;:15::i;:::-;4307:10;:28;;;4345:18;;4366:50;;4408:7;;4366:37;;:21;;:25;:37::i;:50::-;4441:11;;4345:71;;-1:-1:-1;4441:38:8;;4457:21;4441:15;:38::i;:::-;4427:11;:52;4507:15;;:31;;4527:10;4507:19;:31::i;:::-;4489:15;:49;4570:11;;4599:37;;-1:-1:-1;;;4599:37:8;;4570:11;;;;-1:-1:-1;;;;;4570:11:8;;;;4599:13;;:37;;4613:10;;4625;;4599:37;;;:::i;2045:34::-;;;;:::o;1939:35::-;;;;:::o;6459:157::-;6505:7;6531:11;;6546:1;6531:16;:78;;6564:45;6597:11;;6564:28;6584:7;6564:15;;:19;;:28;;;;:::i;6531:78::-;-1:-1:-1;6551:10:8;;;6459:157::o;1846:189:0:-;1196:12;:10;:12::i;:::-;-1:-1:-1;;;;;1185:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1185:23:0;;1177:68;;;;-1:-1:-1;;;1177:68:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;1934:22:0;::::1;1926:73;;;;-1:-1:-1::0;;;1926:73:0::1;;;;;;;:::i;:::-;2009:19;2019:8;2009:9;:19::i;:::-;1846:189:::0;:::o;2271:31:8:-;;;;:::o;3062:533::-;3119:26;:24;:26::i;:::-;3177:15;:13;:15::i;:::-;3164:10;:28;;;3202:29;;3234:39;;:23;:10;3249:7;3234:14;:23::i;:39::-;3284:5;;:33;;-1:-1:-1;;;3284:33:8;;3202:71;;-1:-1:-1;;;;;;3284:5:8;;:10;;:33;;3202:71;;3284:33;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3341:11:8;;:38;;-1:-1:-1;3341:11:8;-1:-1:-1;3357:21:8;3341:15;:38::i;:::-;3327:11;:52;3407:15;;:31;;3427:10;3407:19;:31::i;:::-;3389:15;:49;3470:11;;3500:56;;-1:-1:-1;;;3500:56:8;;3470:11;;;;-1:-1:-1;;;;;3470:11:8;;;;3500:17;;:56;;3518:10;;3538:4;;3545:10;;3500:56;;;:::i;2352:37::-;;;;;;:::o;6198:225::-;6267:7;6286:17;6306:22;6319:8;6306:12;:22::i;:::-;6286:42;;6346:70;6408:7;6346:57;6390:12;6392:9;6390:1;:12::i;:::-;6346:39;6350:15;;6367:17;;6346:3;:39::i;:::-;:43;;:57::i;:70::-;6339:77;;;6198:225;;;;:::o;5999:192::-;6057:6;6090:12;;6079:8;:23;6075:110;;;-1:-1:-1;6125:1:8;6118:8;;6075:110;-1:-1:-1;;;6165:9:8;;2672:96:6;2730:7;2756:5;2760:1;2756;:5;:::i;:::-;2749:12;2672:96;-1:-1:-1;;;2672:96:6:o;3039:::-;3097:7;3123:5;3127:1;3123;:5;:::i;586:96:5:-;665:10;586:96;:::o;2041:169:0:-;2096:16;2115:6;;-1:-1:-1;;;;;2131:17:0;;;-1:-1:-1;;;;;;2131:17:0;;;;;;2163:40;;2115:6;;;;;;;2163:40;;2096:16;2163:40;2041:169;;:::o;3382:96:6:-;3440:7;3466:5;3470:1;3466;:5;:::i;3767:96::-;3825:7;3851:5;3855:1;3851;:5;:::i;7554:318:8:-;7617:7;7668:12;;7657:8;:23;7653:212;;;7703:52;7747:7;7703:39;7729:12;;7703:21;7716:7;7703:8;:12;;:21;;;;:::i;:39::-;:43;;:52::i;:::-;7696:59;;;;7653:212;7802:52;7846:7;7802:39;7832:8;7802:25;7819:7;7802:12;;:16;;:25;;;;:::i;7323:225::-;7368:7;;7455:5;7459:1;7455;:5;:::i;:::-;7443:7;7434:6;7439:1;7434;:6;:::i;:::-;:16;;;;:::i;:::-;7429:22;;:1;:22;:::i;:::-;:31;;;;:::i;:::-;:41;;7463:7;7429:41;:::i;:::-;7413:57;-1:-1:-1;7494:8:8;7530:11;7413:57;7494:8;7530:11;:::i;:::-;7520:21;;:7;:21;:::i;:::-;7513:28;7323:225;-1:-1:-1;;;;7323:225:8:o;7212:105::-;7270:7;7301:1;7296;:6;;:14;;7309:1;7296:14;;;-1:-1:-1;7305:1:8;;7212:105;-1:-1:-1;7212:105:8:o;-1:-1:-1:-;;;;;;;;:::o;:::-;;;;;;;;:::o;14:181:9:-;94:13;;147:22;136:34;;126:45;;116:2;;185:1;182;175:12;200:306;;312:2;300:9;291:7;287:23;283:32;280:2;;;333:6;325;318:22;280:2;364:23;;-1:-1:-1;;;;;416:31:9;;406:42;;396:2;;467:6;459;452:22;511:297;;631:2;619:9;610:7;606:23;602:32;599:2;;;652:6;644;637:22;599:2;689:9;683:16;742:5;735:13;728:21;721:5;718:32;708:2;;769:6;761;754:22;813:190;;925:2;913:9;904:7;900:23;896:32;893:2;;;946:6;938;931:22;893:2;-1:-1:-1;974:23:9;;883:120;-1:-1:-1;883:120:9:o;1008:194::-;;1131:2;1119:9;1110:7;1106:23;1102:32;1099:2;;;1152:6;1144;1137:22;1099:2;-1:-1:-1;1180:16:9;;1089:113;-1:-1:-1;1089:113:9:o;1207:487::-;;;;;;1395:3;1383:9;1374:7;1370:23;1366:33;1363:2;;;1417:6;1409;1402:22;1363:2;1445:41;1476:9;1445:41;:::i;:::-;1435:51;;1526:2;1515:9;1511:18;1505:25;1495:35;;1570:2;1559:9;1555:18;1549:25;1539:35;;1614:2;1603:9;1599:18;1593:25;1583:35;;1637:51;1683:3;1672:9;1668:19;1637:51;:::i;:::-;1627:61;;1353:341;;;;;;;;:::o;1699:203::-;-1:-1:-1;;;;;1863:32:9;;;;1845:51;;1833:2;1818:18;;1800:102::o;1907:375::-;-1:-1:-1;;;;;2165:15:9;;;2147:34;;2217:15;;;;2212:2;2197:18;;2190:43;2264:2;2249:18;;2242:34;;;;2097:2;2082:18;;2064:218::o;2287:274::-;-1:-1:-1;;;;;2479:32:9;;;;2461:51;;2543:2;2528:18;;2521:34;2449:2;2434:18;;2416:145::o;2566:187::-;2731:14;;2724:22;2706:41;;2694:2;2679:18;;2661:92::o;2758:402::-;2960:2;2942:21;;;2999:2;2979:18;;;2972:30;3038:34;3033:2;3018:18;;3011:62;-1:-1:-1;;;3104:2:9;3089:18;;3082:36;3150:3;3135:19;;2932:228::o;3165:355::-;3367:2;3349:21;;;3406:2;3386:18;;;3379:30;3445:33;3440:2;3425:18;;3418:61;3511:2;3496:18;;3339:181::o;3525:356::-;3727:2;3709:21;;;3746:18;;;3739:30;3805:34;3800:2;3785:18;;3778:62;3872:2;3857:18;;3699:182::o;3886:351::-;4088:2;4070:21;;;4127:2;4107:18;;;4100:30;4166:29;4161:2;4146:18;;4139:57;4228:2;4213:18;;4060:177::o;4242:::-;4388:25;;;4376:2;4361:18;;4343:76::o;4424:128::-;;4495:1;4491:6;4488:1;4485:13;4482:2;;;4501:18;;:::i;:::-;-1:-1:-1;4537:9:9;;4472:80::o;4557:217::-;;4623:1;4613:2;;-1:-1:-1;;;4648:31:9;;4702:4;4699:1;4692:15;4730:4;4655:1;4720:15;4613:2;-1:-1:-1;4759:9:9;;4603:171::o;4779:453::-;4875:6;4898:5;4912:314;4961:1;4998:2;4988:8;4985:16;4975:2;;5005:5;;;4975:2;5046:4;5041:3;5037:14;5031:4;5028:24;5025:2;;;5055:18;;:::i;:::-;5105:2;5095:8;5091:17;5088:2;;;5120:16;;;;5088:2;5199:17;;;;;5159:15;;4912:314;;;4856:376;;;;;;;:::o;5237:148::-;;5324:55;-1:-1:-1;;5365:4:9;5351:19;;5345:4;5390:922;5474:8;5464:2;;-1:-1:-1;5515:1:9;5529:5;;5464:2;5563:4;5553:2;;-1:-1:-1;5600:1:9;5614:5;;5553:2;5645:4;5663:1;5658:59;;;;5731:1;5726:183;;;;5638:271;;5658:59;5688:1;5679:10;;5702:5;;;5726:183;5763:3;5753:8;5750:17;5747:2;;;5770:18;;:::i;:::-;5826:1;5816:8;5812:16;5803:25;;5854:3;5847:5;5844:14;5841:2;;;5861:18;;:::i;:::-;5894:5;;;5638:271;;5993:2;5983:8;5980:16;5974:3;5968:4;5965:13;5961:36;5955:2;5945:8;5942:16;5937:2;5931:4;5928:12;5924:35;5921:77;5918:2;;;-1:-1:-1;6030:19:9;;;6065:14;;;6062:2;;;6082:18;;:::i;:::-;6115:5;;5918:2;6162:42;6200:3;6190:8;6184:4;6181:1;6162:42;:::i;:::-;6237:6;6232:3;6228:16;6219:7;6216:29;6213:2;;;6248:18;;:::i;:::-;6286:20;;5454:858;-1:-1:-1;;;;5454:858:9:o;6317:168::-;;6423:1;6419;6415:6;6411:14;6408:1;6405:21;6400:1;6393:9;6386:17;6382:45;6379:2;;;6430:18;;:::i;:::-;-1:-1:-1;6470:9:9;;6369:116::o;6490:125::-;;6558:1;6555;6552:8;6549:2;;;6563:18;;:::i;:::-;-1:-1:-1;6600:9:9;;6539:76::o;6620:127::-;6681:10;6676:3;6672:20;6669:1;6662:31;6712:4;6709:1;6702:15;6736:4;6733:1;6726:15", "language": "Solidity", "natspec": {"kind": "dev", "methods": {"owner()": {"details": "Returns the address of the current owner."}, "renounceOwnership()": {"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."}, "transferOwnership(address)": {"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}}, "version": 1}, "offset": [1863, 8106], "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH3 0x15F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xB75CBE0B GT PUSH3 0xC9 JUMPI DUP1 PUSH4 0xF0156E8A GT PUSH3 0x87 JUMPI DUP1 PUSH4 0xF0156E8A EQ PUSH3 0x261 JUMPI DUP1 PUSH4 0xF06847D6 EQ PUSH3 0x26B JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH3 0x275 JUMPI DUP1 PUSH4 0xF4352C57 EQ PUSH3 0x28C JUMPI DUP1 PUSH4 0xF530C04A EQ PUSH3 0x296 JUMPI DUP1 PUSH4 0xFEAE67B0 EQ PUSH3 0x2AD JUMPI PUSH3 0x15F JUMP JUMPDEST DUP1 PUSH4 0xB75CBE0B EQ PUSH3 0x215 JUMPI DUP1 PUSH4 0xC46D4F09 EQ PUSH3 0x21F JUMPI DUP1 PUSH4 0xC7E3B124 EQ PUSH3 0x236 JUMPI DUP1 PUSH4 0xD1EE539D EQ PUSH3 0x240 JUMPI DUP1 PUSH4 0xDDE7BE2C EQ PUSH3 0x257 JUMPI PUSH3 0x15F JUMP JUMPDEST DUP1 PUSH4 0x6E5D6615 GT PUSH3 0x123 JUMPI DUP1 PUSH4 0x6E5D6615 EQ PUSH3 0x1AE JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH3 0x1BA JUMPI DUP1 PUSH4 0x81C2B29B EQ PUSH3 0x1C4 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH3 0x1CE JUMPI DUP1 PUSH4 0x98881BC9 EQ PUSH3 0x1E7 JUMPI DUP1 PUSH4 0xA14274E8 EQ PUSH3 0x1FE JUMPI PUSH3 0x15F JUMP JUMPDEST DUP1 PUSH3 0x34B9CC EQ PUSH3 0x164 JUMPI DUP1 PUSH4 0xC3E5343 EQ PUSH3 0x186 JUMPI DUP1 PUSH4 0x14D7C6D2 EQ PUSH3 0x190 JUMPI DUP1 PUSH4 0x157D0129 EQ PUSH3 0x19A JUMPI DUP1 PUSH4 0x3A3610BC EQ PUSH3 0x1A4 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x16E PUSH3 0x2C6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x17D SWAP2 SWAP1 PUSH3 0x10B5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH3 0x16E PUSH3 0x2CC JUMP JUMPDEST PUSH3 0x16E PUSH3 0x2D2 JUMP JUMPDEST PUSH3 0x16E PUSH3 0x2D8 JUMP JUMPDEST PUSH3 0x16E PUSH3 0x364 JUMP JUMPDEST PUSH3 0x1B8 PUSH3 0x3F5 JUMP JUMPDEST STOP JUMPDEST PUSH3 0x1B8 PUSH3 0x497 JUMP JUMPDEST PUSH3 0x16E PUSH3 0x4F4 JUMP JUMPDEST PUSH3 0x1D8 PUSH3 0x536 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x17D SWAP2 SWAP1 PUSH3 0xF70 JUMP JUMPDEST PUSH3 0x1B8 PUSH3 0x1F8 CALLDATASIZE PUSH1 0x4 PUSH3 0xEEA JUMP JUMPDEST PUSH3 0x545 JUMP JUMPDEST PUSH3 0x1B8 PUSH3 0x20F CALLDATASIZE PUSH1 0x4 PUSH3 0xEEA JUMP JUMPDEST PUSH3 0x696 JUMP JUMPDEST PUSH3 0x16E PUSH3 0x806 JUMP JUMPDEST PUSH3 0x1B8 PUSH3 0x230 CALLDATASIZE PUSH1 0x4 PUSH3 0xEEA JUMP JUMPDEST PUSH3 0x80C JUMP JUMPDEST PUSH3 0x16E PUSH3 0x979 JUMP JUMPDEST PUSH3 0x1B8 PUSH3 0x251 CALLDATASIZE PUSH1 0x4 PUSH3 0xEEA JUMP JUMPDEST PUSH3 0x9AC JUMP JUMPDEST PUSH3 0x16E PUSH3 0xAA6 JUMP JUMPDEST PUSH3 0x16E PUSH3 0xAAC JUMP JUMPDEST PUSH3 0x16E PUSH3 0xAB2 JUMP JUMPDEST PUSH3 0x1B8 PUSH3 0x286 CALLDATASIZE PUSH1 0x4 PUSH3 0xE9F JUMP JUMPDEST PUSH3 0xAE7 JUMP JUMPDEST PUSH3 0x16E PUSH3 0xB64 JUMP JUMPDEST PUSH3 0x1B8 PUSH3 0x2A7 CALLDATASIZE PUSH1 0x4 PUSH3 0xEEA JUMP JUMPDEST PUSH3 0xB6A JUMP JUMPDEST PUSH3 0x2B7 PUSH3 0xC62 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x17D SWAP2 SWAP1 PUSH3 0xFC1 JUMP JUMPDEST PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH3 0x30B SWAP1 CALLER SWAP1 PUSH1 0x4 ADD PUSH3 0xF70 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x324 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x339 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x35F SWAP2 SWAP1 PUSH3 0xF03 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x3FABE5A3 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP4 SWAP2 DUP4 SWAP2 PUSH4 0xFEAF968C SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0xA0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x3AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x3C3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x3E9 SWAP2 SWAP1 PUSH3 0xF1C JUMP JUMPDEST POP SWAP2 SWAP6 POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x401 PUSH3 0x364 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x3 SLOAD GT DUP1 ISZERO PUSH3 0x418 JUMPI POP PUSH1 0x0 PUSH1 0x4 SLOAD GT JUMPDEST ISZERO PUSH3 0x492 JUMPI PUSH1 0x0 PUSH3 0x42B DUP3 PUSH3 0xC6B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH3 0x43A DUP4 PUSH3 0xCB2 JUMP JUMPDEST SGT ISZERO PUSH3 0x46B JUMPI PUSH1 0x3 SLOAD PUSH3 0x450 SWAP1 DUP3 PUSH3 0xCD2 JUMP JUMPDEST PUSH1 0x3 SSTORE PUSH1 0x4 SLOAD PUSH3 0x462 SWAP1 DUP3 PUSH3 0xCE7 JUMP JUMPDEST PUSH1 0x4 SSTORE PUSH3 0x490 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH3 0x47A SWAP1 DUP3 PUSH3 0xCE7 JUMP JUMPDEST PUSH1 0x3 SSTORE PUSH1 0x4 SLOAD PUSH3 0x48C SWAP1 DUP3 PUSH3 0xCD2 JUMP JUMPDEST PUSH1 0x4 SSTORE JUMPDEST POP JUMPDEST PUSH1 0x7 SSTORE JUMP JUMPDEST PUSH3 0x4A1 PUSH3 0xCF5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x4B4 PUSH3 0x536 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH3 0x4E6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x4DD SWAP1 PUSH3 0x1049 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x4F2 PUSH1 0x0 PUSH3 0xCF9 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 SLOAD PUSH1 0x0 EQ PUSH3 0x52F JUMPI PUSH3 0x529 PUSH1 0x6 SLOAD PUSH3 0x522 PUSH3 0xF4240 PUSH1 0x4 SLOAD PUSH3 0xD49 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH3 0xD57 JUMP JUMPDEST PUSH3 0x35F JUMP JUMPDEST POP PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH3 0x54F PUSH3 0xCF5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x562 PUSH3 0x536 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH3 0x58B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x4DD SWAP1 PUSH3 0x1049 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0xFF AND ISZERO PUSH3 0x5B1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x4DD SWAP1 PUSH3 0x1012 JUMP JUMPDEST ADDRESS PUSH1 0x40 MLOAD PUSH3 0x5C0 SWAP1 PUSH3 0xE68 JUMP JUMPDEST PUSH3 0x5CC SWAP2 SWAP1 PUSH3 0xF70 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0x5E9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0xA DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x40 MLOAD ADDRESS SWAP1 PUSH3 0x61A SWAP1 PUSH3 0xE76 JUMP JUMPDEST PUSH3 0x626 SWAP2 SWAP1 PUSH3 0xF70 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0x643 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0xB DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH3 0x675 PUSH3 0x2A7 DUP3 PUSH1 0x2 PUSH3 0xD57 JUMP JUMPDEST PUSH3 0x686 PUSH3 0x230 DUP3 PUSH1 0x2 PUSH3 0xD57 JUMP JUMPDEST POP PUSH1 0x8 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH3 0x6A0 PUSH3 0x3F5 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x40 MLOAD PUSH4 0x852CD8D PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x42966C68 SWAP1 PUSH3 0x6D2 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH3 0x10B5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x6ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x702 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH3 0x710 PUSH3 0x4F4 JUMP JUMPDEST PUSH1 0x2 DUP2 SWAP1 SSTORE PUSH1 0x0 SWAP1 PUSH3 0x72F SWAP1 PUSH3 0xF4240 SWAP1 PUSH3 0x522 SWAP1 DUP6 SWAP1 PUSH3 0xD49 JUMP JUMPDEST PUSH1 0x6 SLOAD SWAP1 SWAP2 POP PUSH3 0x741 SWAP1 DUP4 PUSH3 0xCE7 JUMP JUMPDEST PUSH1 0x6 SSTORE PUSH1 0x4 SLOAD PUSH3 0x753 SWAP1 DUP3 PUSH3 0xCE7 JUMP JUMPDEST PUSH1 0x4 SWAP1 DUP2 SSTORE PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP3 SWAP2 PUSH4 0xA9059CBB SWAP2 PUSH3 0x790 SWAP2 CALLER SWAP2 DUP8 SWAP2 ADD PUSH3 0xFA8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x7AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x7C0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x7E6 SWAP2 SWAP1 PUSH3 0xEC8 JUMP JUMPDEST PUSH3 0x801 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH3 0x816 PUSH3 0x3F5 JUMP JUMPDEST PUSH3 0x820 PUSH3 0x4F4 JUMP JUMPDEST PUSH1 0x2 DUP2 SWAP1 SSTORE PUSH1 0x0 SWAP1 PUSH3 0x83C SWAP1 PUSH3 0x522 DUP5 PUSH3 0xF4240 PUSH3 0xD49 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x40 MLOAD PUSH4 0x140E25AD PUSH1 0xE3 SHL DUP2 MSTORE SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xA0712D68 SWAP1 PUSH3 0x86F SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH3 0x10B5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x88A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x89F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x6 SLOAD PUSH3 0x8B3 SWAP3 POP SWAP1 POP DUP3 PUSH3 0xCD2 JUMP JUMPDEST PUSH1 0x6 SSTORE PUSH1 0x4 SLOAD PUSH3 0x8C5 SWAP1 DUP4 PUSH3 0xCD2 JUMP JUMPDEST PUSH1 0x4 SWAP1 DUP2 SSTORE PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP3 SWAP2 PUSH4 0x23B872DD SWAP2 PUSH3 0x904 SWAP2 CALLER SWAP2 ADDRESS SWAP2 DUP10 SWAP2 ADD PUSH3 0xF84 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x91F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x934 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x95A SWAP2 SWAP1 PUSH3 0xEC8 JUMP JUMPDEST PUSH3 0x801 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x4DD SWAP1 PUSH3 0x107E JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH3 0x30B SWAP1 CALLER SWAP1 PUSH1 0x4 ADD PUSH3 0xF70 JUMP JUMPDEST PUSH3 0x9B6 PUSH3 0x3F5 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x40 MLOAD PUSH4 0x852CD8D PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x42966C68 SWAP1 PUSH3 0x9E8 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH3 0x10B5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xA03 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0xA18 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH3 0xA26 PUSH3 0xAB2 JUMP JUMPDEST PUSH1 0x1 DUP2 SWAP1 SSTORE PUSH1 0x0 SWAP1 PUSH3 0xA45 SWAP1 PUSH3 0xF4240 SWAP1 PUSH3 0x522 SWAP1 DUP6 SWAP1 PUSH3 0xD49 JUMP JUMPDEST PUSH1 0x5 SLOAD SWAP1 SWAP2 POP PUSH3 0xA57 SWAP1 DUP4 PUSH3 0xCE7 JUMP JUMPDEST PUSH1 0x5 SSTORE PUSH1 0x3 SLOAD PUSH3 0xA69 SWAP1 DUP3 PUSH3 0xCE7 JUMP JUMPDEST PUSH1 0x3 SSTORE PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH3 0x790 SWAP1 CALLER SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH3 0xFA8 JUMP JUMPDEST PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 SLOAD PUSH1 0x0 EQ PUSH3 0xAE0 JUMPI PUSH3 0x529 PUSH1 0x5 SLOAD PUSH3 0x522 PUSH3 0xF4240 PUSH1 0x3 SLOAD PUSH3 0xD49 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP PUSH1 0x1 SLOAD SWAP1 JUMP JUMPDEST PUSH3 0xAF1 PUSH3 0xCF5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0xB04 PUSH3 0x536 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH3 0xB2D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x4DD SWAP1 PUSH3 0x1049 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0xB56 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x4DD SWAP1 PUSH3 0xFCC JUMP JUMPDEST PUSH3 0xB61 DUP2 PUSH3 0xCF9 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH3 0xB74 PUSH3 0x3F5 JUMP JUMPDEST PUSH3 0xB7E PUSH3 0xAB2 JUMP JUMPDEST PUSH1 0x1 DUP2 SWAP1 SSTORE PUSH1 0x0 SWAP1 PUSH3 0xB9A SWAP1 PUSH3 0x522 DUP5 PUSH3 0xF4240 PUSH3 0xD49 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x40 MLOAD PUSH4 0x140E25AD PUSH1 0xE3 SHL DUP2 MSTORE SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xA0712D68 SWAP1 PUSH3 0xBCD SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH3 0x10B5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xBE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0xBFD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x5 SLOAD PUSH3 0xC11 SWAP3 POP SWAP1 POP DUP3 PUSH3 0xCD2 JUMP JUMPDEST PUSH1 0x5 SSTORE PUSH1 0x3 SLOAD PUSH3 0xC23 SWAP1 DUP4 PUSH3 0xCD2 JUMP JUMPDEST PUSH1 0x3 SSTORE PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 SWAP1 PUSH4 0x23B872DD SWAP1 PUSH3 0x904 SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH3 0xF84 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xC79 DUP4 PUSH3 0xD65 JUMP JUMPDEST SWAP1 POP PUSH3 0xCA9 PUSH3 0xF4240 PUSH3 0x522 PUSH3 0xC92 DUP5 PUSH3 0xDCF JUMP JUMPDEST PUSH3 0xCA2 PUSH1 0x3 SLOAD PUSH1 0x4 SLOAD PUSH3 0xE4F JUMP JUMPDEST SWAP1 PUSH3 0xD49 JUMP JUMPDEST SWAP2 POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 SLOAD DUP3 GT ISZERO PUSH3 0xCC8 JUMPI POP PUSH1 0x1 PUSH3 0xCAD JUMP JUMPDEST POP PUSH1 0x0 NOT PUSH3 0xCAD JUMP JUMPDEST PUSH1 0x0 PUSH3 0xCE0 DUP3 DUP5 PUSH3 0x10BE JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xCE0 DUP3 DUP5 PUSH3 0x1254 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xCE0 DUP3 DUP5 PUSH3 0x1232 JUMP JUMPDEST PUSH1 0x0 PUSH3 0xCE0 DUP3 DUP5 PUSH3 0x10D9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 SLOAD DUP3 GT ISZERO PUSH3 0xDA8 JUMPI PUSH3 0xDA0 PUSH3 0xF4240 PUSH3 0xD99 PUSH1 0x7 SLOAD PUSH3 0x522 PUSH3 0xF4240 DUP8 PUSH3 0xD49 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH3 0xCE7 JUMP JUMPDEST SWAP1 POP PUSH3 0xCAD JUMP JUMPDEST PUSH3 0xDA0 PUSH3 0xF4240 PUSH3 0xD99 DUP5 PUSH3 0x522 PUSH3 0xF4240 PUSH1 0x7 SLOAD PUSH3 0xD49 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xDDF DUP4 PUSH1 0x3 PUSH3 0x1232 JUMP JUMPDEST PUSH3 0xF4240 PUSH3 0xDF0 PUSH1 0x2 DUP7 PUSH3 0x1147 JUMP JUMPDEST PUSH3 0xDFC SWAP2 SWAP1 PUSH3 0x10D9 JUMP JUMPDEST PUSH3 0xE09 SWAP1 PUSH1 0x9 PUSH3 0x1232 JUMP JUMPDEST PUSH3 0xE15 SWAP2 SWAP1 PUSH3 0x10BE JUMP JUMPDEST PUSH3 0xE24 SWAP1 PUSH3 0xF4240 PUSH3 0x10BE JUMP JUMPDEST SWAP1 POP PUSH5 0xE8D4A51000 PUSH3 0xE38 DUP3 DUP3 PUSH3 0x10D9 JUMP JUMPDEST PUSH3 0xE47 SWAP1 PUSH3 0xF4240 PUSH3 0x1254 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 GT ISZERO PUSH3 0xE61 JUMPI DUP2 PUSH3 0xCE0 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xFA6 DUP1 PUSH3 0x1285 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH2 0xFAA DUP1 PUSH3 0x222B DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH10 0xFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH3 0xCAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0xEB1 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0xCE0 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0xEDA JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH3 0xCE0 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0xEFC JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0xF15 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH3 0xF34 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH3 0xF3F DUP7 PUSH3 0xE84 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD MLOAD SWAP4 POP PUSH1 0x40 DUP7 ADD MLOAD SWAP3 POP PUSH1 0x60 DUP7 ADD MLOAD SWAP2 POP PUSH3 0xF64 PUSH1 0x80 DUP8 ADD PUSH3 0xE84 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1F SWAP1 DUP3 ADD MSTORE PUSH32 0x54686520706F6F6C2077617320616C726561647920696E697469617465642E00 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x596F7520646F6E2774206861766520656E6F75676820555344432E0000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH3 0x10D4 JUMPI PUSH3 0x10D4 PUSH3 0x126E JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH3 0x10F5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP1 DUP3 JUMPDEST PUSH1 0x1 DUP1 DUP7 GT PUSH3 0x110E JUMPI POP PUSH3 0x113E JUMP JUMPDEST DUP2 DUP8 DIV DUP3 GT ISZERO PUSH3 0x1123 JUMPI PUSH3 0x1123 PUSH3 0x126E JUMP JUMPDEST DUP1 DUP7 AND ISZERO PUSH3 0x1131 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP5 SWAP1 SWAP5 SHR SWAP4 DUP1 MUL PUSH3 0x10FD JUMP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xCE0 PUSH1 0x0 NOT PUSH1 0xFF DUP6 AND DUP5 PUSH1 0x0 DUP3 PUSH3 0x1166 JUMPI POP PUSH1 0x1 PUSH3 0xCE0 JUMP JUMPDEST DUP2 PUSH3 0x1175 JUMPI POP PUSH1 0x0 PUSH3 0xCE0 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH3 0x118E JUMPI PUSH1 0x2 DUP2 EQ PUSH3 0x1199 JUMPI PUSH3 0x11CD JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH3 0xCE0 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH3 0x11AD JUMPI PUSH3 0x11AD PUSH3 0x126E JUMP JUMPDEST PUSH1 0x1 DUP5 SHL SWAP2 POP DUP5 DUP3 GT ISZERO PUSH3 0x11C6 JUMPI PUSH3 0x11C6 PUSH3 0x126E JUMP JUMPDEST POP PUSH3 0xCE0 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH3 0x1205 JUMPI POP DUP2 DUP2 EXP DUP4 DUP2 GT ISZERO PUSH3 0x11FF JUMPI PUSH3 0x11FF PUSH3 0x126E JUMP JUMPDEST PUSH3 0xCE0 JUMP JUMPDEST PUSH3 0x1214 DUP5 DUP5 DUP5 PUSH1 0x1 PUSH3 0x10FA JUMP JUMPDEST DUP1 DUP7 DIV DUP3 GT ISZERO PUSH3 0x1229 JUMPI PUSH3 0x1229 PUSH3 0x126E JUMP JUMPDEST MUL SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH3 0x124F JUMPI PUSH3 0x124F PUSH3 0x126E JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH3 0x1269 JUMPI PUSH3 0x1269 PUSH3 0x126E JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xFA6 CODESIZE SUB DUP1 PUSH3 0xFA6 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x169 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0xA DUP2 MSTORE PUSH10 0x426974636F696E20557 PUSH1 0xB4 SHL PUSH1 0x20 DUP1 DUP4 ADD SWAP2 DUP3 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE PUSH1 0x5 DUP5 MSTORE PUSH5 0x425443555 PUSH1 0xDC SHL SWAP1 DUP5 ADD MSTORE DUP2 MLOAD SWAP2 SWAP3 SWAP2 PUSH3 0x83 SWAP2 PUSH1 0x3 SWAP2 PUSH3 0xC3 JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x99 SWAP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0xC3 JUMP JUMPDEST POP POP PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE POP PUSH3 0x1D6 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0xD1 SWAP1 PUSH3 0x199 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0xF5 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x140 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x110 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x140 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x140 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x140 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x123 JUMP JUMPDEST POP PUSH3 0x14E SWAP3 SWAP2 POP PUSH3 0x152 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x14E JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x153 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x17B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x192 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x2 DUP2 DIV PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x1AE JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x1D0 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xDC0 DUP1 PUSH3 0x1E6 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xEA JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA0712D68 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA0712D68 EQ PUSH2 0x1C0 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x1D3 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1F9 JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x192 JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x1A5 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1B8 JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x142 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x155 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x16A JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x17D JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x10D JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x12D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF7 PUSH2 0x20C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0x9C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x120 PUSH2 0x11B CALLDATASIZE PUSH1 0x4 PUSH2 0x975 JUMP JUMPDEST PUSH2 0x29E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0x9B6 JUMP JUMPDEST PUSH2 0x135 PUSH2 0x2BB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0xCF3 JUMP JUMPDEST PUSH2 0x120 PUSH2 0x150 CALLDATASIZE PUSH1 0x4 PUSH2 0x93A JUMP JUMPDEST PUSH2 0x2C1 JUMP JUMPDEST PUSH2 0x15D PUSH2 0x35A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0xCFC JUMP JUMPDEST PUSH2 0x120 PUSH2 0x178 CALLDATASIZE PUSH1 0x4 PUSH2 0x975 JUMP JUMPDEST PUSH2 0x35F JUMP JUMPDEST PUSH2 0x190 PUSH2 0x18B CALLDATASIZE PUSH1 0x4 PUSH2 0x99E JUMP JUMPDEST PUSH2 0x3B3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x135 PUSH2 0x1A0 CALLDATASIZE PUSH1 0x4 PUSH2 0x8E7 JUMP JUMPDEST PUSH2 0x3D7 JUMP JUMPDEST PUSH2 0x190 PUSH2 0x1B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x975 JUMP JUMPDEST PUSH2 0x3F6 JUMP JUMPDEST PUSH2 0xF7 PUSH2 0x449 JUMP JUMPDEST PUSH2 0x190 PUSH2 0x1CE CALLDATASIZE PUSH1 0x4 PUSH2 0x99E JUMP JUMPDEST PUSH2 0x458 JUMP JUMPDEST PUSH2 0x120 PUSH2 0x1E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x975 JUMP JUMPDEST PUSH2 0x479 JUMP JUMPDEST PUSH2 0x120 PUSH2 0x1F4 CALLDATASIZE PUSH1 0x4 PUSH2 0x975 JUMP JUMPDEST PUSH2 0x4F2 JUMP JUMPDEST PUSH2 0x135 PUSH2 0x207 CALLDATASIZE PUSH1 0x4 PUSH2 0x908 JUMP JUMPDEST PUSH2 0x506 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x21B SWAP1 PUSH2 0xD39 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x247 SWAP1 PUSH2 0xD39 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x294 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x269 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x294 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x277 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B2 PUSH2 0x2AB PUSH2 0x531 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x535 JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CE DUP5 DUP5 DUP5 PUSH2 0x5E9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 PUSH2 0x2EF PUSH2 0x531 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0x33B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xB21 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x34F DUP6 PUSH2 0x347 PUSH2 0x531 JUMP JUMPDEST DUP6 DUP5 SUB PUSH2 0x535 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x6 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B2 PUSH2 0x36C PUSH2 0x531 JUMP JUMPDEST DUP5 DUP5 PUSH1 0x1 PUSH1 0x0 PUSH2 0x37A PUSH2 0x531 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP12 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH2 0x3AE SWAP2 SWAP1 PUSH2 0xD0A JUMP JUMPDEST PUSH2 0x535 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3D4 ORIGIN DUP3 PUSH2 0x3F6 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x404 DUP4 PUSH2 0x207 PUSH2 0x531 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x426 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xB69 JUMP JUMPDEST PUSH2 0x43A DUP4 PUSH2 0x432 PUSH2 0x531 JUMP JUMPDEST DUP5 DUP5 SUB PUSH2 0x535 JUMP JUMPDEST PUSH2 0x444 DUP4 DUP4 PUSH2 0x713 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x21B SWAP1 PUSH2 0xD39 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x46F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3D4 ORIGIN DUP3 PUSH2 0x804 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x488 PUSH2 0x531 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP9 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0x4D4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xC77 JUMP JUMPDEST PUSH2 0x4E8 PUSH2 0x4DF PUSH2 0x531 JUMP JUMPDEST DUP6 DUP6 DUP5 SUB PUSH2 0x535 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B2 PUSH2 0x4FF PUSH2 0x531 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x5E9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x55B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xC33 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x581 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xA99 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE MLOAD PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP1 PUSH2 0x5DC SWAP1 DUP6 SWAP1 PUSH2 0xCF3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x60F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xBEE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x635 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xA14 JUMP JUMPDEST PUSH2 0x640 DUP4 DUP4 DUP4 PUSH2 0x444 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x679 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xADB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x6B0 SWAP1 DUP5 SWAP1 PUSH2 0xD0A JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x6FA SWAP2 SWAP1 PUSH2 0xCF3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x70D DUP5 DUP5 DUP5 PUSH2 0x444 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x739 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xBAD JUMP JUMPDEST PUSH2 0x745 DUP3 PUSH1 0x0 DUP4 PUSH2 0x444 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x77E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xA57 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP4 DUP4 SUB SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x7AD SWAP1 DUP5 SWAP1 PUSH2 0xD22 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x7F0 SWAP1 DUP7 SWAP1 PUSH2 0xCF3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x444 DUP4 PUSH1 0x0 DUP5 PUSH2 0x444 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x82A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xCBC JUMP JUMPDEST PUSH2 0x836 PUSH1 0x0 DUP4 DUP4 PUSH2 0x444 JUMP JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x848 SWAP2 SWAP1 PUSH2 0xD0A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x875 SWAP1 DUP5 SWAP1 PUSH2 0xD0A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x8B8 SWAP1 DUP6 SWAP1 PUSH2 0xCF3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x8CC PUSH1 0x0 DUP4 DUP4 PUSH2 0x444 JUMP JUMPDEST POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x3F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8F8 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x901 DUP3 PUSH2 0x8D0 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x91A JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x923 DUP4 PUSH2 0x8D0 JUMP JUMPDEST SWAP2 POP PUSH2 0x931 PUSH1 0x20 DUP5 ADD PUSH2 0x8D0 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x94E JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x957 DUP5 PUSH2 0x8D0 JUMP JUMPDEST SWAP3 POP PUSH2 0x965 PUSH1 0x20 DUP6 ADD PUSH2 0x8D0 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x987 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x990 DUP4 PUSH2 0x8D0 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9AF JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x9ED JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x9D1 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x9FE JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x40 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732061 PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x6C6C6F77616E6365 PUSH1 0xC0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E74206578636565647320616C6C6F77 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x616E6365 PUSH1 0xE0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x21 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1F SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xD1D JUMPI PUSH2 0xD1D PUSH2 0xD74 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xD34 JUMPI PUSH2 0xD34 PUSH2 0xD74 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP2 DIV PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xD4D JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0xD6E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4B JUMP CREATE 0xCF CALLDATACOPY 0xD0 0xC3 EXTCODECOPY DUP15 0x1F DUP8 SWAP1 JUMPI 0x4F SLT MLOAD BYTE 0xE6 0xD7 0xA9 CALLER JUMPI 0xD3 0x4F PUSH4 0x58125DA7 PUSH4 0xB44C6473 PUSH16 0x6C634300080000336080604052348015 PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xFAA CODESIZE SUB DUP1 PUSH3 0xFAA DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x16D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0xC DUP2 MSTORE PUSH12 0x2134BA31B7B4B7102237BBB7 PUSH1 0xA1 SHL PUSH1 0x20 DUP1 DUP4 ADD SWAP2 DUP3 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE PUSH1 0x7 DUP5 MSTORE PUSH7 0x212A21A227ABA7 PUSH1 0xC9 SHL SWAP1 DUP5 ADD MSTORE DUP2 MLOAD SWAP2 SWAP3 SWAP2 PUSH3 0x87 SWAP2 PUSH1 0x3 SWAP2 PUSH3 0xC7 JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x9D SWAP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0xC7 JUMP JUMPDEST POP POP PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE POP PUSH3 0x1DA JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0xD5 SWAP1 PUSH3 0x19D JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0xF9 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x144 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x114 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x144 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x144 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x144 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x127 JUMP JUMPDEST POP PUSH3 0x152 SWAP3 SWAP2 POP PUSH3 0x156 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x152 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x157 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x17F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x196 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x2 DUP2 DIV PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x1B2 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x1D4 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xDC0 DUP1 PUSH3 0x1EA PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xEA JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA0712D68 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA0712D68 EQ PUSH2 0x1C0 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x1D3 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1F9 JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x192 JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x1A5 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1B8 JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x142 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x155 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x16A JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x17D JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x10D JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x12D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF7 PUSH2 0x20C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0x9C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x120 PUSH2 0x11B CALLDATASIZE PUSH1 0x4 PUSH2 0x975 JUMP JUMPDEST PUSH2 0x29E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0x9B6 JUMP JUMPDEST PUSH2 0x135 PUSH2 0x2BB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0xCF3 JUMP JUMPDEST PUSH2 0x120 PUSH2 0x150 CALLDATASIZE PUSH1 0x4 PUSH2 0x93A JUMP JUMPDEST PUSH2 0x2C1 JUMP JUMPDEST PUSH2 0x15D PUSH2 0x35A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0xCFC JUMP JUMPDEST PUSH2 0x120 PUSH2 0x178 CALLDATASIZE PUSH1 0x4 PUSH2 0x975 JUMP JUMPDEST PUSH2 0x35F JUMP JUMPDEST PUSH2 0x190 PUSH2 0x18B CALLDATASIZE PUSH1 0x4 PUSH2 0x99E JUMP JUMPDEST PUSH2 0x3B3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x135 PUSH2 0x1A0 CALLDATASIZE PUSH1 0x4 PUSH2 0x8E7 JUMP JUMPDEST PUSH2 0x3D7 JUMP JUMPDEST PUSH2 0x190 PUSH2 0x1B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x975 JUMP JUMPDEST PUSH2 0x3F6 JUMP JUMPDEST PUSH2 0xF7 PUSH2 0x449 JUMP JUMPDEST PUSH2 0x190 PUSH2 0x1CE CALLDATASIZE PUSH1 0x4 PUSH2 0x99E JUMP JUMPDEST PUSH2 0x458 JUMP JUMPDEST PUSH2 0x120 PUSH2 0x1E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x975 JUMP JUMPDEST PUSH2 0x479 JUMP JUMPDEST PUSH2 0x120 PUSH2 0x1F4 CALLDATASIZE PUSH1 0x4 PUSH2 0x975 JUMP JUMPDEST PUSH2 0x4F2 JUMP JUMPDEST PUSH2 0x135 PUSH2 0x207 CALLDATASIZE PUSH1 0x4 PUSH2 0x908 JUMP JUMPDEST PUSH2 0x506 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x21B SWAP1 PUSH2 0xD39 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x247 SWAP1 PUSH2 0xD39 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x294 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x269 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x294 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x277 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B2 PUSH2 0x2AB PUSH2 0x531 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x535 JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CE DUP5 DUP5 DUP5 PUSH2 0x5E9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 PUSH2 0x2EF PUSH2 0x531 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0x33B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xB21 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x34F DUP6 PUSH2 0x347 PUSH2 0x531 JUMP JUMPDEST DUP6 DUP5 SUB PUSH2 0x535 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x6 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B2 PUSH2 0x36C PUSH2 0x531 JUMP JUMPDEST DUP5 DUP5 PUSH1 0x1 PUSH1 0x0 PUSH2 0x37A PUSH2 0x531 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP12 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH2 0x3AE SWAP2 SWAP1 PUSH2 0xD0A JUMP JUMPDEST PUSH2 0x535 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3D4 ORIGIN DUP3 PUSH2 0x3F6 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x404 DUP4 PUSH2 0x207 PUSH2 0x531 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x426 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xB69 JUMP JUMPDEST PUSH2 0x43A DUP4 PUSH2 0x432 PUSH2 0x531 JUMP JUMPDEST DUP5 DUP5 SUB PUSH2 0x535 JUMP JUMPDEST PUSH2 0x444 DUP4 DUP4 PUSH2 0x713 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x21B SWAP1 PUSH2 0xD39 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x46F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3D4 ORIGIN DUP3 PUSH2 0x804 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x488 PUSH2 0x531 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP9 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0x4D4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xC77 JUMP JUMPDEST PUSH2 0x4E8 PUSH2 0x4DF PUSH2 0x531 JUMP JUMPDEST DUP6 DUP6 DUP5 SUB PUSH2 0x535 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B2 PUSH2 0x4FF PUSH2 0x531 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x5E9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x55B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xC33 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x581 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xA99 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE MLOAD PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP1 PUSH2 0x5DC SWAP1 DUP6 SWAP1 PUSH2 0xCF3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x60F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xBEE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x635 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xA14 JUMP JUMPDEST PUSH2 0x640 DUP4 DUP4 DUP4 PUSH2 0x444 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x679 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xADB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x6B0 SWAP1 DUP5 SWAP1 PUSH2 0xD0A JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x6FA SWAP2 SWAP1 PUSH2 0xCF3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x70D DUP5 DUP5 DUP5 PUSH2 0x444 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x739 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xBAD JUMP JUMPDEST PUSH2 0x745 DUP3 PUSH1 0x0 DUP4 PUSH2 0x444 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x77E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xA57 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP4 DUP4 SUB SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x7AD SWAP1 DUP5 SWAP1 PUSH2 0xD22 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x7F0 SWAP1 DUP7 SWAP1 PUSH2 0xCF3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x444 DUP4 PUSH1 0x0 DUP5 PUSH2 0x444 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x82A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x332 SWAP1 PUSH2 0xCBC JUMP JUMPDEST PUSH2 0x836 PUSH1 0x0 DUP4 DUP4 PUSH2 0x444 JUMP JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x848 SWAP2 SWAP1 PUSH2 0xD0A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x875 SWAP1 DUP5 SWAP1 PUSH2 0xD0A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x8B8 SWAP1 DUP6 SWAP1 PUSH2 0xCF3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x8CC PUSH1 0x0 DUP4 DUP4 PUSH2 0x444 JUMP JUMPDEST POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x3F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8F8 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x901 DUP3 PUSH2 0x8D0 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x91A JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x923 DUP4 PUSH2 0x8D0 JUMP JUMPDEST SWAP2 POP PUSH2 0x931 PUSH1 0x20 DUP5 ADD PUSH2 0x8D0 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x94E JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x957 DUP5 PUSH2 0x8D0 JUMP JUMPDEST SWAP3 POP PUSH2 0x965 PUSH1 0x20 DUP6 ADD PUSH2 0x8D0 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x987 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x990 DUP4 PUSH2 0x8D0 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9AF JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x9ED JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x9D1 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x9FE JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x40 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732061 PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x6C6C6F77616E6365 PUSH1 0xC0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E74206578636565647320616C6C6F77 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x616E6365 PUSH1 0xE0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x21 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1F SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xD1D JUMPI PUSH2 0xD1D PUSH2 0xD74 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xD34 JUMPI PUSH2 0xD34 PUSH2 0xD74 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP2 DIV PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xD4D JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0xD6E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4E SHR PUSH14 0x573572959203575A7EF9E80D49A5 0x27 EXTCODEHASH POP DUP2 SWAP14 0x26 0xAD PUSH19 0x85E1265CC9EEC664736F6C63430008000033A2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH15 0xB16B4AA67D309939F62D43371989C5 XOR ADDMOD PUSH25 0x7B63D8E50FCCB32C3795026BF764736F6C6343000800003300 ", "pcMap": {"0": {"offset": [1863, 8106], "op": "PUSH1", "path": "8", "value": "0x80"}, "2": {"fn": null, "offset": [1863, 8106], "op": "PUSH1", "path": "8", "value": "0x40"}, "4": {"fn": null, "offset": [1863, 8106], "op": "MSTORE", "path": "8"}, "5": {"fn": null, "offset": [1863, 8106], "op": "CALLVALUE", "path": "8"}, "6": {"fn": null, "offset": [1863, 8106], "op": "DUP1", "path": "8"}, "7": {"fn": null, "offset": [1863, 8106], "op": "ISZERO", "path": "8"}, "8": {"fn": null, "offset": [1863, 8106], "op": "PUSH3", "path": "8", "value": "0x11"}, "12": {"fn": null, "offset": [1863, 8106], "op": "JUMPI", "path": "8"}, "13": {"fn": null, "offset": [1863, 8106], "op": "PUSH1", "path": "8", "value": "0x0"}, "15": {"fn": null, "offset": [1863, 8106], "op": "DUP1", "path": "8"}, "16": {"dev": "Cannot send ether to nonpayable function", "fn": null, "offset": [1863, 8106], "op": "REVERT", "path": "8"}, "17": {"fn": null, "offset": [1863, 8106], "op": "JUMPDEST", "path": "8"}, "18": {"fn": null, "offset": [1863, 8106], "op": "POP", "path": "8"}, "19": {"fn": null, "offset": [1863, 8106], "op": "PUSH1", "path": "8", "value": "0x4"}, "21": {"fn": null, "offset": [1863, 8106], "op": "CALLDATASIZE", "path": "8"}, "22": {"fn": null, "offset": [1863, 8106], "op": "LT", "path": "8"}, "23": {"fn": null, "offset": [1863, 8106], "op": "PUSH3", "path": "8", "value": "0x15F"}, "27": {"fn": null, "offset": [1863, 8106], "op": "JUMPI", "path": "8"}, "28": {"fn": null, "offset": [1863, 8106], "op": "PUSH1", "path": "8", "value": "0x0"}, "30": {"fn": null, "offset": [1863, 8106], "op": "CALLDATALOAD", "path": "8"}, "31": {"fn": null, "offset": [1863, 8106], "op": "PUSH1", "path": "8", "value": "0xE0"}, "33": {"fn": null, "offset": [1863, 8106], "op": "SHR", "path": "8"}, "34": {"fn": null, "offset": [1863, 8106], "op": "DUP1", "path": "8"}, "35": {"fn": null, "offset": [1863, 8106], "op": "PUSH4", "path": "8", "value": "0xB75CBE0B"}, "40": {"fn": null, "offset": [1863, 8106], "op": "GT", "path": "8"}, "41": {"fn": null, "offset": [1863, 8106], "op": "PUSH3", "path": "8", "value": "0xC9"}, "45": {"fn": null, "offset": [1863, 8106], "op": "JUMPI", "path": "8"}, "46": {"fn": null, "offset": [1863, 8106], "op": "DUP1", "path": "8"}, "47": {"fn": null, "offset": [1863, 8106], "op": "PUSH4", "path": "8", "value": "0xF0156E8A"}, "52": {"fn": null, "offset": [1863, 8106], "op": "GT", "path": "8"}, "53": {"fn": null, "offset": [1863, 8106], "op": "PUSH3", "path": "8", "value": "0x87"}, "57": {"fn": null, "offset": [1863, 8106], "op": "JUMPI", "path": "8"}, "58": {"fn": null, "offset": [1863, 8106], "op": "DUP1", "path": "8"}, "59": {"fn": null, "offset": [1863, 8106], "op": "PUSH4", "path": "8", "value": "0xF0156E8A"}, "64": {"fn": null, "offset": [1863, 8106], "op": "EQ", "path": "8"}, "65": {"fn": null, "offset": [1863, 8106], "op": "PUSH3", "path": "8", "value": "0x261"}, "69": {"fn": null, "offset": [1863, 8106], "op": "JUMPI", "path": "8"}, "70": {"fn": null, "offset": [1863, 8106], "op": "DUP1", "path": "8"}, "71": {"fn": null, "offset": [1863, 8106], "op": "PUSH4", "path": "8", "value": "0xF06847D6"}, "76": {"fn": null, "offset": [1863, 8106], "op": "EQ", "path": "8"}, "77": {"fn": null, "offset": [1863, 8106], "op": "PUSH3", "path": "8", "value": "0x26B"}, "81": {"fn": null, "offset": [1863, 8106], "op": "JUMPI", "path": "8"}, "82": {"fn": null, "offset": [1863, 8106], "op": "DUP1", "path": "8"}, "83": {"fn": null, "offset": [1863, 8106], "op": "PUSH4", "path": "8", "value": "0xF2FDE38B"}, "88": {"fn": null, "offset": [1863, 8106], "op": "EQ", "path": "8"}, "89": {"fn": null, "offset": [1863, 8106], "op": "PUSH3", "path": "8", "value": "0x275"}, "93": {"fn": null, "offset": [1863, 8106], "op": "JUMPI", "path": "8"}, "94": {"fn": null, "offset": [1863, 8106], "op": "DUP1", "path": "8"}, "95": {"fn": null, "offset": [1863, 8106], "op": "PUSH4", "path": "8", "value": "0xF4352C57"}, "100": {"fn": null, "offset": [1863, 8106], "op": "EQ", "path": "8"}, "101": {"fn": null, "offset": [1863, 8106], "op": "PUSH3", "path": "8", "value": "0x28C"}, "105": {"fn": null, "offset": [1863, 8106], "op": "JUMPI", "path": "8"}, "106": {"fn": null, "offset": [1863, 8106], "op": "DUP1", "path": "8"}, "107": {"fn": null, "offset": [1863, 8106], "op": "PUSH4", "path": "8", "value": "0xF530C04A"}, "112": {"fn": null, "offset": [1863, 8106], "op": "EQ", "path": "8"}, "113": {"fn": null, "offset": [1863, 8106], "op": "PUSH3", "path": "8", "value": "0x296"}, "117": {"fn": null, "offset": [1863, 8106], "op": "JUMPI", "path": "8"}, "118": {"fn": null, "offset": [1863, 8106], "op": "DUP1", "path": "8"}, "119": {"fn": null, "offset": [1863, 8106], "op": "PUSH4", "path": "8", "value": "0xFEAE67B0"}, "124": {"fn": null, "offset": [1863, 8106], "op": "EQ", "path": "8"}, "125": {"fn": null, "offset": [1863, 8106], "op": "PUSH3", "path": "8", "value": "0x2AD"}, "129": {"fn": null, "offset": [1863, 8106], "op": "JUMPI", "path": "8"}, "130": {"fn": null, "offset": [1863, 8106], "op": "PUSH3", "path": "8", "value": "0x15F"}, "134": {"fn": null, "offset": [1863, 8106], "op": "JUMP", "path": "8"}, "135": {"fn": null, "offset": [1863, 8106], "op": "JUMPDEST", "path": "8"}, "136": {"fn": null, "offset": [1863, 8106], "op": "DUP1", "path": "8"}, "137": {"fn": null, "offset": [1863, 8106], "op": "PUSH4", "path": "8", "value": "0xB75CBE0B"}, "142": {"fn": null, "offset": [1863, 8106], "op": "EQ", "path": "8"}, "143": {"fn": null, "offset": [1863, 8106], "op": "PUSH3", "path": "8", "value": "0x215"}, "147": {"fn": null, "offset": [1863, 8106], "op": "JUMPI", "path": "8"}, "148": {"fn": null, "offset": [1863, 8106], "op": "DUP1", "path": "8"}, "149": {"fn": null, "offset": [1863, 8106], "op": "PUSH4", "path": "8", "value": "0xC46D4F09"}, "154": {"fn": null, "offset": [1863, 8106], "op": "EQ", "path": "8"}, "155": {"fn": null, "offset": [1863, 8106], "op": "PUSH3", "path": "8", "value": "0x21F"}, "159": {"fn": null, "offset": [1863, 8106], "op": "JUMPI", "path": "8"}, "160": {"fn": null, "offset": [1863, 8106], "op": "DUP1", "path": "8"}, "161": {"fn": null, "offset": [1863, 8106], "op": "PUSH4", "path": "8", "value": "0xC7E3B124"}, "166": {"fn": null, "offset": [1863, 8106], "op": "EQ", "path": "8"}, "167": {"fn": null, "offset": [1863, 8106], "op": "PUSH3", "path": "8", "value": "0x236"}, "171": {"fn": null, "offset": [1863, 8106], "op": "JUMPI", "path": "8"}, "172": {"fn": null, "offset": [1863, 8106], "op": "DUP1", "path": "8"}, "173": {"fn": null, "offset": [1863, 8106], "op": "PUSH4", "path": "8", "value": "0xD1EE539D"}, "178": {"fn": null, "offset": [1863, 8106], "op": "EQ", "path": "8"}, "179": {"fn": null, "offset": [1863, 8106], "op": "PUSH3", "path": "8", "value": "0x240"}, "183": {"fn": null, "offset": [1863, 8106], "op": "JUMPI", "path": "8"}, "184": {"fn": null, "offset": [1863, 8106], "op": "DUP1", "path": "8"}, "185": {"fn": null, "offset": [1863, 8106], "op": "PUSH4", "path": "8", "value": "0xDDE7BE2C"}, "190": {"fn": null, "offset": [1863, 8106], "op": "EQ", "path": "8"}, "191": {"fn": null, "offset": [1863, 8106], "op": "PUSH3", "path": "8", "value": "0x257"}, "195": {"fn": null, "offset": [1863, 8106], "op": "JUMPI", "path": "8"}, "196": {"fn": null, "offset": [1863, 8106], "op": "PUSH3", "path": "8", "value": "0x15F"}, "200": {"fn": null, "offset": [1863, 8106], "op": "JUMP", "path": "8"}, "201": {"fn": null, "offset": [1863, 8106], "op": "JUMPDEST", "path": "8"}, "202": {"fn": null, "offset": [1863, 8106], "op": "DUP1", "path": "8"}, "203": {"fn": null, "offset": [1863, 8106], "op": "PUSH4", "path": "8", "value": "0x6E5D6615"}, "208": {"fn": null, "offset": [1863, 8106], "op": "GT", "path": "8"}, "209": {"fn": null, "offset": [1863, 8106], "op": "PUSH3", "path": "8", "value": "0x123"}, "213": {"fn": null, "offset": [1863, 8106], "op": "JUMPI", "path": "8"}, "214": {"fn": null, "offset": [1863, 8106], "op": "DUP1", "path": "8"}, "215": {"fn": null, "offset": [1863, 8106], "op": "PUSH4", "path": "8", "value": "0x6E5D6615"}, "220": {"fn": null, "offset": [1863, 8106], "op": "EQ", "path": "8"}, "221": {"fn": null, "offset": [1863, 8106], "op": "PUSH3", "path": "8", "value": "0x1AE"}, "225": {"fn": null, "offset": [1863, 8106], "op": "JUMPI", "path": "8"}, "226": {"fn": null, "offset": [1863, 8106], "op": "DUP1", "path": "8"}, "227": {"fn": null, "offset": [1863, 8106], "op": "PUSH4", "path": "8", "value": "0x715018A6"}, "232": {"fn": null, "offset": [1863, 8106], "op": "EQ", "path": "8"}, "233": {"fn": null, "offset": [1863, 8106], "op": "PUSH3", "path": "8", "value": "0x1BA"}, "237": {"fn": null, "offset": [1863, 8106], "op": "JUMPI", "path": "8"}, "238": {"fn": null, "offset": [1863, 8106], "op": "DUP1", "path": "8"}, "239": {"fn": null, "offset": [1863, 8106], "op": "PUSH4", "path": "8", "value": "0x81C2B29B"}, "244": {"fn": null, "offset": [1863, 8106], "op": "EQ", "path": "8"}, "245": {"fn": null, "offset": [1863, 8106], "op": "PUSH3", "path": "8", "value": "0x1C4"}, "249": {"fn": null, "offset": [1863, 8106], "op": "JUMPI", "path": "8"}, "250": {"fn": null, "offset": [1863, 8106], "op": "DUP1", "path": "8"}, "251": {"fn": null, "offset": [1863, 8106], "op": "PUSH4", "path": "8", "value": "0x8DA5CB5B"}, "256": {"fn": null, "offset": [1863, 8106], "op": "EQ", "path": "8"}, "257": {"fn": null, "offset": [1863, 8106], "op": "PUSH3", "path": "8", "value": "0x1CE"}, "261": {"fn": null, "offset": [1863, 8106], "op": "JUMPI", "path": "8"}, "262": {"fn": null, "offset": [1863, 8106], "op": "DUP1", "path": "8"}, "263": {"fn": null, "offset": [1863, 8106], "op": "PUSH4", "path": "8", "value": "0x98881BC9"}, "268": {"fn": null, "offset": [1863, 8106], "op": "EQ", "path": "8"}, "269": {"fn": null, "offset": [1863, 8106], "op": "PUSH3", "path": "8", "value": "0x1E7"}, "273": {"fn": null, "offset": [1863, 8106], "op": "JUMPI", "path": "8"}, "274": {"fn": null, "offset": [1863, 8106], "op": "DUP1", "path": "8"}, "275": {"fn": null, "offset": [1863, 8106], "op": "PUSH4", "path": "8", "value": "0xA14274E8"}, "280": {"fn": null, "offset": [1863, 8106], "op": "EQ", "path": "8"}, "281": {"fn": null, "offset": [1863, 8106], "op": "PUSH3", "path": "8", "value": "0x1FE"}, "285": {"fn": null, "offset": [1863, 8106], "op": "JUMPI", "path": "8"}, "286": {"fn": null, "offset": [1863, 8106], "op": "PUSH3", "path": "8", "value": "0x15F"}, "290": {"fn": null, "offset": [1863, 8106], "op": "JUMP", "path": "8"}, "291": {"fn": null, "offset": [1863, 8106], "op": "JUMPDEST", "path": "8"}, "292": {"fn": null, "offset": [1863, 8106], "op": "DUP1", "path": "8"}, "293": {"fn": null, "offset": [1863, 8106], "op": "PUSH3", "path": "8", "value": "0x34B9CC"}, "297": {"fn": null, "offset": [1863, 8106], "op": "EQ", "path": "8"}, "298": {"fn": null, "offset": [1863, 8106], "op": "PUSH3", "path": "8", "value": "0x164"}, "302": {"fn": null, "offset": [1863, 8106], "op": "JUMPI", "path": "8"}, "303": {"fn": null, "offset": [1863, 8106], "op": "DUP1", "path": "8"}, "304": {"fn": null, "offset": [1863, 8106], "op": "PUSH4", "path": "8", "value": "0xC3E5343"}, "309": {"fn": null, "offset": [1863, 8106], "op": "EQ", "path": "8"}, "310": {"fn": null, "offset": [1863, 8106], "op": "PUSH3", "path": "8", "value": "0x186"}, "314": {"fn": null, "offset": [1863, 8106], "op": "JUMPI", "path": "8"}, "315": {"fn": null, "offset": [1863, 8106], "op": "DUP1", "path": "8"}, "316": {"fn": null, "offset": [1863, 8106], "op": "PUSH4", "path": "8", "value": "0x14D7C6D2"}, "321": {"fn": null, "offset": [1863, 8106], "op": "EQ", "path": "8"}, "322": {"fn": null, "offset": [1863, 8106], "op": "PUSH3", "path": "8", "value": "0x190"}, "326": {"fn": null, "offset": [1863, 8106], "op": "JUMPI", "path": "8"}, "327": {"fn": null, "offset": [1863, 8106], "op": "DUP1", "path": "8"}, "328": {"fn": null, "offset": [1863, 8106], "op": "PUSH4", "path": "8", "value": "0x157D0129"}, "333": {"fn": null, "offset": [1863, 8106], "op": "EQ", "path": "8"}, "334": {"fn": null, "offset": [1863, 8106], "op": "PUSH3", "path": "8", "value": "0x19A"}, "338": {"fn": null, "offset": [1863, 8106], "op": "JUMPI", "path": "8"}, "339": {"fn": null, "offset": [1863, 8106], "op": "DUP1", "path": "8"}, "340": {"fn": null, "offset": [1863, 8106], "op": "PUSH4", "path": "8", "value": "0x3A3610BC"}, "345": {"fn": null, "offset": [1863, 8106], "op": "EQ", "path": "8"}, "346": {"fn": null, "offset": [1863, 8106], "op": "PUSH3", "path": "8", "value": "0x1A4"}, "350": {"fn": null, "offset": [1863, 8106], "op": "JUMPI", "path": "8"}, "351": {"fn": null, "offset": [1863, 8106], "op": "JUMPDEST", "path": "8"}, "352": {"fn": null, "offset": [1863, 8106], "op": "PUSH1", "path": "8", "value": "0x0"}, "354": {"fn": null, "offset": [1863, 8106], "op": "DUP1", "path": "8"}, "355": {"first_revert": true, "fn": null, "offset": [1863, 8106], "op": "REVERT", "path": "8"}, "356": {"offset": [2150, 2180], "op": "JUMPDEST", "path": "8"}, "357": {"fn": null, "offset": [2150, 2180], "op": "PUSH3", "path": "8", "value": "0x16E"}, "361": {"fn": null, "offset": [2150, 2180], "op": "PUSH3", "path": "8", "value": "0x2C6"}, "365": {"fn": null, "jump": "i", "offset": [2150, 2180], "op": "JUMP", "path": "8"}, "366": {"fn": null, "offset": [2150, 2180], "op": "JUMPDEST", "path": "8"}, "367": {"fn": null, "offset": [2150, 2180], "op": "PUSH1", "path": "8", "value": "0x40"}, "369": {"fn": null, "offset": [2150, 2180], "op": "MLOAD", "path": "8"}, "370": {"fn": null, "offset": [2150, 2180], "op": "PUSH3", "path": "8", "value": "0x17D"}, "374": {"fn": null, "offset": [2150, 2180], "op": "SWAP2", "path": "8"}, "375": {"fn": null, "offset": [2150, 2180], "op": "SWAP1", "path": "8"}, "376": {"fn": null, "offset": [2150, 2180], "op": "PUSH3", "path": "8", "value": "0x10B5"}, "380": {"fn": null, "jump": "i", "offset": [2150, 2180], "op": "JUMP", "path": "8"}, "381": {"fn": null, "offset": [2150, 2180], "op": "JUMPDEST", "path": "8"}, "382": {"fn": null, "offset": [2150, 2180], "op": "PUSH1", "path": "8", "value": "0x40"}, "384": {"fn": null, "offset": [2150, 2180], "op": "MLOAD", "path": "8"}, "385": {"fn": null, "offset": [2150, 2180], "op": "DUP1", "path": "8"}, "386": {"fn": null, "offset": [2150, 2180], "op": "SWAP2", "path": "8"}, "387": {"fn": null, "offset": [2150, 2180], "op": "SUB", "path": "8"}, "388": {"fn": null, "offset": [2150, 2180], "op": "SWAP1", "path": "8"}, "389": {"fn": null, "offset": [2150, 2180], "op": "RETURN", "path": "8"}, "390": {"offset": [1980, 2017], "op": "JUMPDEST", "path": "8"}, "391": {"fn": null, "offset": [1980, 2017], "op": "PUSH3", "path": "8", "value": "0x16E"}, "395": {"fn": null, "offset": [1980, 2017], "op": "PUSH3", "path": "8", "value": "0x2CC"}, "399": {"fn": null, "jump": "i", "offset": [1980, 2017], "op": "JUMP", "path": "8"}, "400": {"offset": [2107, 2143], "op": "JUMPDEST", "path": "8"}, "401": {"fn": null, "offset": [2107, 2143], "op": "PUSH3", "path": "8", "value": "0x16E"}, "405": {"fn": null, "offset": [2107, 2143], "op": "PUSH3", "path": "8", "value": "0x2D2"}, "409": {"fn": null, "jump": "i", "offset": [2107, 2143], "op": "JUMP", "path": "8"}, "410": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7878, 7985], "op": "JUMPDEST", "path": "8"}, "411": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7878, 7985], "op": "PUSH3", "path": "8", "value": "0x16E"}, "415": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7878, 7985], "op": "PUSH3", "path": "8", "value": "0x2D8"}, "419": {"fn": "LeveragedTrading.getBtcupBalance", "jump": "i", "offset": [7878, 7985], "op": "JUMP", "path": "8"}, "420": {"fn": "LeveragedTrading.getBtcPrice", "offset": [6885, 7202], "op": "JUMPDEST", "path": "8"}, "421": {"fn": "LeveragedTrading.getBtcPrice", "offset": [6885, 7202], "op": "PUSH3", "path": "8", "value": "0x16E"}, "425": {"fn": "LeveragedTrading.getBtcPrice", "offset": [6885, 7202], "op": "PUSH3", "path": "8", "value": "0x364"}, "429": {"fn": "LeveragedTrading.getBtcPrice", "jump": "i", "offset": [6885, 7202], "op": "JUMP", "path": "8"}, "430": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5169, 5822], "op": "JUMPDEST", "path": "8"}, "431": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5169, 5822], "op": "PUSH3", "path": "8", "value": "0x1B8"}, "435": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5169, 5822], "op": "PUSH3", "path": "8", "value": "0x3F5"}, "439": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "jump": "i", "offset": [5169, 5822], "op": "JUMP", "path": "8"}, "440": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5169, 5822], "op": "JUMPDEST", "path": "8"}, "441": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5169, 5822], "op": "STOP", "path": "8"}, "442": {"fn": "Ownable.renounceOwnership", "offset": [1605, 1697], "op": "JUMPDEST", "path": "0"}, "443": {"fn": "Ownable.renounceOwnership", "offset": [1605, 1697], "op": "PUSH3", "path": "0", "value": "0x1B8"}, "447": {"fn": "Ownable.renounceOwnership", "offset": [1605, 1697], "op": "PUSH3", "path": "0", "value": "0x497"}, "451": {"fn": "Ownable.renounceOwnership", "jump": "i", "offset": [1605, 1697], "op": "JUMP", "path": "0"}, "452": {"fn": "LeveragedTrading.getBtcDownPrice", "offset": [6654, 6833], "op": "JUMPDEST", "path": "8"}, "453": {"fn": "LeveragedTrading.getBtcDownPrice", "offset": [6654, 6833], "op": "PUSH3", "path": "8", "value": "0x16E"}, "457": {"fn": "LeveragedTrading.getBtcDownPrice", "offset": [6654, 6833], "op": "PUSH3", "path": "8", "value": "0x4F4"}, "461": {"fn": "LeveragedTrading.getBtcDownPrice", "jump": "i", "offset": [6654, 6833], "op": "JUMP", "path": "8"}, "462": {"fn": "Ownable.owner", "offset": [973, 1058], "op": "JUMPDEST", "path": "0"}, "463": {"fn": "Ownable.owner", "offset": [973, 1058], "op": "PUSH3", "path": "0", "value": "0x1D8"}, "467": {"fn": "Ownable.owner", "offset": [973, 1058], "op": "PUSH3", "path": "0", "value": "0x536"}, "471": {"fn": "Ownable.owner", "jump": "i", "offset": [973, 1058], "op": "JUMP", "path": "0"}, "472": {"fn": "Ownable.owner", "offset": [973, 1058], "op": "JUMPDEST", "path": "0"}, "473": {"fn": "Ownable.owner", "offset": [973, 1058], "op": "PUSH1", "path": "0", "value": "0x40"}, "475": {"fn": "Ownable.owner", "offset": [973, 1058], "op": "MLOAD", "path": "0"}, "476": {"fn": "Ownable.owner", "offset": [973, 1058], "op": "PUSH3", "path": "0", "value": "0x17D"}, "480": {"fn": "Ownable.owner", "offset": [973, 1058], "op": "SWAP2", "path": "0"}, "481": {"fn": "Ownable.owner", "offset": [973, 1058], "op": "SWAP1", "path": "0"}, "482": {"fn": "Ownable.owner", "offset": [973, 1058], "op": "PUSH3", "path": "0", "value": "0xF70"}, "486": {"fn": "Ownable.owner", "jump": "i", "offset": [973, 1058], "op": "JUMP", "path": "0"}, "487": {"fn": "LeveragedTrading.initializePool", "offset": [2711, 3056], "op": "JUMPDEST", "path": "8"}, "488": {"fn": "LeveragedTrading.initializePool", "offset": [2711, 3056], "op": "PUSH3", "path": "8", "value": "0x1B8"}, "492": {"fn": "LeveragedTrading.initializePool", "offset": [2711, 3056], "op": "PUSH3", "path": "8", "value": "0x1F8"}, "496": {"fn": "LeveragedTrading.initializePool", "offset": [2711, 3056], "op": "CALLDATASIZE", "path": "8"}, "497": {"fn": "LeveragedTrading.initializePool", "offset": [2711, 3056], "op": "PUSH1", "path": "8", "value": "0x4"}, "499": {"fn": "LeveragedTrading.initializePool", "offset": [2711, 3056], "op": "PUSH3", "path": "8", "value": "0xEEA"}, "503": {"fn": "LeveragedTrading.initializePool", "jump": "i", "offset": [2711, 3056], "op": "JUMP", "path": "8"}, "504": {"fn": "LeveragedTrading.initializePool", "offset": [2711, 3056], "op": "JUMPDEST", "path": "8"}, "505": {"fn": "LeveragedTrading.initializePool", "offset": [2711, 3056], "op": "PUSH3", "path": "8", "value": "0x545"}, "509": {"fn": "LeveragedTrading.initializePool", "jump": "i", "offset": [2711, 3056], "op": "JUMP", "path": "8"}, "510": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4650, 5163], "op": "JUMPDEST", "path": "8"}, "511": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4650, 5163], "op": "PUSH3", "path": "8", "value": "0x1B8"}, "515": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4650, 5163], "op": "PUSH3", "path": "8", "value": "0x20F"}, "519": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4650, 5163], "op": "CALLDATASIZE", "path": "8"}, "520": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4650, 5163], "op": "PUSH1", "path": "8", "value": "0x4"}, "522": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4650, 5163], "op": "PUSH3", "path": "8", "value": "0xEEA"}, "526": {"fn": "LeveragedTrading.redeemBtcDown", "jump": "i", "offset": [4650, 5163], "op": "JUMP", "path": "8"}, "527": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4650, 5163], "op": "JUMPDEST", "path": "8"}, "528": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4650, 5163], "op": "PUSH3", "path": "8", "value": "0x696"}, "532": {"fn": "LeveragedTrading.redeemBtcDown", "jump": "i", "offset": [4650, 5163], "op": "JUMP", "path": "8"}, "533": {"offset": [2210, 2242], "op": "JUMPDEST", "path": "8"}, "534": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [2210, 2242], "op": "PUSH3", "path": "8", "value": "0x16E"}, "538": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [2210, 2242], "op": "PUSH3", "path": "8", "value": "0x806"}, "542": {"fn": "LeveragedTrading.redeemBtcDown", "jump": "i", "offset": [2210, 2242], "op": "JUMP", "path": "8"}, "543": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3601, 4152], "op": "JUMPDEST", "path": "8"}, "544": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3601, 4152], "op": "PUSH3", "path": "8", "value": "0x1B8"}, "548": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3601, 4152], "op": "PUSH3", "path": "8", "value": "0x230"}, "552": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3601, 4152], "op": "CALLDATASIZE", "path": "8"}, "553": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3601, 4152], "op": "PUSH1", "path": "8", "value": "0x4"}, "555": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3601, 4152], "op": "PUSH3", "path": "8", "value": "0xEEA"}, "559": {"fn": "LeveragedTrading.issueBtcDown", "jump": "i", "offset": [3601, 4152], "op": "JUMP", "path": "8"}, "560": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3601, 4152], "op": "JUMPDEST", "path": "8"}, "561": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3601, 4152], "op": "PUSH3", "path": "8", "value": "0x80C"}, "565": {"fn": "LeveragedTrading.issueBtcDown", "jump": "i", "offset": [3601, 4152], "op": "JUMP", "path": "8"}, "566": {"fn": "LeveragedTrading.getBtcdownBalance", "offset": [7991, 8102], "op": "JUMPDEST", "path": "8"}, "567": {"fn": "LeveragedTrading.getBtcdownBalance", "offset": [7991, 8102], "op": "PUSH3", "path": "8", "value": "0x16E"}, "571": {"fn": "LeveragedTrading.getBtcdownBalance", "offset": [7991, 8102], "op": "PUSH3", "path": "8", "value": "0x979"}, "575": {"fn": "LeveragedTrading.getBtcdownBalance", "jump": "i", "offset": [7991, 8102], "op": "JUMP", "path": "8"}, "576": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4158, 4644], "op": "JUMPDEST", "path": "8"}, "577": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4158, 4644], "op": "PUSH3", "path": "8", "value": "0x1B8"}, "581": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4158, 4644], "op": "PUSH3", "path": "8", "value": "0x251"}, "585": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4158, 4644], "op": "CALLDATASIZE", "path": "8"}, "586": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4158, 4644], "op": "PUSH1", "path": "8", "value": "0x4"}, "588": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4158, 4644], "op": "PUSH3", "path": "8", "value": "0xEEA"}, "592": {"fn": "LeveragedTrading.redeemBtcUp", "jump": "i", "offset": [4158, 4644], "op": "JUMP", "path": "8"}, "593": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4158, 4644], "op": "JUMPDEST", "path": "8"}, "594": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4158, 4644], "op": "PUSH3", "path": "8", "value": "0x9AC"}, "598": {"fn": "LeveragedTrading.redeemBtcUp", "jump": "i", "offset": [4158, 4644], "op": "JUMP", "path": "8"}, "599": {"offset": [2045, 2079], "op": "JUMPDEST", "path": "8"}, "600": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [2045, 2079], "op": "PUSH3", "path": "8", "value": "0x16E"}, "604": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [2045, 2079], "op": "PUSH3", "path": "8", "value": "0xAA6"}, "608": {"fn": "LeveragedTrading.redeemBtcUp", "jump": "i", "offset": [2045, 2079], "op": "JUMP", "path": "8"}, "609": {"offset": [1939, 1974], "op": "JUMPDEST", "path": "8"}, "610": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [1939, 1974], "op": "PUSH3", "path": "8", "value": "0x16E"}, "614": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [1939, 1974], "op": "PUSH3", "path": "8", "value": "0xAAC"}, "618": {"fn": "LeveragedTrading.redeemBtcUp", "jump": "i", "offset": [1939, 1974], "op": "JUMP", "path": "8"}, "619": {"fn": "LeveragedTrading.getBtcUpPrice", "offset": [6459, 6616], "op": "JUMPDEST", "path": "8"}, "620": {"fn": "LeveragedTrading.getBtcUpPrice", "offset": [6459, 6616], "op": "PUSH3", "path": "8", "value": "0x16E"}, "624": {"fn": "LeveragedTrading.getBtcUpPrice", "offset": [6459, 6616], "op": "PUSH3", "path": "8", "value": "0xAB2"}, "628": {"fn": "LeveragedTrading.getBtcUpPrice", "jump": "i", "offset": [6459, 6616], "op": "JUMP", "path": "8"}, "629": {"fn": "Ownable.transferOwnership", "offset": [1846, 2035], "op": "JUMPDEST", "path": "0"}, "630": {"fn": "Ownable.transferOwnership", "offset": [1846, 2035], "op": "PUSH3", "path": "0", "value": "0x1B8"}, "634": {"fn": "Ownable.transferOwnership", "offset": [1846, 2035], "op": "PUSH3", "path": "0", "value": "0x286"}, "638": {"fn": "Ownable.transferOwnership", "offset": [1846, 2035], "op": "CALLDATASIZE", "path": "0"}, "639": {"fn": "Ownable.transferOwnership", "offset": [1846, 2035], "op": "PUSH1", "path": "0", "value": "0x4"}, "641": {"fn": "Ownable.transferOwnership", "offset": [1846, 2035], "op": "PUSH3", "path": "0", "value": "0xE9F"}, "645": {"fn": "Ownable.transferOwnership", "jump": "i", "offset": [1846, 2035], "op": "JUMP", "path": "0"}, "646": {"fn": "Ownable.transferOwnership", "offset": [1846, 2035], "op": "JUMPDEST", "path": "0"}, "647": {"fn": "Ownable.transferOwnership", "offset": [1846, 2035], "op": "PUSH3", "path": "0", "value": "0xAE7"}, "651": {"fn": "Ownable.transferOwnership", "jump": "i", "offset": [1846, 2035], "op": "JUMP", "path": "0"}, "652": {"offset": [2271, 2302], "op": "JUMPDEST", "path": "8"}, "653": {"fn": "Ownable.transferOwnership", "offset": [2271, 2302], "op": "PUSH3", "path": "8", "value": "0x16E"}, "657": {"fn": "Ownable.transferOwnership", "offset": [2271, 2302], "op": "PUSH3", "path": "8", "value": "0xB64"}, "661": {"fn": "Ownable.transferOwnership", "jump": "i", "offset": [2271, 2302], "op": "JUMP", "path": "8"}, "662": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3062, 3595], "op": "JUMPDEST", "path": "8"}, "663": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3062, 3595], "op": "PUSH3", "path": "8", "value": "0x1B8"}, "667": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3062, 3595], "op": "PUSH3", "path": "8", "value": "0x2A7"}, "671": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3062, 3595], "op": "CALLDATASIZE", "path": "8"}, "672": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3062, 3595], "op": "PUSH1", "path": "8", "value": "0x4"}, "674": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3062, 3595], "op": "PUSH3", "path": "8", "value": "0xEEA"}, "678": {"fn": "LeveragedTrading.issueBtcUp", "jump": "i", "offset": [3062, 3595], "op": "JUMP", "path": "8"}, "679": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3062, 3595], "op": "JUMPDEST", "path": "8"}, "680": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3062, 3595], "op": "PUSH3", "path": "8", "value": "0xB6A"}, "684": {"fn": "LeveragedTrading.issueBtcUp", "jump": "i", "offset": [3062, 3595], "op": "JUMP", "path": "8"}, "685": {"offset": [2352, 2389], "op": "JUMPDEST", "path": "8"}, "686": {"fn": "LeveragedTrading.issueBtcUp", "offset": [2352, 2389], "op": "PUSH3", "path": "8", "value": "0x2B7"}, "690": {"fn": "LeveragedTrading.issueBtcUp", "offset": [2352, 2389], "op": "PUSH3", "path": "8", "value": "0xC62"}, "694": {"fn": "LeveragedTrading.issueBtcUp", "jump": "i", "offset": [2352, 2389], "op": "JUMP", "path": "8"}, "695": {"fn": "LeveragedTrading.issueBtcUp", "offset": [2352, 2389], "op": "JUMPDEST", "path": "8"}, "696": {"fn": "LeveragedTrading.issueBtcUp", "offset": [2352, 2389], "op": "PUSH1", "path": "8", "value": "0x40"}, "698": {"fn": "LeveragedTrading.issueBtcUp", "offset": [2352, 2389], "op": "MLOAD", "path": "8"}, "699": {"fn": "LeveragedTrading.issueBtcUp", "offset": [2352, 2389], "op": "PUSH3", "path": "8", "value": "0x17D"}, "703": {"fn": "LeveragedTrading.issueBtcUp", "offset": [2352, 2389], "op": "SWAP2", "path": "8"}, "704": {"fn": "LeveragedTrading.issueBtcUp", "offset": [2352, 2389], "op": "SWAP1", "path": "8"}, "705": {"fn": "LeveragedTrading.issueBtcUp", "offset": [2352, 2389], "op": "PUSH3", "path": "8", "value": "0xFC1"}, "709": {"fn": "LeveragedTrading.issueBtcUp", "jump": "i", "offset": [2352, 2389], "op": "JUMP", "path": "8"}, "710": {"offset": [2150, 2180], "op": "JUMPDEST", "path": "8"}, "711": {"fn": "LeveragedTrading.issueBtcUp", "offset": [2150, 2180], "op": "PUSH1", "path": "8", "value": "0x5"}, "713": {"fn": "LeveragedTrading.issueBtcUp", "offset": [2150, 2180], "op": "SLOAD", "path": "8"}, "714": {"fn": "LeveragedTrading.issueBtcUp", "offset": [2150, 2180], "op": "DUP2", "path": "8"}, "715": {"fn": "LeveragedTrading.issueBtcUp", "jump": "o", "offset": [2150, 2180], "op": "JUMP", "path": "8"}, "716": {"offset": [1980, 2017], "op": "JUMPDEST", "path": "8"}, "717": {"fn": "LeveragedTrading.issueBtcUp", "offset": [1980, 2017], "op": "PUSH1", "path": "8", "value": "0x2"}, "719": {"fn": "LeveragedTrading.issueBtcUp", "offset": [1980, 2017], "op": "SLOAD", "path": "8"}, "720": {"fn": "LeveragedTrading.issueBtcUp", "offset": [1980, 2017], "op": "DUP2", "path": "8"}, "721": {"fn": "LeveragedTrading.issueBtcUp", "jump": "o", "offset": [1980, 2017], "op": "JUMP", "path": "8"}, "722": {"offset": [2107, 2143], "op": "JUMPDEST", "path": "8"}, "723": {"fn": "LeveragedTrading.issueBtcUp", "offset": [2107, 2143], "op": "PUSH1", "path": "8", "value": "0x4"}, "725": {"fn": "LeveragedTrading.issueBtcUp", "offset": [2107, 2143], "op": "SLOAD", "path": "8"}, "726": {"fn": "LeveragedTrading.issueBtcUp", "offset": [2107, 2143], "op": "DUP2", "path": "8"}, "727": {"fn": "LeveragedTrading.issueBtcUp", "jump": "o", "offset": [2107, 2143], "op": "JUMP", "path": "8"}, "728": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7878, 7985], "op": "JUMPDEST", "path": "8"}, "729": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7956], "op": "PUSH1", "path": "8", "statement": 0, "value": "0xA"}, "731": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7956], "op": "SLOAD", "path": "8"}, "732": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "PUSH1", "path": "8", "value": "0x40"}, "734": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "MLOAD", "path": "8"}, "735": {"op": "PUSH4", "value": "0x70A08231"}, "740": {"op": "PUSH1", "value": "0xE0"}, "742": {"op": "SHL"}, "743": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "DUP2", "path": "8"}, "744": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "MSTORE", "path": "8"}, "745": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7925, 7932], "op": "PUSH1", "path": "8", "value": "0x0"}, "747": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7925, 7932], "op": "SWAP2", "path": "8"}, "748": {"op": "PUSH1", "value": "0x1"}, "750": {"op": "PUSH1", "value": "0x1"}, "752": {"op": "PUSH1", "value": "0xA0"}, "754": {"op": "SHL"}, "755": {"op": "SUB"}, "756": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7956], "op": "AND", "path": "8"}, "757": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7956], "op": "SWAP1", "path": "8"}, "758": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7966], "op": "PUSH4", "path": "8", "value": "0x70A08231"}, "763": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7966], "op": "SWAP1", "path": "8"}, "764": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "PUSH3", "path": "8", "value": "0x30B"}, "768": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "SWAP1", "path": "8"}, "769": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7967, 7977], "op": "CALLER", "path": "8"}, "770": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7967, 7977], "op": "SWAP1", "path": "8"}, "771": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "PUSH1", "path": "8", "value": "0x4"}, "773": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "ADD", "path": "8"}, "774": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "PUSH3", "path": "8", "value": "0xF70"}, "778": {"fn": "LeveragedTrading.getBtcupBalance", "jump": "i", "offset": [7951, 7978], "op": "JUMP", "path": "8"}, "779": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "JUMPDEST", "path": "8"}, "780": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "PUSH1", "path": "8", "value": "0x20"}, "782": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "PUSH1", "path": "8", "value": "0x40"}, "784": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "MLOAD", "path": "8"}, "785": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "DUP1", "path": "8"}, "786": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "DUP4", "path": "8"}, "787": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "SUB", "path": "8"}, "788": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "DUP2", "path": "8"}, "789": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "DUP7", "path": "8"}, "790": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "DUP1", "path": "8"}, "791": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "EXTCODESIZE", "path": "8"}, "792": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "ISZERO", "path": "8"}, "793": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "DUP1", "path": "8"}, "794": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "ISZERO", "path": "8"}, "795": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "PUSH3", "path": "8", "value": "0x324"}, "799": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "JUMPI", "path": "8"}, "800": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "PUSH1", "path": "8", "value": "0x0"}, "802": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "DUP1", "path": "8"}, "803": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "REVERT", "path": "8"}, "804": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "JUMPDEST", "path": "8"}, "805": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "POP", "path": "8"}, "806": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "GAS", "path": "8"}, "807": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "STATICCALL", "path": "8"}, "808": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "ISZERO", "path": "8"}, "809": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "DUP1", "path": "8"}, "810": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "ISZERO", "path": "8"}, "811": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "PUSH3", "path": "8", "value": "0x339"}, "815": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "JUMPI", "path": "8"}, "816": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "RETURNDATASIZE", "path": "8"}, "817": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "PUSH1", "path": "8", "value": "0x0"}, "819": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "DUP1", "path": "8"}, "820": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "RETURNDATACOPY", "path": "8"}, "821": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "RETURNDATASIZE", "path": "8"}, "822": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "PUSH1", "path": "8", "value": "0x0"}, "824": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "REVERT", "path": "8"}, "825": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "JUMPDEST", "path": "8"}, "826": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "POP", "path": "8"}, "827": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "POP", "path": "8"}, "828": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "POP", "path": "8"}, "829": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "POP", "path": "8"}, "830": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "PUSH1", "path": "8", "value": "0x40"}, "832": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "MLOAD", "path": "8"}, "833": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "RETURNDATASIZE", "path": "8"}, "834": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "PUSH1", "path": "8", "value": "0x1F"}, "836": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "NOT", "path": "8"}, "837": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "PUSH1", "path": "8", "value": "0x1F"}, "839": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "DUP3", "path": "8"}, "840": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "ADD", "path": "8"}, "841": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "AND", "path": "8"}, "842": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "DUP3", "path": "8"}, "843": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "ADD", "path": "8"}, "844": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "DUP1", "path": "8"}, "845": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "PUSH1", "path": "8", "value": "0x40"}, "847": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "MSTORE", "path": "8"}, "848": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "POP", "path": "8"}, "849": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "DUP2", "path": "8"}, "850": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "ADD", "path": "8"}, "851": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "SWAP1", "path": "8"}, "852": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "PUSH3", "path": "8", "value": "0x35F"}, "856": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "SWAP2", "path": "8"}, "857": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "SWAP1", "path": "8"}, "858": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "PUSH3", "path": "8", "value": "0xF03"}, "862": {"fn": "LeveragedTrading.getBtcupBalance", "jump": "i", "offset": [7951, 7978], "op": "JUMP", "path": "8"}, "863": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7951, 7978], "op": "JUMPDEST", "path": "8"}, "864": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7944, 7978], "op": "SWAP1", "path": "8"}, "865": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7944, 7978], "op": "POP", "path": "8"}, "866": {"fn": "LeveragedTrading.getBtcupBalance", "offset": [7878, 7985], "op": "SWAP1", "path": "8"}, "867": {"fn": "LeveragedTrading.getBtcupBalance", "jump": "o", "offset": [7878, 7985], "op": "JUMP", "path": "8"}, "868": {"fn": "LeveragedTrading.getBtcPrice", "offset": [6885, 7202], "op": "JUMPDEST", "path": "8"}, "869": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7004, 7021], "op": "PUSH1", "path": "8", "value": "0x9"}, "871": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7004, 7021], "op": "SLOAD", "path": "8"}, "872": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "PUSH1", "path": "8", "value": "0x40"}, "874": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "DUP1", "path": "8"}, "875": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "MLOAD", "path": "8"}, "876": {"op": "PUSH4", "value": "0x3FABE5A3"}, "881": {"op": "PUSH1", "value": "0xE2"}, "883": {"op": "SHL"}, "884": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "DUP2", "path": "8"}, "885": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "MSTORE", "path": "8"}, "886": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "SWAP1", "path": "8"}, "887": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "MLOAD", "path": "8"}, "888": {"fn": "LeveragedTrading.getBtcPrice", "offset": [6929, 6936], "op": "PUSH1", "path": "8", "value": "0x0"}, "890": {"fn": "LeveragedTrading.getBtcPrice", "offset": [6929, 6936], "op": "SWAP3", "path": "8"}, "891": {"op": "PUSH1", "value": "0x1"}, "893": {"op": "PUSH1", "value": "0x1"}, "895": {"op": "PUSH1", "value": "0xA0"}, "897": {"op": "SHL"}, "898": {"op": "SUB"}, "899": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7004, 7021], "op": "AND", "path": "8"}, "900": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7004, 7021], "op": "SWAP2", "path": "8"}, "901": {"fn": "LeveragedTrading.getBtcPrice", "offset": [6929, 6936], "op": "DUP4", "path": "8"}, "902": {"fn": "LeveragedTrading.getBtcPrice", "offset": [6929, 6936], "op": "SWAP2", "path": "8"}, "903": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7004, 7021], "op": "DUP4", "path": "8"}, "904": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7004, 7021], "op": "SWAP2", "path": "8"}, "905": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7079], "op": "PUSH4", "path": "8", "value": "0xFEAF968C"}, "910": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7079], "op": "SWAP2", "path": "8"}, "911": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "PUSH1", "path": "8", "value": "0x4"}, "913": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "DUP1", "path": "8"}, "914": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "DUP4", "path": "8"}, "915": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "ADD", "path": "8"}, "916": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "SWAP3", "path": "8"}, "917": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "PUSH1", "path": "8", "value": "0xA0"}, "919": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "SWAP3", "path": "8"}, "920": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "SWAP2", "path": "8"}, "921": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "SWAP1", "path": "8"}, "922": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "DUP3", "path": "8"}, "923": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "SWAP1", "path": "8"}, "924": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "SUB", "path": "8"}, "925": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "ADD", "path": "8"}, "926": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "DUP2", "path": "8"}, "927": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7004, 7021], "op": "DUP7", "path": "8"}, "928": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "DUP1", "path": "8"}, "929": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "EXTCODESIZE", "path": "8"}, "930": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "ISZERO", "path": "8"}, "931": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "DUP1", "path": "8"}, "932": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "ISZERO", "path": "8"}, "933": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "PUSH3", "path": "8", "value": "0x3AE"}, "937": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "JUMPI", "path": "8"}, "938": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "PUSH1", "path": "8", "value": "0x0"}, "940": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "DUP1", "path": "8"}, "941": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "REVERT", "path": "8"}, "942": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "JUMPDEST", "path": "8"}, "943": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "POP", "path": "8"}, "944": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "GAS", "path": "8"}, "945": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "STATICCALL", "path": "8"}, "946": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "ISZERO", "path": "8"}, "947": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "DUP1", "path": "8"}, "948": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "ISZERO", "path": "8"}, "949": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "PUSH3", "path": "8", "value": "0x3C3"}, "953": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "JUMPI", "path": "8"}, "954": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "RETURNDATASIZE", "path": "8"}, "955": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "PUSH1", "path": "8", "value": "0x0"}, "957": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "DUP1", "path": "8"}, "958": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "RETURNDATACOPY", "path": "8"}, "959": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "RETURNDATASIZE", "path": "8"}, "960": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "PUSH1", "path": "8", "value": "0x0"}, "962": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "REVERT", "path": "8"}, "963": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "JUMPDEST", "path": "8"}, "964": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "POP", "path": "8"}, "965": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "POP", "path": "8"}, "966": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "POP", "path": "8"}, "967": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "POP", "path": "8"}, "968": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "PUSH1", "path": "8", "value": "0x40"}, "970": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "MLOAD", "path": "8"}, "971": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "RETURNDATASIZE", "path": "8"}, "972": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "PUSH1", "path": "8", "value": "0x1F"}, "974": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "NOT", "path": "8"}, "975": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "PUSH1", "path": "8", "value": "0x1F"}, "977": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "DUP3", "path": "8"}, "978": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "ADD", "path": "8"}, "979": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "AND", "path": "8"}, "980": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "DUP3", "path": "8"}, "981": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "ADD", "path": "8"}, "982": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "DUP1", "path": "8"}, "983": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "PUSH1", "path": "8", "value": "0x40"}, "985": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "MSTORE", "path": "8"}, "986": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "POP", "path": "8"}, "987": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "DUP2", "path": "8"}, "988": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "ADD", "path": "8"}, "989": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "SWAP1", "path": "8"}, "990": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "PUSH3", "path": "8", "value": "0x3E9"}, "994": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "SWAP2", "path": "8"}, "995": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "SWAP1", "path": "8"}, "996": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "PUSH3", "path": "8", "value": "0xF1C"}, "1000": {"fn": "LeveragedTrading.getBtcPrice", "jump": "i", "offset": [7054, 7081], "op": "JUMP", "path": "8"}, "1001": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7054, 7081], "op": "JUMPDEST", "path": "8"}, "1002": {"op": "POP"}, "1003": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7032, 7081], "op": "SWAP2", "path": "8"}, "1004": {"fn": "LeveragedTrading.getBtcPrice", "offset": [7032, 7081], "op": "SWAP6", "path": "8"}, "1005": {"op": "POP"}, "1006": {"op": "POP"}, "1007": {"op": "POP"}, "1008": {"op": "POP"}, "1009": {"op": "POP"}, "1010": {"op": "POP"}, "1011": {"fn": "LeveragedTrading.getBtcPrice", "offset": [6885, 7202], "op": "SWAP1", "path": "8"}, "1012": {"fn": "LeveragedTrading.getBtcPrice", "jump": "o", "offset": [6885, 7202], "op": "JUMP", "path": "8"}, "1013": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5169, 5822], "op": "JUMPDEST", "path": "8"}, "1014": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5222, 5238], "op": "PUSH1", "path": "8", "value": "0x0"}, "1016": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5241, 5254], "op": "PUSH3", "path": "8", "value": "0x401"}, "1020": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5241, 5252], "op": "PUSH3", "path": "8", "value": "0x364"}, "1024": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "jump": "i", "offset": [5241, 5254], "op": "JUMP", "path": "8"}, "1025": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5241, 5254], "op": "JUMPDEST", "path": "8"}, "1026": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5222, 5254], "op": "SWAP1", "path": "8"}, "1027": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5222, 5254], "op": "POP", "path": "8"}, "1028": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5287, 5288], "op": "PUSH1", "path": "8", "value": "0x0"}, "1030": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5269, 5284], "op": "PUSH1", "path": "8", "value": "0x3"}, "1032": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5269, 5284], "op": "SLOAD", "path": "8"}, "1033": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5269, 5288], "op": "GT", "path": "8"}, "1034": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5268, 5316], "op": "DUP1", "path": "8"}, "1035": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5268, 5316], "op": "ISZERO", "path": "8"}, "1036": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5268, 5316], "op": "PUSH3", "path": "8", "value": "0x418"}, "1040": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5268, 5316], "op": "JUMPI", "path": "8"}, "1041": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5268, 5316], "op": "POP", "path": "8"}, "1042": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5314, 5315], "op": "PUSH1", "path": "8", "value": "0x0"}, "1044": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5294, 5311], "op": "PUSH1", "path": "8", "value": "0x4"}, "1046": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5294, 5311], "op": "SLOAD", "path": "8"}, "1047": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5294, 5315], "op": "GT", "path": "8"}, "1048": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5268, 5316], "op": "JUMPDEST", "path": "8"}, "1049": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5264, 5783], "op": "ISZERO", "path": "8"}, "1050": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5264, 5783], "op": "PUSH3", "path": "8", "value": "0x492"}, "1054": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5264, 5783], "op": "JUMPI", "path": "8"}, "1055": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5332, 5355], "op": "PUSH1", "path": "8", "value": "0x0"}, "1057": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5358, 5386], "op": "PUSH3", "path": "8", "value": "0x42B"}, "1061": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5377, 5385], "op": "DUP3", "path": "8"}, "1062": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5358, 5376], "op": "PUSH3", "path": "8", "value": "0xC6B"}, "1066": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "jump": "i", "offset": [5358, 5386], "op": "JUMP", "path": "8"}, "1067": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5358, 5386], "op": "JUMPDEST", "path": "8"}, "1068": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5332, 5386], "op": "SWAP1", "path": "8"}, "1069": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5332, 5386], "op": "POP", "path": "8"}, "1070": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5424, 5425], "op": "PUSH1", "path": "8", "value": "0x0"}, "1072": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5404, 5421], "op": "PUSH3", "path": "8", "value": "0x43A"}, "1076": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5412, 5420], "op": "DUP4", "path": "8"}, "1077": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5404, 5411], "op": "PUSH3", "path": "8", "value": "0xCB2"}, "1081": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "jump": "i", "offset": [5404, 5421], "op": "JUMP", "path": "8"}, "1082": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5404, 5421], "op": "JUMPDEST", "path": "8"}, "1083": {"branch": 57, "fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5404, 5425], "op": "SGT", "path": "8"}, "1084": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5400, 5772], "op": "ISZERO", "path": "8"}, "1085": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5400, 5772], "op": "PUSH3", "path": "8", "value": "0x46B"}, "1089": {"branch": 57, "fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5400, 5772], "op": "JUMPI", "path": "8"}, "1090": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5463, 5478], "op": "PUSH1", "path": "8", "statement": 1, "value": "0x3"}, "1092": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5463, 5478], "op": "SLOAD", "path": "8"}, "1093": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5463, 5499], "op": "PUSH3", "path": "8", "value": "0x450"}, "1097": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5463, 5499], "op": "SWAP1", "path": "8"}, "1098": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5483, 5498], "op": "DUP3", "path": "8"}, "1099": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5463, 5482], "op": "PUSH3", "path": "8", "value": "0xCD2"}, "1103": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "jump": "i", "offset": [5463, 5499], "op": "JUMP", "path": "8"}, "1104": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5463, 5499], "op": "JUMPDEST", "path": "8"}, "1105": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5445, 5460], "op": "PUSH1", "path": "8", "value": "0x3"}, "1107": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5445, 5499], "op": "SSTORE", "path": "8"}, "1108": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5537, 5554], "op": "PUSH1", "path": "8", "statement": 2, "value": "0x4"}, "1110": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5537, 5554], "op": "SLOAD", "path": "8"}, "1111": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5537, 5575], "op": "PUSH3", "path": "8", "value": "0x462"}, "1115": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5537, 5575], "op": "SWAP1", "path": "8"}, "1116": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5559, 5574], "op": "DUP3", "path": "8"}, "1117": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5537, 5558], "op": "PUSH3", "path": "8", "value": "0xCE7"}, "1121": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "jump": "i", "offset": [5537, 5575], "op": "JUMP", "path": "8"}, "1122": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5537, 5575], "op": "JUMPDEST", "path": "8"}, "1123": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5517, 5534], "op": "PUSH1", "path": "8", "value": "0x4"}, "1125": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5517, 5575], "op": "SSTORE", "path": "8"}, "1126": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5400, 5772], "op": "PUSH3", "path": "8", "value": "0x490"}, "1130": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5400, 5772], "op": "JUMP", "path": "8"}, "1131": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5400, 5772], "op": "JUMPDEST", "path": "8"}, "1132": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5645, 5660], "op": "PUSH1", "path": "8", "statement": 3, "value": "0x3"}, "1134": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5645, 5660], "op": "SLOAD", "path": "8"}, "1135": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5645, 5681], "op": "PUSH3", "path": "8", "value": "0x47A"}, "1139": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5645, 5681], "op": "SWAP1", "path": "8"}, "1140": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5665, 5680], "op": "DUP3", "path": "8"}, "1141": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5645, 5664], "op": "PUSH3", "path": "8", "value": "0xCE7"}, "1145": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "jump": "i", "offset": [5645, 5681], "op": "JUMP", "path": "8"}, "1146": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5645, 5681], "op": "JUMPDEST", "path": "8"}, "1147": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5627, 5642], "op": "PUSH1", "path": "8", "value": "0x3"}, "1149": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5627, 5681], "op": "SSTORE", "path": "8"}, "1150": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5719, 5736], "op": "PUSH1", "path": "8", "statement": 4, "value": "0x4"}, "1152": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5719, 5736], "op": "SLOAD", "path": "8"}, "1153": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5719, 5757], "op": "PUSH3", "path": "8", "value": "0x48C"}, "1157": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5719, 5757], "op": "SWAP1", "path": "8"}, "1158": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5741, 5756], "op": "DUP3", "path": "8"}, "1159": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5719, 5740], "op": "PUSH3", "path": "8", "value": "0xCD2"}, "1163": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "jump": "i", "offset": [5719, 5757], "op": "JUMP", "path": "8"}, "1164": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5719, 5757], "op": "JUMPDEST", "path": "8"}, "1165": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5699, 5716], "op": "PUSH1", "path": "8", "value": "0x4"}, "1167": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5699, 5757], "op": "SSTORE", "path": "8"}, "1168": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5400, 5772], "op": "JUMPDEST", "path": "8"}, "1169": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5264, 5783], "op": "POP", "path": "8"}, "1170": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5264, 5783], "op": "JUMPDEST", "path": "8"}, "1171": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5792, 5804], "op": "PUSH1", "path": "8", "statement": 5, "value": "0x7"}, "1173": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "offset": [5792, 5815], "op": "SSTORE", "path": "8"}, "1174": {"fn": "LeveragedTrading.rebalanceLeveragedTokens", "jump": "o", "offset": [5169, 5822], "op": "JUMP", "path": "8"}, "1175": {"fn": "Ownable.renounceOwnership", "offset": [1605, 1697], "op": "JUMPDEST", "path": "0"}, "1176": {"offset": [1196, 1208], "op": "PUSH3", "path": "0", "value": "0x4A1"}, "1180": {"offset": [1196, 1206], "op": "PUSH3", "path": "0", "value": "0xCF5"}, "1184": {"jump": "i", "offset": [1196, 1208], "op": "JUMP", "path": "0"}, "1185": {"fn": "Ownable.renounceOwnership", "offset": [1196, 1208], "op": "JUMPDEST", "path": "0"}, "1186": {"op": "PUSH1", "value": "0x1"}, "1188": {"op": "PUSH1", "value": "0x1"}, "1190": {"op": "PUSH1", "value": "0xA0"}, "1192": {"op": "SHL"}, "1193": {"op": "SUB"}, "1194": {"offset": [1185, 1208], "op": "AND", "path": "0"}, "1195": {"offset": [1185, 1192], "op": "PUSH3", "path": "0", "value": "0x4B4"}, "1199": {"offset": [1185, 1190], "op": "PUSH3", "path": "0", "value": "0x536"}, "1203": {"jump": "i", "offset": [1185, 1192], "op": "JUMP", "path": "0"}, "1204": {"fn": "Ownable.renounceOwnership", "offset": [1185, 1192], "op": "JUMPDEST", "path": "0"}, "1205": {"op": "PUSH1", "value": "0x1"}, "1207": {"op": "PUSH1", "value": "0x1"}, "1209": {"op": "PUSH1", "value": "0xA0"}, "1211": {"op": "SHL"}, "1212": {"op": "SUB"}, "1213": {"offset": [1185, 1208], "op": "AND", "path": "0"}, "1214": {"fn": "Ownable.renounceOwnership", "offset": [1185, 1208], "op": "EQ", "path": "0"}, "1215": {"offset": [1177, 1245], "op": "PUSH3", "path": "0", "value": "0x4E6"}, "1219": {"offset": [1177, 1245], "op": "JUMPI", "path": "0"}, "1220": {"fn": "Ownable.renounceOwnership", "offset": [1177, 1245], "op": "PUSH1", "path": "0", "value": "0x40"}, "1222": {"fn": "Ownable.renounceOwnership", "offset": [1177, 1245], "op": "MLOAD", "path": "0"}, "1223": {"op": "PUSH3", "value": "0x461BCD"}, "1227": {"op": "PUSH1", "value": "0xE5"}, "1229": {"op": "SHL"}, "1230": {"offset": [1177, 1245], "op": "DUP2", "path": "0"}, "1231": {"fn": "Ownable.renounceOwnership", "offset": [1177, 1245], "op": "MSTORE", "path": "0"}, "1232": {"fn": "Ownable.renounceOwnership", "offset": [1177, 1245], "op": "PUSH1", "path": "0", "value": "0x4"}, "1234": {"fn": "Ownable.renounceOwnership", "offset": [1177, 1245], "op": "ADD", "path": "0"}, "1235": {"fn": "Ownable.renounceOwnership", "offset": [1177, 1245], "op": "PUSH3", "path": "0", "value": "0x4DD"}, "1239": {"fn": "Ownable.renounceOwnership", "offset": [1177, 1245], "op": "SWAP1", "path": "0"}, "1240": {"fn": "Ownable.renounceOwnership", "offset": [1177, 1245], "op": "PUSH3", "path": "0", "value": "0x1049"}, "1244": {"fn": "Ownable.renounceOwnership", "jump": "i", "offset": [1177, 1245], "op": "JUMP", "path": "0"}, "1245": {"fn": "Ownable.renounceOwnership", "offset": [1177, 1245], "op": "JUMPDEST", "path": "0"}, "1246": {"fn": "Ownable.renounceOwnership", "offset": [1177, 1245], "op": "PUSH1", "path": "0", "value": "0x40"}, "1248": {"fn": "Ownable.renounceOwnership", "offset": [1177, 1245], "op": "MLOAD", "path": "0"}, "1249": {"fn": "Ownable.renounceOwnership", "offset": [1177, 1245], "op": "DUP1", "path": "0"}, "1250": {"fn": "Ownable.renounceOwnership", "offset": [1177, 1245], "op": "SWAP2", "path": "0"}, "1251": {"fn": "Ownable.renounceOwnership", "offset": [1177, 1245], "op": "SUB", "path": "0"}, "1252": {"fn": "Ownable.renounceOwnership", "offset": [1177, 1245], "op": "SWAP1", "path": "0"}, "1253": {"fn": "Ownable.renounceOwnership", "offset": [1177, 1245], "op": "REVERT", "optimizer_revert": true, "path": "0"}, "1254": {"fn": "Ownable.renounceOwnership", "offset": [1177, 1245], "op": "JUMPDEST", "path": "0"}, "1255": {"fn": "Ownable.renounceOwnership", "offset": [1669, 1690], "op": "PUSH3", "path": "0", "statement": 6, "value": "0x4F2"}, "1259": {"fn": "Ownable.renounceOwnership", "offset": [1687, 1688], "op": "PUSH1", "path": "0", "value": "0x0"}, "1261": {"fn": "Ownable.renounceOwnership", "offset": [1669, 1678], "op": "PUSH3", "path": "0", "value": "0xCF9"}, "1265": {"fn": "Ownable.renounceOwnership", "jump": "i", "offset": [1669, 1690], "op": "JUMP", "path": "0"}, "1266": {"fn": "Ownable.renounceOwnership", "offset": [1669, 1690], "op": "JUMPDEST", "path": "0"}, "1267": {"fn": "Ownable.renounceOwnership", "jump": "o", "offset": [1605, 1697], "op": "JUMP", "path": "0"}, "1268": {"fn": "LeveragedTrading.getBtcDownPrice", "offset": [6654, 6833], "op": "JUMPDEST", "path": "8"}, "1269": {"fn": "LeveragedTrading.getBtcDownPrice", "offset": [6702, 6709], "op": "PUSH1", "path": "8", "value": "0x0"}, "1271": {"fn": "LeveragedTrading.getBtcDownPrice", "offset": [6740, 6753], "op": "PUSH1", "path": "8", "statement": 7, "value": "0x6"}, "1273": {"fn": "LeveragedTrading.getBtcDownPrice", "offset": [6740, 6753], "op": "SLOAD", "path": "8"}, "1274": {"fn": "LeveragedTrading.getBtcDownPrice", "offset": [6757, 6758], "op": "PUSH1", "path": "8", "value": "0x0"}, "1276": {"branch": 58, "fn": "LeveragedTrading.getBtcDownPrice", "offset": [6740, 6758], "op": "EQ", "path": "8"}, "1277": {"fn": "LeveragedTrading.getBtcDownPrice", "offset": [6740, 6826], "op": "PUSH3", "path": "8", "value": "0x52F"}, "1281": {"branch": 58, "fn": "LeveragedTrading.getBtcDownPrice", "offset": [6740, 6826], "op": "JUMPI", "path": "8"}, "1282": {"fn": "LeveragedTrading.getBtcDownPrice", "offset": [6777, 6826], "op": "PUSH3", "path": "8", "value": "0x529"}, "1286": {"fn": "LeveragedTrading.getBtcDownPrice", "offset": [6812, 6825], "op": "PUSH1", "path": "8", "value": "0x6"}, "1288": {"fn": "LeveragedTrading.getBtcDownPrice", "offset": [6812, 6825], "op": "SLOAD", "path": "8"}, "1289": {"fn": "LeveragedTrading.getBtcDownPrice", "offset": [6777, 6807], "op": "PUSH3", "path": "8", "value": "0x522"}, "1293": {"fn": "LeveragedTrading.getBtcDownPrice", "offset": [6799, 6806], "op": "PUSH3", "path": "8", "value": "0xF4240"}, "1297": {"fn": "LeveragedTrading.getBtcDownPrice", "offset": [6777, 6794], "op": "PUSH1", "path": "8", "value": "0x4"}, "1299": {"fn": "LeveragedTrading.getBtcDownPrice", "offset": [6777, 6794], "op": "SLOAD", "path": "8"}, "1300": {"fn": "LeveragedTrading.getBtcDownPrice", "offset": [6777, 6798], "op": "PUSH3", "path": "8", "value": "0xD49"}, "1304": {"fn": "LeveragedTrading.getBtcDownPrice", "offset": [6777, 6798], "op": "SWAP1", "path": "8"}, "1305": {"fn": "LeveragedTrading.getBtcDownPrice", "offset": [6777, 6807], "op": "SWAP2", "path": "8"}, "1306": {"fn": "LeveragedTrading.getBtcDownPrice", "offset": [6777, 6807], "op": "SWAP1", "path": "8"}, "1307": {"fn": "LeveragedTrading.getBtcDownPrice", "offset": [6777, 6807], "op": "PUSH4", "path": "8", "value": "0xFFFFFFFF"}, "1312": {"fn": "LeveragedTrading.getBtcDownPrice", "offset": [6777, 6807], "op": "AND", "path": "8"}, "1313": {"fn": "LeveragedTrading.getBtcDownPrice", "jump": "i", "offset": [6777, 6807], "op": "JUMP", "path": "8"}, "1314": {"fn": "LeveragedTrading.getBtcDownPrice", "offset": [6777, 6807], "op": "JUMPDEST", "path": "8"}, "1315": {"fn": "LeveragedTrading.getBtcDownPrice", "offset": [6777, 6811], "op": "SWAP1", "path": "8"}, "1316": {"fn": "LeveragedTrading.getBtcDownPrice", "offset": [6777, 6811], "op": "PUSH3", "path": "8", "value": "0xD57"}, "1320": {"fn": "LeveragedTrading.getBtcDownPrice", "jump": "i", "offset": [6777, 6826], "op": "JUMP", "path": "8"}, "1321": {"fn": "LeveragedTrading.getBtcDownPrice", "offset": [6777, 6826], "op": "JUMPDEST", "path": "8"}, "1322": {"fn": "LeveragedTrading.getBtcDownPrice", "offset": [6740, 6826], "op": "PUSH3", "path": "8", "value": "0x35F"}, "1326": {"fn": "LeveragedTrading.getBtcDownPrice", "offset": [6740, 6826], "op": "JUMP", "path": "8"}, "1327": {"fn": "LeveragedTrading.getBtcDownPrice", "offset": [6740, 6826], "op": "JUMPDEST", "path": "8"}, "1328": {"op": "POP"}, "1329": {"fn": "LeveragedTrading.getBtcDownPrice", "offset": [6762, 6774], "op": "PUSH1", "path": "8", "value": "0x2"}, "1331": {"fn": "LeveragedTrading.getBtcDownPrice", "offset": [6762, 6774], "op": "SLOAD", "path": "8"}, "1332": {"fn": "LeveragedTrading.getBtcDownPrice", "offset": [6762, 6774], "op": "SWAP1", "path": "8"}, "1333": {"fn": "LeveragedTrading.getBtcDownPrice", "jump": "o", "offset": [6654, 6833], "op": "JUMP", "path": "8"}, "1334": {"fn": "Ownable.owner", "offset": [973, 1058], "op": "JUMPDEST", "path": "0"}, "1335": {"fn": "Ownable.owner", "offset": [1019, 1026], "op": "PUSH1", "path": "0", "value": "0x0"}, "1337": {"fn": "Ownable.owner", "offset": [1045, 1051], "op": "SLOAD", "path": "0", "statement": 8}, "1338": {"op": "PUSH1", "value": "0x1"}, "1340": {"op": "PUSH1", "value": "0x1"}, "1342": {"op": "PUSH1", "value": "0xA0"}, "1344": {"op": "SHL"}, "1345": {"op": "SUB"}, "1346": {"fn": "Ownable.owner", "offset": [1045, 1051], "op": "AND", "path": "0"}, "1347": {"fn": "Ownable.owner", "offset": [973, 1058], "op": "SWAP1", "path": "0"}, "1348": {"fn": "Ownable.owner", "jump": "o", "offset": [973, 1058], "op": "JUMP", "path": "0"}, "1349": {"fn": "LeveragedTrading.initializePool", "offset": [2711, 3056], "op": "JUMPDEST", "path": "8"}, "1350": {"offset": [1196, 1208], "op": "PUSH3", "path": "0", "value": "0x54F"}, "1354": {"offset": [1196, 1206], "op": "PUSH3", "path": "0", "value": "0xCF5"}, "1358": {"jump": "i", "offset": [1196, 1208], "op": "JUMP", "path": "0"}, "1359": {"fn": "LeveragedTrading.initializePool", "offset": [1196, 1208], "op": "JUMPDEST", "path": "0"}, "1360": {"op": "PUSH1", "value": "0x1"}, "1362": {"op": "PUSH1", "value": "0x1"}, "1364": {"op": "PUSH1", "value": "0xA0"}, "1366": {"op": "SHL"}, "1367": {"op": "SUB"}, "1368": {"offset": [1185, 1208], "op": "AND", "path": "0"}, "1369": {"offset": [1185, 1192], "op": "PUSH3", "path": "0", "value": "0x562"}, "1373": {"offset": [1185, 1190], "op": "PUSH3", "path": "0", "value": "0x536"}, "1377": {"jump": "i", "offset": [1185, 1192], "op": "JUMP", "path": "0"}, "1378": {"fn": "LeveragedTrading.initializePool", "offset": [1185, 1192], "op": "JUMPDEST", "path": "0"}, "1379": {"op": "PUSH1", "value": "0x1"}, "1381": {"op": "PUSH1", "value": "0x1"}, "1383": {"op": "PUSH1", "value": "0xA0"}, "1385": {"op": "SHL"}, "1386": {"op": "SUB"}, "1387": {"offset": [1185, 1208], "op": "AND", "path": "0"}, "1388": {"fn": "LeveragedTrading.initializePool", "offset": [1185, 1208], "op": "EQ", "path": "0"}, "1389": {"offset": [1177, 1245], "op": "PUSH3", "path": "0", "value": "0x58B"}, "1393": {"offset": [1177, 1245], "op": "JUMPI", "path": "0"}, "1394": {"fn": "LeveragedTrading.initializePool", "offset": [1177, 1245], "op": "PUSH1", "path": "0", "value": "0x40"}, "1396": {"fn": "LeveragedTrading.initializePool", "offset": [1177, 1245], "op": "MLOAD", "path": "0"}, "1397": {"op": "PUSH3", "value": "0x461BCD"}, "1401": {"op": "PUSH1", "value": "0xE5"}, "1403": {"op": "SHL"}, "1404": {"offset": [1177, 1245], "op": "DUP2", "path": "0"}, "1405": {"fn": "LeveragedTrading.initializePool", "offset": [1177, 1245], "op": "MSTORE", "path": "0"}, "1406": {"fn": "LeveragedTrading.initializePool", "offset": [1177, 1245], "op": "PUSH1", "path": "0", "value": "0x4"}, "1408": {"fn": "LeveragedTrading.initializePool", "offset": [1177, 1245], "op": "ADD", "path": "0"}, "1409": {"fn": "LeveragedTrading.initializePool", "offset": [1177, 1245], "op": "PUSH3", "path": "0", "value": "0x4DD"}, "1413": {"fn": "LeveragedTrading.initializePool", "offset": [1177, 1245], "op": "SWAP1", "path": "0"}, "1414": {"fn": "LeveragedTrading.initializePool", "offset": [1177, 1245], "op": "PUSH3", "path": "0", "value": "0x1049"}, "1418": {"fn": "LeveragedTrading.initializePool", "jump": "i", "offset": [1177, 1245], "op": "JUMP", "path": "0"}, "1419": {"fn": "LeveragedTrading.initializePool", "offset": [1177, 1245], "op": "JUMPDEST", "path": "0"}, "1420": {"fn": "LeveragedTrading.initializePool", "offset": [2791, 2808], "op": "PUSH1", "path": "8", "statement": 9, "value": "0x8"}, "1422": {"fn": "LeveragedTrading.initializePool", "offset": [2791, 2808], "op": "SLOAD", "path": "8"}, "1423": {"fn": "LeveragedTrading.initializePool", "offset": [2791, 2808], "op": "PUSH1", "path": "8", "value": "0xFF"}, "1425": {"fn": "LeveragedTrading.initializePool", "offset": [2791, 2808], "op": "AND", "path": "8"}, "1426": {"branch": 59, "fn": "LeveragedTrading.initializePool", "offset": [2790, 2808], "op": "ISZERO", "path": "8"}, "1427": {"fn": "LeveragedTrading.initializePool", "offset": [2782, 2844], "op": "PUSH3", "path": "8", "value": "0x5B1"}, "1431": {"branch": 59, "fn": "LeveragedTrading.initializePool", "offset": [2782, 2844], "op": "JUMPI", "path": "8"}, "1432": {"fn": "LeveragedTrading.initializePool", "offset": [2782, 2844], "op": "PUSH1", "path": "8", "value": "0x40"}, "1434": {"fn": "LeveragedTrading.initializePool", "offset": [2782, 2844], "op": "MLOAD", "path": "8"}, "1435": {"op": "PUSH3", "value": "0x461BCD"}, "1439": {"op": "PUSH1", "value": "0xE5"}, "1441": {"op": "SHL"}, "1442": {"fn": "LeveragedTrading.initializePool", "offset": [2782, 2844], "op": "DUP2", "path": "8"}, "1443": {"fn": "LeveragedTrading.initializePool", "offset": [2782, 2844], "op": "MSTORE", "path": "8"}, "1444": {"fn": "LeveragedTrading.initializePool", "offset": [2782, 2844], "op": "PUSH1", "path": "8", "value": "0x4"}, "1446": {"fn": "LeveragedTrading.initializePool", "offset": [2782, 2844], "op": "ADD", "path": "8"}, "1447": {"fn": "LeveragedTrading.initializePool", "offset": [2782, 2844], "op": "PUSH3", "path": "8", "value": "0x4DD"}, "1451": {"fn": "LeveragedTrading.initializePool", "offset": [2782, 2844], "op": "SWAP1", "path": "8"}, "1452": {"fn": "LeveragedTrading.initializePool", "offset": [2782, 2844], "op": "PUSH3", "path": "8", "value": "0x1012"}, "1456": {"fn": "LeveragedTrading.initializePool", "jump": "i", "offset": [2782, 2844], "op": "JUMP", "path": "8"}, "1457": {"fn": "LeveragedTrading.initializePool", "offset": [2782, 2844], "op": "JUMPDEST", "path": "8"}, "1458": {"fn": "LeveragedTrading.initializePool", "offset": [2881, 2885], "op": "ADDRESS", "path": "8", "statement": 10}, "1459": {"fn": "LeveragedTrading.initializePool", "offset": [2863, 2887], "op": "PUSH1", "path": "8", "value": "0x40"}, "1461": {"fn": "LeveragedTrading.initializePool", "offset": [2863, 2887], "op": "MLOAD", "path": "8"}, "1462": {"fn": "LeveragedTrading.initializePool", "offset": [2863, 2887], "op": "PUSH3", "path": "8", "value": "0x5C0"}, "1466": {"fn": "LeveragedTrading.initializePool", "offset": [2863, 2887], "op": "SWAP1", "path": "8"}, "1467": {"fn": "LeveragedTrading.initializePool", "offset": [2863, 2887], "op": "PUSH3", "path": "8", "value": "0xE68"}, "1471": {"fn": "LeveragedTrading.initializePool", "jump": "i", "offset": [2863, 2887], "op": "JUMP", "path": "8"}, "1472": {"fn": "LeveragedTrading.initializePool", "offset": [2863, 2887], "op": "JUMPDEST", "path": "8"}, "1473": {"fn": "LeveragedTrading.initializePool", "offset": [2863, 2887], "op": "PUSH3", "path": "8", "value": "0x5CC"}, "1477": {"fn": "LeveragedTrading.initializePool", "offset": [2863, 2887], "op": "SWAP2", "path": "8"}, "1478": {"fn": "LeveragedTrading.initializePool", "offset": [2863, 2887], "op": "SWAP1", "path": "8"}, "1479": {"fn": "LeveragedTrading.initializePool", "offset": [2863, 2887], "op": "PUSH3", "path": "8", "value": "0xF70"}, "1483": {"fn": "LeveragedTrading.initializePool", "jump": "i", "offset": [2863, 2887], "op": "JUMP", "path": "8"}, "1484": {"fn": "LeveragedTrading.initializePool", "offset": [2863, 2887], "op": "JUMPDEST", "path": "8"}, "1485": {"fn": "LeveragedTrading.initializePool", "offset": [2863, 2887], "op": "PUSH1", "path": "8", "value": "0x40"}, "1487": {"fn": "LeveragedTrading.initializePool", "offset": [2863, 2887], "op": "MLOAD", "path": "8"}, "1488": {"fn": "LeveragedTrading.initializePool", "offset": [2863, 2887], "op": "DUP1", "path": "8"}, "1489": {"fn": "LeveragedTrading.initializePool", "offset": [2863, 2887], "op": "SWAP2", "path": "8"}, "1490": {"fn": "LeveragedTrading.initializePool", "offset": [2863, 2887], "op": "SUB", "path": "8"}, "1491": {"fn": "LeveragedTrading.initializePool", "offset": [2863, 2887], "op": "SWAP1", "path": "8"}, "1492": {"fn": "LeveragedTrading.initializePool", "offset": [2863, 2887], "op": "PUSH1", "path": "8", "value": "0x0"}, "1494": {"fn": "LeveragedTrading.initializePool", "offset": [2863, 2887], "op": "CREATE", "path": "8"}, "1495": {"fn": "LeveragedTrading.initializePool", "offset": [2863, 2887], "op": "DUP1", "path": "8"}, "1496": {"fn": "LeveragedTrading.initializePool", "offset": [2863, 2887], "op": "ISZERO", "path": "8"}, "1497": {"fn": "LeveragedTrading.initializePool", "offset": [2863, 2887], "op": "DUP1", "path": "8"}, "1498": {"fn": "LeveragedTrading.initializePool", "offset": [2863, 2887], "op": "ISZERO", "path": "8"}, "1499": {"fn": "LeveragedTrading.initializePool", "offset": [2863, 2887], "op": "PUSH3", "path": "8", "value": "0x5E9"}, "1503": {"fn": "LeveragedTrading.initializePool", "offset": [2863, 2887], "op": "JUMPI", "path": "8"}, "1504": {"fn": "LeveragedTrading.initializePool", "offset": [2863, 2887], "op": "RETURNDATASIZE", "path": "8"}, "1505": {"fn": "LeveragedTrading.initializePool", "offset": [2863, 2887], "op": "PUSH1", "path": "8", "value": "0x0"}, "1507": {"fn": "LeveragedTrading.initializePool", "offset": [2863, 2887], "op": "DUP1", "path": "8"}, "1508": {"fn": "LeveragedTrading.initializePool", "offset": [2863, 2887], "op": "RETURNDATACOPY", "path": "8"}, "1509": {"fn": "LeveragedTrading.initializePool", "offset": [2863, 2887], "op": "RETURNDATASIZE", "path": "8"}, "1510": {"fn": "LeveragedTrading.initializePool", "offset": [2863, 2887], "op": "PUSH1", "path": "8", "value": "0x0"}, "1512": {"fn": "LeveragedTrading.initializePool", "offset": [2863, 2887], "op": "REVERT", "path": "8"}, "1513": {"fn": "LeveragedTrading.initializePool", "offset": [2863, 2887], "op": "JUMPDEST", "path": "8"}, "1514": {"op": "POP"}, "1515": {"fn": "LeveragedTrading.initializePool", "offset": [2855, 2860], "op": "PUSH1", "path": "8", "value": "0xA"}, "1517": {"fn": "LeveragedTrading.initializePool", "offset": [2855, 2887], "op": "DUP1", "path": "8"}, "1518": {"fn": "LeveragedTrading.initializePool", "offset": [2855, 2887], "op": "SLOAD", "path": "8"}, "1519": {"op": "PUSH1", "value": "0x1"}, "1521": {"op": "PUSH1", "value": "0x1"}, "1523": {"op": "PUSH1", "value": "0xA0"}, "1525": {"op": "SHL"}, "1526": {"op": "SUB"}, "1527": {"op": "NOT"}, "1528": {"fn": "LeveragedTrading.initializePool", "offset": [2855, 2887], "op": "AND", "path": "8"}, "1529": {"op": "PUSH1", "value": "0x1"}, "1531": {"op": "PUSH1", "value": "0x1"}, "1533": {"op": "PUSH1", "value": "0xA0"}, "1535": {"op": "SHL"}, "1536": {"op": "SUB"}, "1537": {"fn": "LeveragedTrading.initializePool", "offset": [2855, 2887], "op": "SWAP3", "path": "8"}, "1538": {"fn": "LeveragedTrading.initializePool", "offset": [2855, 2887], "op": "SWAP1", "path": "8"}, "1539": {"fn": "LeveragedTrading.initializePool", "offset": [2855, 2887], "op": "SWAP3", "path": "8"}, "1540": {"fn": "LeveragedTrading.initializePool", "offset": [2855, 2887], "op": "AND", "path": "8"}, "1541": {"fn": "LeveragedTrading.initializePool", "offset": [2855, 2887], "op": "SWAP2", "path": "8"}, "1542": {"fn": "LeveragedTrading.initializePool", "offset": [2855, 2887], "op": "SWAP1", "path": "8"}, "1543": {"fn": "LeveragedTrading.initializePool", "offset": [2855, 2887], "op": "SWAP2", "path": "8"}, "1544": {"fn": "LeveragedTrading.initializePool", "offset": [2855, 2887], "op": "OR", "path": "8"}, "1545": {"fn": "LeveragedTrading.initializePool", "offset": [2855, 2887], "op": "SWAP1", "path": "8"}, "1546": {"fn": "LeveragedTrading.initializePool", "offset": [2855, 2887], "op": "SSTORE", "path": "8"}, "1547": {"fn": "LeveragedTrading.initializePool", "offset": [2907, 2933], "op": "PUSH1", "path": "8", "statement": 11, "value": "0x40"}, "1549": {"fn": "LeveragedTrading.initializePool", "offset": [2907, 2933], "op": "MLOAD", "path": "8"}, "1550": {"fn": "LeveragedTrading.initializePool", "offset": [2927, 2931], "op": "ADDRESS", "path": "8"}, "1551": {"fn": "LeveragedTrading.initializePool", "offset": [2927, 2931], "op": "SWAP1", "path": "8"}, "1552": {"fn": "LeveragedTrading.initializePool", "offset": [2907, 2933], "op": "PUSH3", "path": "8", "value": "0x61A"}, "1556": {"fn": "LeveragedTrading.initializePool", "offset": [2907, 2933], "op": "SWAP1", "path": "8"}, "1557": {"fn": "LeveragedTrading.initializePool", "offset": [2907, 2933], "op": "PUSH3", "path": "8", "value": "0xE76"}, "1561": {"fn": "LeveragedTrading.initializePool", "jump": "i", "offset": [2907, 2933], "op": "JUMP", "path": "8"}, "1562": {"fn": "LeveragedTrading.initializePool", "offset": [2907, 2933], "op": "JUMPDEST", "path": "8"}, "1563": {"fn": "LeveragedTrading.initializePool", "offset": [2907, 2933], "op": "PUSH3", "path": "8", "value": "0x626"}, "1567": {"fn": "LeveragedTrading.initializePool", "offset": [2907, 2933], "op": "SWAP2", "path": "8"}, "1568": {"fn": "LeveragedTrading.initializePool", "offset": [2907, 2933], "op": "SWAP1", "path": "8"}, "1569": {"fn": "LeveragedTrading.initializePool", "offset": [2907, 2933], "op": "PUSH3", "path": "8", "value": "0xF70"}, "1573": {"fn": "LeveragedTrading.initializePool", "jump": "i", "offset": [2907, 2933], "op": "JUMP", "path": "8"}, "1574": {"fn": "LeveragedTrading.initializePool", "offset": [2907, 2933], "op": "JUMPDEST", "path": "8"}, "1575": {"fn": "LeveragedTrading.initializePool", "offset": [2907, 2933], "op": "PUSH1", "path": "8", "value": "0x40"}, "1577": {"fn": "LeveragedTrading.initializePool", "offset": [2907, 2933], "op": "MLOAD", "path": "8"}, "1578": {"fn": "LeveragedTrading.initializePool", "offset": [2907, 2933], "op": "DUP1", "path": "8"}, "1579": {"fn": "LeveragedTrading.initializePool", "offset": [2907, 2933], "op": "SWAP2", "path": "8"}, "1580": {"fn": "LeveragedTrading.initializePool", "offset": [2907, 2933], "op": "SUB", "path": "8"}, "1581": {"fn": "LeveragedTrading.initializePool", "offset": [2907, 2933], "op": "SWAP1", "path": "8"}, "1582": {"fn": "LeveragedTrading.initializePool", "offset": [2907, 2933], "op": "PUSH1", "path": "8", "value": "0x0"}, "1584": {"fn": "LeveragedTrading.initializePool", "offset": [2907, 2933], "op": "CREATE", "path": "8"}, "1585": {"fn": "LeveragedTrading.initializePool", "offset": [2907, 2933], "op": "DUP1", "path": "8"}, "1586": {"fn": "LeveragedTrading.initializePool", "offset": [2907, 2933], "op": "ISZERO", "path": "8"}, "1587": {"fn": "LeveragedTrading.initializePool", "offset": [2907, 2933], "op": "DUP1", "path": "8"}, "1588": {"fn": "LeveragedTrading.initializePool", "offset": [2907, 2933], "op": "ISZERO", "path": "8"}, "1589": {"fn": "LeveragedTrading.initializePool", "offset": [2907, 2933], "op": "PUSH3", "path": "8", "value": "0x643"}, "1593": {"fn": "LeveragedTrading.initializePool", "offset": [2907, 2933], "op": "JUMPI", "path": "8"}, "1594": {"fn": "LeveragedTrading.initializePool", "offset": [2907, 2933], "op": "RETURNDATASIZE", "path": "8"}, "1595": {"fn": "LeveragedTrading.initializePool", "offset": [2907, 2933], "op": "PUSH1", "path": "8", "value": "0x0"}, "1597": {"fn": "LeveragedTrading.initializePool", "offset": [2907, 2933], "op": "DUP1", "path": "8"}, "1598": {"fn": "LeveragedTrading.initializePool", "offset": [2907, 2933], "op": "RETURNDATACOPY", "path": "8"}, "1599": {"fn": "LeveragedTrading.initializePool", "offset": [2907, 2933], "op": "RETURNDATASIZE", "path": "8"}, "1600": {"fn": "LeveragedTrading.initializePool", "offset": [2907, 2933], "op": "PUSH1", "path": "8", "value": "0x0"}, "1602": {"fn": "LeveragedTrading.initializePool", "offset": [2907, 2933], "op": "REVERT", "path": "8"}, "1603": {"fn": "LeveragedTrading.initializePool", "offset": [2907, 2933], "op": "JUMPDEST", "path": "8"}, "1604": {"op": "POP"}, "1605": {"fn": "LeveragedTrading.initializePool", "offset": [2897, 2904], "op": "PUSH1", "path": "8", "value": "0xB"}, "1607": {"fn": "LeveragedTrading.initializePool", "offset": [2897, 2933], "op": "DUP1", "path": "8"}, "1608": {"fn": "LeveragedTrading.initializePool", "offset": [2897, 2933], "op": "SLOAD", "path": "8"}, "1609": {"op": "PUSH1", "value": "0x1"}, "1611": {"op": "PUSH1", "value": "0x1"}, "1613": {"op": "PUSH1", "value": "0xA0"}, "1615": {"op": "SHL"}, "1616": {"op": "SUB"}, "1617": {"op": "NOT"}, "1618": {"fn": "LeveragedTrading.initializePool", "offset": [2897, 2933], "op": "AND", "path": "8"}, "1619": {"op": "PUSH1", "value": "0x1"}, "1621": {"op": "PUSH1", "value": "0x1"}, "1623": {"op": "PUSH1", "value": "0xA0"}, "1625": {"op": "SHL"}, "1626": {"op": "SUB"}, "1627": {"fn": "LeveragedTrading.initializePool", "offset": [2897, 2933], "op": "SWAP3", "path": "8"}, "1628": {"fn": "LeveragedTrading.initializePool", "offset": [2897, 2933], "op": "SWAP1", "path": "8"}, "1629": {"fn": "LeveragedTrading.initializePool", "offset": [2897, 2933], "op": "SWAP3", "path": "8"}, "1630": {"fn": "LeveragedTrading.initializePool", "offset": [2897, 2933], "op": "AND", "path": "8"}, "1631": {"fn": "LeveragedTrading.initializePool", "offset": [2897, 2933], "op": "SWAP2", "path": "8"}, "1632": {"fn": "LeveragedTrading.initializePool", "offset": [2897, 2933], "op": "SWAP1", "path": "8"}, "1633": {"fn": "LeveragedTrading.initializePool", "offset": [2897, 2933], "op": "SWAP2", "path": "8"}, "1634": {"fn": "LeveragedTrading.initializePool", "offset": [2897, 2933], "op": "OR", "path": "8"}, "1635": {"fn": "LeveragedTrading.initializePool", "offset": [2897, 2933], "op": "SWAP1", "path": "8"}, "1636": {"fn": "LeveragedTrading.initializePool", "offset": [2897, 2933], "op": "SSTORE", "path": "8"}, "1637": {"fn": "LeveragedTrading.initializePool", "offset": [2944, 2973], "op": "PUSH3", "path": "8", "statement": 12, "value": "0x675"}, "1641": {"fn": "LeveragedTrading.initializePool", "offset": [2955, 2972], "op": "PUSH3", "path": "8", "value": "0x2A7"}, "1645": {"fn": "LeveragedTrading.initializePool", "offset": [2955, 2965], "op": "DUP3", "path": "8"}, "1646": {"fn": "LeveragedTrading.initializePool", "offset": [2970, 2971], "op": "PUSH1", "path": "8", "value": "0x2"}, "1648": {"fn": "LeveragedTrading.initializePool", "offset": [2955, 2969], "op": "PUSH3", "path": "8", "value": "0xD57"}, "1652": {"fn": "LeveragedTrading.initializePool", "jump": "i", "offset": [2955, 2972], "op": "JUMP", "path": "8"}, "1653": {"fn": "LeveragedTrading.initializePool", "offset": [2944, 2973], "op": "JUMPDEST", "path": "8"}, "1654": {"fn": "LeveragedTrading.initializePool", "offset": [2983, 3014], "op": "PUSH3", "path": "8", "statement": 13, "value": "0x686"}, "1658": {"fn": "LeveragedTrading.initializePool", "offset": [2996, 3013], "op": "PUSH3", "path": "8", "value": "0x230"}, "1662": {"fn": "LeveragedTrading.initializePool", "offset": [2996, 3006], "op": "DUP3", "path": "8"}, "1663": {"fn": "LeveragedTrading.initializePool", "offset": [3011, 3012], "op": "PUSH1", "path": "8", "value": "0x2"}, "1665": {"fn": "LeveragedTrading.initializePool", "offset": [2996, 3010], "op": "PUSH3", "path": "8", "value": "0xD57"}, "1669": {"fn": "LeveragedTrading.initializePool", "jump": "i", "offset": [2996, 3013], "op": "JUMP", "path": "8"}, "1670": {"fn": "LeveragedTrading.initializePool", "offset": [2983, 3014], "op": "JUMPDEST", "path": "8"}, "1671": {"op": "POP"}, "1672": {"fn": "LeveragedTrading.initializePool", "offset": [3025, 3042], "op": "PUSH1", "path": "8", "statement": 14, "value": "0x8"}, "1674": {"fn": "LeveragedTrading.initializePool", "offset": [3025, 3049], "op": "DUP1", "path": "8"}, "1675": {"fn": "LeveragedTrading.initializePool", "offset": [3025, 3049], "op": "SLOAD", "path": "8"}, "1676": {"op": "PUSH1", "value": "0xFF"}, "1678": {"op": "NOT"}, "1679": {"fn": "LeveragedTrading.initializePool", "offset": [3025, 3049], "op": "AND", "path": "8"}, "1680": {"fn": "LeveragedTrading.initializePool", "offset": [3045, 3049], "op": "PUSH1", "path": "8", "value": "0x1"}, "1682": {"fn": "LeveragedTrading.initializePool", "offset": [3025, 3049], "op": "OR", "path": "8"}, "1683": {"fn": "LeveragedTrading.initializePool", "offset": [3025, 3049], "op": "SWAP1", "path": "8"}, "1684": {"fn": "LeveragedTrading.initializePool", "offset": [3025, 3049], "op": "SSTORE", "path": "8"}, "1685": {"fn": "LeveragedTrading.initializePool", "jump": "o", "offset": [2711, 3056], "op": "JUMP", "path": "8"}, "1686": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4650, 5163], "op": "JUMPDEST", "path": "8"}, "1687": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4721, 4747], "op": "PUSH3", "path": "8", "statement": 15, "value": "0x6A0"}, "1691": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4721, 4745], "op": "PUSH3", "path": "8", "value": "0x3F5"}, "1695": {"fn": "LeveragedTrading.redeemBtcDown", "jump": "i", "offset": [4721, 4747], "op": "JUMP", "path": "8"}, "1696": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4721, 4747], "op": "JUMPDEST", "path": "8"}, "1697": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4764], "op": "PUSH1", "path": "8", "statement": 16, "value": "0xB"}, "1699": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4764], "op": "SLOAD", "path": "8"}, "1700": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "PUSH1", "path": "8", "value": "0x40"}, "1702": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "MLOAD", "path": "8"}, "1703": {"op": "PUSH4", "value": "0x852CD8D"}, "1708": {"op": "PUSH1", "value": "0xE3"}, "1710": {"op": "SHL"}, "1711": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "DUP2", "path": "8"}, "1712": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "MSTORE", "path": "8"}, "1713": {"op": "PUSH1", "value": "0x1"}, "1715": {"op": "PUSH1", "value": "0x1"}, "1717": {"op": "PUSH1", "value": "0xA0"}, "1719": {"op": "SHL"}, "1720": {"op": "SUB"}, "1721": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4764], "op": "SWAP1", "path": "8"}, "1722": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4764], "op": "SWAP2", "path": "8"}, "1723": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4764], "op": "AND", "path": "8"}, "1724": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4764], "op": "SWAP1", "path": "8"}, "1725": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4769], "op": "PUSH4", "path": "8", "value": "0x42966C68"}, "1730": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4769], "op": "SWAP1", "path": "8"}, "1731": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "PUSH3", "path": "8", "value": "0x6D2"}, "1735": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "SWAP1", "path": "8"}, "1736": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4770, 4791], "op": "DUP5", "path": "8"}, "1737": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4770, 4791], "op": "SWAP1", "path": "8"}, "1738": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "PUSH1", "path": "8", "value": "0x4"}, "1740": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "ADD", "path": "8"}, "1741": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "PUSH3", "path": "8", "value": "0x10B5"}, "1745": {"fn": "LeveragedTrading.redeemBtcDown", "jump": "i", "offset": [4757, 4792], "op": "JUMP", "path": "8"}, "1746": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "JUMPDEST", "path": "8"}, "1747": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "PUSH1", "path": "8", "value": "0x0"}, "1749": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "PUSH1", "path": "8", "value": "0x40"}, "1751": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "MLOAD", "path": "8"}, "1752": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "DUP1", "path": "8"}, "1753": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "DUP4", "path": "8"}, "1754": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "SUB", "path": "8"}, "1755": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "DUP2", "path": "8"}, "1756": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "PUSH1", "path": "8", "value": "0x0"}, "1758": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "DUP8", "path": "8"}, "1759": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "DUP1", "path": "8"}, "1760": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "EXTCODESIZE", "path": "8"}, "1761": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "ISZERO", "path": "8"}, "1762": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "DUP1", "path": "8"}, "1763": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "ISZERO", "path": "8"}, "1764": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "PUSH3", "path": "8", "value": "0x6ED"}, "1768": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "JUMPI", "path": "8"}, "1769": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "PUSH1", "path": "8", "value": "0x0"}, "1771": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "DUP1", "path": "8"}, "1772": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "REVERT", "path": "8"}, "1773": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "JUMPDEST", "path": "8"}, "1774": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "POP", "path": "8"}, "1775": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "GAS", "path": "8"}, "1776": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "CALL", "path": "8"}, "1777": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "ISZERO", "path": "8"}, "1778": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "DUP1", "path": "8"}, "1779": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "ISZERO", "path": "8"}, "1780": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "PUSH3", "path": "8", "value": "0x702"}, "1784": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "JUMPI", "path": "8"}, "1785": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "RETURNDATASIZE", "path": "8"}, "1786": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "PUSH1", "path": "8", "value": "0x0"}, "1788": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "DUP1", "path": "8"}, "1789": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "RETURNDATACOPY", "path": "8"}, "1790": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "RETURNDATASIZE", "path": "8"}, "1791": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "PUSH1", "path": "8", "value": "0x0"}, "1793": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "REVERT", "path": "8"}, "1794": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "JUMPDEST", "path": "8"}, "1795": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "POP", "path": "8"}, "1796": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "POP", "path": "8"}, "1797": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "POP", "path": "8"}, "1798": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4757, 4792], "op": "POP", "path": "8"}, "1799": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4818, 4835], "op": "PUSH3", "path": "8", "statement": 17, "value": "0x710"}, "1803": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4818, 4833], "op": "PUSH3", "path": "8", "value": "0x4F4"}, "1807": {"fn": "LeveragedTrading.redeemBtcDown", "jump": "i", "offset": [4818, 4835], "op": "JUMP", "path": "8"}, "1808": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4818, 4835], "op": "JUMPDEST", "path": "8"}, "1809": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4803, 4815], "op": "PUSH1", "path": "8", "value": "0x2"}, "1811": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4803, 4835], "op": "DUP2", "path": "8"}, "1812": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4803, 4835], "op": "SWAP1", "path": "8"}, "1813": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4803, 4835], "op": "SSTORE", "path": "8"}, "1814": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4845, 4863], "op": "PUSH1", "path": "8", "value": "0x0"}, "1816": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4845, 4863], "op": "SWAP1", "path": "8"}, "1817": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4866, 4918], "op": "PUSH3", "path": "8", "value": "0x72F"}, "1821": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4866, 4918], "op": "SWAP1", "path": "8"}, "1822": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4910, 4917], "op": "PUSH3", "path": "8", "value": "0xF4240"}, "1826": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4910, 4917], "op": "SWAP1", "path": "8"}, "1827": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4866, 4905], "op": "PUSH3", "path": "8", "value": "0x522"}, "1831": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4866, 4905], "op": "SWAP1", "path": "8"}, "1832": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4866, 4887], "op": "DUP6", "path": "8"}, "1833": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4866, 4887], "op": "SWAP1", "path": "8"}, "1834": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4866, 4891], "op": "PUSH3", "path": "8", "value": "0xD49"}, "1838": {"fn": "LeveragedTrading.redeemBtcDown", "jump": "i", "offset": [4866, 4905], "op": "JUMP", "path": "8"}, "1839": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4866, 4918], "op": "JUMPDEST", "path": "8"}, "1840": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4953, 4966], "op": "PUSH1", "path": "8", "statement": 18, "value": "0x6"}, "1842": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4953, 4966], "op": "SLOAD", "path": "8"}, "1843": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4845, 4918], "op": "SWAP1", "path": "8"}, "1844": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4845, 4918], "op": "SWAP2", "path": "8"}, "1845": {"op": "POP"}, "1846": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4953, 4993], "op": "PUSH3", "path": "8", "value": "0x741"}, "1850": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4953, 4993], "op": "SWAP1", "path": "8"}, "1851": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4971, 4992], "op": "DUP4", "path": "8"}, "1852": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4953, 4970], "op": "PUSH3", "path": "8", "value": "0xCE7"}, "1856": {"fn": "LeveragedTrading.redeemBtcDown", "jump": "i", "offset": [4953, 4993], "op": "JUMP", "path": "8"}, "1857": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4953, 4993], "op": "JUMPDEST", "path": "8"}, "1858": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4937, 4950], "op": "PUSH1", "path": "8", "value": "0x6"}, "1860": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4937, 4993], "op": "SSTORE", "path": "8"}, "1861": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5023, 5040], "op": "PUSH1", "path": "8", "statement": 19, "value": "0x4"}, "1863": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5023, 5040], "op": "SLOAD", "path": "8"}, "1864": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5023, 5056], "op": "PUSH3", "path": "8", "value": "0x753"}, "1868": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5023, 5056], "op": "SWAP1", "path": "8"}, "1869": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5045, 5055], "op": "DUP3", "path": "8"}, "1870": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5023, 5044], "op": "PUSH3", "path": "8", "value": "0xCE7"}, "1874": {"fn": "LeveragedTrading.redeemBtcDown", "jump": "i", "offset": [5023, 5056], "op": "JUMP", "path": "8"}, "1875": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5023, 5056], "op": "JUMPDEST", "path": "8"}, "1876": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5003, 5020], "op": "PUSH1", "path": "8", "value": "0x4"}, "1878": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5003, 5056], "op": "SWAP1", "path": "8"}, "1879": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5003, 5056], "op": "DUP2", "path": "8"}, "1880": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5003, 5056], "op": "SSTORE", "path": "8"}, "1881": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5088, 5099], "op": "PUSH1", "path": "8", "value": "0x8"}, "1883": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5088, 5099], "op": "SLOAD", "path": "8"}, "1884": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "PUSH1", "path": "8", "statement": 20, "value": "0x40"}, "1886": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "MLOAD", "path": "8"}, "1887": {"op": "PUSH4", "value": "0xA9059CBB"}, "1892": {"op": "PUSH1", "value": "0xE0"}, "1894": {"op": "SHL"}, "1895": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "DUP2", "path": "8"}, "1896": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "MSTORE", "path": "8"}, "1897": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5088, 5099], "op": "PUSH2", "path": "8", "value": "0x100"}, "1900": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5088, 5099], "op": "SWAP1", "path": "8"}, "1901": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5088, 5099], "op": "SWAP2", "path": "8"}, "1902": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5088, 5099], "op": "DIV", "path": "8"}, "1903": {"op": "PUSH1", "value": "0x1"}, "1905": {"op": "PUSH1", "value": "0x1"}, "1907": {"op": "PUSH1", "value": "0xA0"}, "1909": {"op": "SHL"}, "1910": {"op": "SUB"}, "1911": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5088, 5099], "op": "AND", "path": "8"}, "1912": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5088, 5099], "op": "SWAP2", "path": "8"}, "1913": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5088, 5099], "op": "DUP3", "path": "8"}, "1914": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5088, 5099], "op": "SWAP2", "path": "8"}, "1915": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5130], "op": "PUSH4", "path": "8", "value": "0xA9059CBB"}, "1920": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5130], "op": "SWAP2", "path": "8"}, "1921": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "PUSH3", "path": "8", "value": "0x790"}, "1925": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "SWAP2", "path": "8"}, "1926": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5131, 5141], "op": "CALLER", "path": "8"}, "1927": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5131, 5141], "op": "SWAP2", "path": "8"}, "1928": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5144, 5154], "op": "DUP8", "path": "8"}, "1929": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5144, 5154], "op": "SWAP2", "path": "8"}, "1930": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "ADD", "path": "8"}, "1931": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "PUSH3", "path": "8", "value": "0xFA8"}, "1935": {"fn": "LeveragedTrading.redeemBtcDown", "jump": "i", "offset": [5117, 5155], "op": "JUMP", "path": "8"}, "1936": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "JUMPDEST", "path": "8"}, "1937": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "PUSH1", "path": "8", "value": "0x20"}, "1939": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "PUSH1", "path": "8", "value": "0x40"}, "1941": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "MLOAD", "path": "8"}, "1942": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "DUP1", "path": "8"}, "1943": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "DUP4", "path": "8"}, "1944": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "SUB", "path": "8"}, "1945": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "DUP2", "path": "8"}, "1946": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "PUSH1", "path": "8", "value": "0x0"}, "1948": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "DUP8", "path": "8"}, "1949": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "DUP1", "path": "8"}, "1950": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "EXTCODESIZE", "path": "8"}, "1951": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "ISZERO", "path": "8"}, "1952": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "DUP1", "path": "8"}, "1953": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "ISZERO", "path": "8"}, "1954": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "PUSH3", "path": "8", "value": "0x7AB"}, "1958": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "JUMPI", "path": "8"}, "1959": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "PUSH1", "path": "8", "value": "0x0"}, "1961": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "DUP1", "path": "8"}, "1962": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "REVERT", "path": "8"}, "1963": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "JUMPDEST", "path": "8"}, "1964": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "POP", "path": "8"}, "1965": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "GAS", "path": "8"}, "1966": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "CALL", "path": "8"}, "1967": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "ISZERO", "path": "8"}, "1968": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "DUP1", "path": "8"}, "1969": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "ISZERO", "path": "8"}, "1970": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "PUSH3", "path": "8", "value": "0x7C0"}, "1974": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "JUMPI", "path": "8"}, "1975": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "RETURNDATASIZE", "path": "8"}, "1976": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "PUSH1", "path": "8", "value": "0x0"}, "1978": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "DUP1", "path": "8"}, "1979": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "RETURNDATACOPY", "path": "8"}, "1980": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "RETURNDATASIZE", "path": "8"}, "1981": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "PUSH1", "path": "8", "value": "0x0"}, "1983": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "REVERT", "path": "8"}, "1984": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "JUMPDEST", "path": "8"}, "1985": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "POP", "path": "8"}, "1986": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "POP", "path": "8"}, "1987": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "POP", "path": "8"}, "1988": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "POP", "path": "8"}, "1989": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "PUSH1", "path": "8", "value": "0x40"}, "1991": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "MLOAD", "path": "8"}, "1992": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "RETURNDATASIZE", "path": "8"}, "1993": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "PUSH1", "path": "8", "value": "0x1F"}, "1995": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "NOT", "path": "8"}, "1996": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "PUSH1", "path": "8", "value": "0x1F"}, "1998": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "DUP3", "path": "8"}, "1999": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "ADD", "path": "8"}, "2000": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "AND", "path": "8"}, "2001": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "DUP3", "path": "8"}, "2002": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "ADD", "path": "8"}, "2003": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "DUP1", "path": "8"}, "2004": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "PUSH1", "path": "8", "value": "0x40"}, "2006": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "MSTORE", "path": "8"}, "2007": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "POP", "path": "8"}, "2008": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "DUP2", "path": "8"}, "2009": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "ADD", "path": "8"}, "2010": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "SWAP1", "path": "8"}, "2011": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "PUSH3", "path": "8", "value": "0x7E6"}, "2015": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "SWAP2", "path": "8"}, "2016": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "SWAP1", "path": "8"}, "2017": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "PUSH3", "path": "8", "value": "0xEC8"}, "2021": {"fn": "LeveragedTrading.redeemBtcDown", "jump": "i", "offset": [5117, 5155], "op": "JUMP", "path": "8"}, "2022": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5117, 5155], "op": "JUMPDEST", "path": "8"}, "2023": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5110, 5156], "op": "PUSH3", "path": "8", "value": "0x801"}, "2027": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5110, 5156], "op": "JUMPI", "path": "8"}, "2028": {"op": "PUSH4", "value": "0x4E487B71"}, "2033": {"op": "PUSH1", "value": "0xE0"}, "2035": {"op": "SHL"}, "2036": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5110, 5156], "op": "PUSH1", "path": "8", "value": "0x0"}, "2038": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5110, 5156], "op": "MSTORE", "path": "8"}, "2039": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5110, 5156], "op": "PUSH1", "path": "8", "value": "0x1"}, "2041": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5110, 5156], "op": "PUSH1", "path": "8", "value": "0x4"}, "2043": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5110, 5156], "op": "MSTORE", "path": "8"}, "2044": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5110, 5156], "op": "PUSH1", "path": "8", "value": "0x24"}, "2046": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5110, 5156], "op": "PUSH1", "path": "8", "value": "0x0"}, "2048": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5110, 5156], "op": "REVERT", "path": "8"}, "2049": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [5110, 5156], "op": "JUMPDEST", "path": "8"}, "2050": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4650, 5163], "op": "POP", "path": "8"}, "2051": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4650, 5163], "op": "POP", "path": "8"}, "2052": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [4650, 5163], "op": "POP", "path": "8"}, "2053": {"fn": "LeveragedTrading.redeemBtcDown", "jump": "o", "offset": [4650, 5163], "op": "JUMP", "path": "8"}, "2054": {"offset": [2210, 2242], "op": "JUMPDEST", "path": "8"}, "2055": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [2210, 2242], "op": "PUSH1", "path": "8", "value": "0x6"}, "2057": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [2210, 2242], "op": "SLOAD", "path": "8"}, "2058": {"fn": "LeveragedTrading.redeemBtcDown", "offset": [2210, 2242], "op": "DUP2", "path": "8"}, "2059": {"fn": "LeveragedTrading.redeemBtcDown", "jump": "o", "offset": [2210, 2242], "op": "JUMP", "path": "8"}, "2060": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3601, 4152], "op": "JUMPDEST", "path": "8"}, "2061": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3660, 3686], "op": "PUSH3", "path": "8", "statement": 21, "value": "0x816"}, "2065": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3660, 3684], "op": "PUSH3", "path": "8", "value": "0x3F5"}, "2069": {"fn": "LeveragedTrading.issueBtcDown", "jump": "i", "offset": [3660, 3686], "op": "JUMP", "path": "8"}, "2070": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3660, 3686], "op": "JUMPDEST", "path": "8"}, "2071": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3720, 3737], "op": "PUSH3", "path": "8", "statement": 22, "value": "0x820"}, "2075": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3720, 3735], "op": "PUSH3", "path": "8", "value": "0x4F4"}, "2079": {"fn": "LeveragedTrading.issueBtcDown", "jump": "i", "offset": [3720, 3737], "op": "JUMP", "path": "8"}, "2080": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3720, 3737], "op": "JUMPDEST", "path": "8"}, "2081": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3705, 3717], "op": "PUSH1", "path": "8", "value": "0x2"}, "2083": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3705, 3737], "op": "DUP2", "path": "8"}, "2084": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3705, 3737], "op": "SWAP1", "path": "8"}, "2085": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3705, 3737], "op": "SSTORE", "path": "8"}, "2086": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3747, 3776], "op": "PUSH1", "path": "8", "value": "0x0"}, "2088": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3747, 3776], "op": "SWAP1", "path": "8"}, "2089": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3779, 3820], "op": "PUSH3", "path": "8", "value": "0x83C"}, "2093": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3779, 3820], "op": "SWAP1", "path": "8"}, "2094": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3779, 3802], "op": "PUSH3", "path": "8", "value": "0x522"}, "2098": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3779, 3789], "op": "DUP5", "path": "8"}, "2099": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3794, 3801], "op": "PUSH3", "path": "8", "value": "0xF4240"}, "2103": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3779, 3793], "op": "PUSH3", "path": "8", "value": "0xD49"}, "2107": {"fn": "LeveragedTrading.issueBtcDown", "jump": "i", "offset": [3779, 3802], "op": "JUMP", "path": "8"}, "2108": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3779, 3820], "op": "JUMPDEST", "path": "8"}, "2109": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3838], "op": "PUSH1", "path": "8", "statement": 23, "value": "0xB"}, "2111": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3838], "op": "SLOAD", "path": "8"}, "2112": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "PUSH1", "path": "8", "value": "0x40"}, "2114": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "MLOAD", "path": "8"}, "2115": {"op": "PUSH4", "value": "0x140E25AD"}, "2120": {"op": "PUSH1", "value": "0xE3"}, "2122": {"op": "SHL"}, "2123": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "DUP2", "path": "8"}, "2124": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "MSTORE", "path": "8"}, "2125": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3747, 3820], "op": "SWAP2", "path": "8"}, "2126": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3747, 3820], "op": "SWAP3", "path": "8"}, "2127": {"op": "POP"}, "2128": {"op": "PUSH1", "value": "0x1"}, "2130": {"op": "PUSH1", "value": "0x1"}, "2132": {"op": "PUSH1", "value": "0xA0"}, "2134": {"op": "SHL"}, "2135": {"op": "SUB"}, "2136": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3838], "op": "AND", "path": "8"}, "2137": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3838], "op": "SWAP1", "path": "8"}, "2138": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3843], "op": "PUSH4", "path": "8", "value": "0xA0712D68"}, "2143": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3843], "op": "SWAP1", "path": "8"}, "2144": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "PUSH3", "path": "8", "value": "0x86F"}, "2148": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "SWAP1", "path": "8"}, "2149": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3747, 3820], "op": "DUP5", "path": "8"}, "2150": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3747, 3820], "op": "SWAP1", "path": "8"}, "2151": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "PUSH1", "path": "8", "value": "0x4"}, "2153": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "ADD", "path": "8"}, "2154": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "PUSH3", "path": "8", "value": "0x10B5"}, "2158": {"fn": "LeveragedTrading.issueBtcDown", "jump": "i", "offset": [3831, 3866], "op": "JUMP", "path": "8"}, "2159": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "JUMPDEST", "path": "8"}, "2160": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "PUSH1", "path": "8", "value": "0x0"}, "2162": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "PUSH1", "path": "8", "value": "0x40"}, "2164": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "MLOAD", "path": "8"}, "2165": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "DUP1", "path": "8"}, "2166": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "DUP4", "path": "8"}, "2167": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "SUB", "path": "8"}, "2168": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "DUP2", "path": "8"}, "2169": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "PUSH1", "path": "8", "value": "0x0"}, "2171": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "DUP8", "path": "8"}, "2172": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "DUP1", "path": "8"}, "2173": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "EXTCODESIZE", "path": "8"}, "2174": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "ISZERO", "path": "8"}, "2175": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "DUP1", "path": "8"}, "2176": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "ISZERO", "path": "8"}, "2177": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "PUSH3", "path": "8", "value": "0x88A"}, "2181": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "JUMPI", "path": "8"}, "2182": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "PUSH1", "path": "8", "value": "0x0"}, "2184": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "DUP1", "path": "8"}, "2185": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "REVERT", "path": "8"}, "2186": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "JUMPDEST", "path": "8"}, "2187": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "POP", "path": "8"}, "2188": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "GAS", "path": "8"}, "2189": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "CALL", "path": "8"}, "2190": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "ISZERO", "path": "8"}, "2191": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "DUP1", "path": "8"}, "2192": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "ISZERO", "path": "8"}, "2193": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "PUSH3", "path": "8", "value": "0x89F"}, "2197": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "JUMPI", "path": "8"}, "2198": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "RETURNDATASIZE", "path": "8"}, "2199": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "PUSH1", "path": "8", "value": "0x0"}, "2201": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "DUP1", "path": "8"}, "2202": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "RETURNDATACOPY", "path": "8"}, "2203": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "RETURNDATASIZE", "path": "8"}, "2204": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "PUSH1", "path": "8", "value": "0x0"}, "2206": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "REVERT", "path": "8"}, "2207": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3831, 3866], "op": "JUMPDEST", "path": "8"}, "2208": {"op": "POP"}, "2209": {"op": "POP"}, "2210": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3892, 3905], "op": "PUSH1", "path": "8", "statement": 24, "value": "0x6"}, "2212": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3892, 3905], "op": "SLOAD", "path": "8"}, "2213": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3892, 3932], "op": "PUSH3", "path": "8", "value": "0x8B3"}, "2217": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3892, 3932], "op": "SWAP3", "path": "8"}, "2218": {"op": "POP"}, "2219": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3892, 3905], "op": "SWAP1", "path": "8"}, "2220": {"op": "POP"}, "2221": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3910, 3931], "op": "DUP3", "path": "8"}, "2222": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3892, 3909], "op": "PUSH3", "path": "8", "value": "0xCD2"}, "2226": {"fn": "LeveragedTrading.issueBtcDown", "jump": "i", "offset": [3892, 3932], "op": "JUMP", "path": "8"}, "2227": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3892, 3932], "op": "JUMPDEST", "path": "8"}, "2228": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3876, 3889], "op": "PUSH1", "path": "8", "value": "0x6"}, "2230": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3876, 3932], "op": "SSTORE", "path": "8"}, "2231": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3962, 3979], "op": "PUSH1", "path": "8", "statement": 25, "value": "0x4"}, "2233": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3962, 3979], "op": "SLOAD", "path": "8"}, "2234": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3962, 3995], "op": "PUSH3", "path": "8", "value": "0x8C5"}, "2238": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3962, 3995], "op": "SWAP1", "path": "8"}, "2239": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3984, 3994], "op": "DUP4", "path": "8"}, "2240": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3962, 3983], "op": "PUSH3", "path": "8", "value": "0xCD2"}, "2244": {"fn": "LeveragedTrading.issueBtcDown", "jump": "i", "offset": [3962, 3995], "op": "JUMP", "path": "8"}, "2245": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3962, 3995], "op": "JUMPDEST", "path": "8"}, "2246": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3942, 3959], "op": "PUSH1", "path": "8", "value": "0x4"}, "2248": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3942, 3995], "op": "SWAP1", "path": "8"}, "2249": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3942, 3995], "op": "DUP2", "path": "8"}, "2250": {"fn": "LeveragedTrading.issueBtcDown", "offset": [3942, 3995], "op": "SSTORE", "path": "8"}, "2251": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4027, 4038], "op": "PUSH1", "path": "8", "value": "0x8"}, "2253": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4027, 4038], "op": "SLOAD", "path": "8"}, "2254": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "PUSH1", "path": "8", "statement": 26, "value": "0x40"}, "2256": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "MLOAD", "path": "8"}, "2257": {"op": "PUSH4", "value": "0x23B872DD"}, "2262": {"op": "PUSH1", "value": "0xE0"}, "2264": {"op": "SHL"}, "2265": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "DUP2", "path": "8"}, "2266": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "MSTORE", "path": "8"}, "2267": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4027, 4038], "op": "PUSH2", "path": "8", "value": "0x100"}, "2270": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4027, 4038], "op": "SWAP1", "path": "8"}, "2271": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4027, 4038], "op": "SWAP2", "path": "8"}, "2272": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4027, 4038], "op": "DIV", "path": "8"}, "2273": {"op": "PUSH1", "value": "0x1"}, "2275": {"op": "PUSH1", "value": "0x1"}, "2277": {"op": "PUSH1", "value": "0xA0"}, "2279": {"op": "SHL"}, "2280": {"op": "SUB"}, "2281": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4027, 4038], "op": "AND", "path": "8"}, "2282": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4027, 4038], "op": "SWAP2", "path": "8"}, "2283": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4027, 4038], "op": "DUP3", "path": "8"}, "2284": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4027, 4038], "op": "SWAP2", "path": "8"}, "2285": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4074], "op": "PUSH4", "path": "8", "value": "0x23B872DD"}, "2290": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4074], "op": "SWAP2", "path": "8"}, "2291": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "PUSH3", "path": "8", "value": "0x904"}, "2295": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "SWAP2", "path": "8"}, "2296": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4075, 4085], "op": "CALLER", "path": "8"}, "2297": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4075, 4085], "op": "SWAP2", "path": "8"}, "2298": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4095, 4099], "op": "ADDRESS", "path": "8"}, "2299": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4095, 4099], "op": "SWAP2", "path": "8"}, "2300": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4102, 4112], "op": "DUP10", "path": "8"}, "2301": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4102, 4112], "op": "SWAP2", "path": "8"}, "2302": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "ADD", "path": "8"}, "2303": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "PUSH3", "path": "8", "value": "0xF84"}, "2307": {"fn": "LeveragedTrading.issueBtcDown", "jump": "i", "offset": [4057, 4113], "op": "JUMP", "path": "8"}, "2308": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "JUMPDEST", "path": "8"}, "2309": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "PUSH1", "path": "8", "value": "0x20"}, "2311": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "PUSH1", "path": "8", "value": "0x40"}, "2313": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "MLOAD", "path": "8"}, "2314": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "DUP1", "path": "8"}, "2315": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "DUP4", "path": "8"}, "2316": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "SUB", "path": "8"}, "2317": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "DUP2", "path": "8"}, "2318": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "PUSH1", "path": "8", "value": "0x0"}, "2320": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "DUP8", "path": "8"}, "2321": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "DUP1", "path": "8"}, "2322": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "EXTCODESIZE", "path": "8"}, "2323": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "ISZERO", "path": "8"}, "2324": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "DUP1", "path": "8"}, "2325": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "ISZERO", "path": "8"}, "2326": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "PUSH3", "path": "8", "value": "0x91F"}, "2330": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "JUMPI", "path": "8"}, "2331": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "PUSH1", "path": "8", "value": "0x0"}, "2333": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "DUP1", "path": "8"}, "2334": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "REVERT", "path": "8"}, "2335": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "JUMPDEST", "path": "8"}, "2336": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "POP", "path": "8"}, "2337": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "GAS", "path": "8"}, "2338": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "CALL", "path": "8"}, "2339": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "ISZERO", "path": "8"}, "2340": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "DUP1", "path": "8"}, "2341": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "ISZERO", "path": "8"}, "2342": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "PUSH3", "path": "8", "value": "0x934"}, "2346": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "JUMPI", "path": "8"}, "2347": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "RETURNDATASIZE", "path": "8"}, "2348": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "PUSH1", "path": "8", "value": "0x0"}, "2350": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "DUP1", "path": "8"}, "2351": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "RETURNDATACOPY", "path": "8"}, "2352": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "RETURNDATASIZE", "path": "8"}, "2353": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "PUSH1", "path": "8", "value": "0x0"}, "2355": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "REVERT", "path": "8"}, "2356": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "JUMPDEST", "path": "8"}, "2357": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "POP", "path": "8"}, "2358": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "POP", "path": "8"}, "2359": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "POP", "path": "8"}, "2360": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "POP", "path": "8"}, "2361": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "PUSH1", "path": "8", "value": "0x40"}, "2363": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "MLOAD", "path": "8"}, "2364": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "RETURNDATASIZE", "path": "8"}, "2365": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "PUSH1", "path": "8", "value": "0x1F"}, "2367": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "NOT", "path": "8"}, "2368": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "PUSH1", "path": "8", "value": "0x1F"}, "2370": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "DUP3", "path": "8"}, "2371": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "ADD", "path": "8"}, "2372": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "AND", "path": "8"}, "2373": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "DUP3", "path": "8"}, "2374": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "ADD", "path": "8"}, "2375": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "DUP1", "path": "8"}, "2376": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "PUSH1", "path": "8", "value": "0x40"}, "2378": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "MSTORE", "path": "8"}, "2379": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "POP", "path": "8"}, "2380": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "DUP2", "path": "8"}, "2381": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "ADD", "path": "8"}, "2382": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "SWAP1", "path": "8"}, "2383": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "PUSH3", "path": "8", "value": "0x95A"}, "2387": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "SWAP2", "path": "8"}, "2388": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "SWAP1", "path": "8"}, "2389": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "PUSH3", "path": "8", "value": "0xEC8"}, "2393": {"fn": "LeveragedTrading.issueBtcDown", "jump": "i", "offset": [4057, 4113], "op": "JUMP", "path": "8"}, "2394": {"branch": 60, "fn": "LeveragedTrading.issueBtcDown", "offset": [4057, 4113], "op": "JUMPDEST", "path": "8"}, "2395": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4049, 4145], "op": "PUSH3", "path": "8", "value": "0x801"}, "2399": {"branch": 60, "fn": "LeveragedTrading.issueBtcDown", "offset": [4049, 4145], "op": "JUMPI", "path": "8"}, "2400": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4049, 4145], "op": "PUSH1", "path": "8", "value": "0x40"}, "2402": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4049, 4145], "op": "MLOAD", "path": "8"}, "2403": {"op": "PUSH3", "value": "0x461BCD"}, "2407": {"op": "PUSH1", "value": "0xE5"}, "2409": {"op": "SHL"}, "2410": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4049, 4145], "op": "DUP2", "path": "8"}, "2411": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4049, 4145], "op": "MSTORE", "path": "8"}, "2412": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4049, 4145], "op": "PUSH1", "path": "8", "value": "0x4"}, "2414": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4049, 4145], "op": "ADD", "path": "8"}, "2415": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4049, 4145], "op": "PUSH3", "path": "8", "value": "0x4DD"}, "2419": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4049, 4145], "op": "SWAP1", "path": "8"}, "2420": {"fn": "LeveragedTrading.issueBtcDown", "offset": [4049, 4145], "op": "PUSH3", "path": "8", "value": "0x107E"}, "2424": {"fn": "LeveragedTrading.issueBtcDown", "jump": "i", "offset": [4049, 4145], "op": "JUMP", "path": "8"}, "2425": {"fn": "LeveragedTrading.getBtcdownBalance", "offset": [7991, 8102], "op": "JUMPDEST", "path": "8"}, "2426": {"fn": "LeveragedTrading.getBtcdownBalance", "offset": [8066, 8073], "op": "PUSH1", "path": "8", "statement": 27, "value": "0xB"}, "2428": {"fn": "LeveragedTrading.getBtcdownBalance", "offset": [8066, 8073], "op": "SLOAD", "path": "8"}, "2429": {"fn": "LeveragedTrading.getBtcdownBalance", "offset": [8066, 8095], "op": "PUSH1", "path": "8", "value": "0x40"}, "2431": {"fn": "LeveragedTrading.getBtcdownBalance", "offset": [8066, 8095], "op": "MLOAD", "path": "8"}, "2432": {"op": "PUSH4", "value": "0x70A08231"}, "2437": {"op": "PUSH1", "value": "0xE0"}, "2439": {"op": "SHL"}, "2440": {"fn": "LeveragedTrading.getBtcdownBalance", "offset": [8066, 8095], "op": "DUP2", "path": "8"}, "2441": {"fn": "LeveragedTrading.getBtcdownBalance", "offset": [8066, 8095], "op": "MSTORE", "path": "8"}, "2442": {"fn": "LeveragedTrading.getBtcdownBalance", "offset": [8040, 8047], "op": "PUSH1", "path": "8", "value": "0x0"}, "2444": {"fn": "LeveragedTrading.getBtcdownBalance", "offset": [8040, 8047], "op": "SWAP2", "path": "8"}, "2445": {"op": "PUSH1", "value": "0x1"}, "2447": {"op": "PUSH1", "value": "0x1"}, "2449": {"op": "PUSH1", "value": "0xA0"}, "2451": {"op": "SHL"}, "2452": {"op": "SUB"}, "2453": {"fn": "LeveragedTrading.getBtcdownBalance", "offset": [8066, 8073], "op": "AND", "path": "8"}, "2454": {"fn": "LeveragedTrading.getBtcdownBalance", "offset": [8066, 8073], "op": "SWAP1", "path": "8"}, "2455": {"fn": "LeveragedTrading.getBtcdownBalance", "offset": [8066, 8083], "op": "PUSH4", "path": "8", "value": "0x70A08231"}, "2460": {"fn": "LeveragedTrading.getBtcdownBalance", "offset": [8066, 8083], "op": "SWAP1", "path": "8"}, "2461": {"fn": "LeveragedTrading.getBtcdownBalance", "offset": [8066, 8095], "op": "PUSH3", "path": "8", "value": "0x30B"}, "2465": {"fn": "LeveragedTrading.getBtcdownBalance", "offset": [8066, 8095], "op": "SWAP1", "path": "8"}, "2466": {"fn": "LeveragedTrading.getBtcdownBalance", "offset": [8084, 8094], "op": "CALLER", "path": "8"}, "2467": {"fn": "LeveragedTrading.getBtcdownBalance", "offset": [8084, 8094], "op": "SWAP1", "path": "8"}, "2468": {"fn": "LeveragedTrading.getBtcdownBalance", "offset": [8066, 8095], "op": "PUSH1", "path": "8", "value": "0x4"}, "2470": {"fn": "LeveragedTrading.getBtcdownBalance", "offset": [8066, 8095], "op": "ADD", "path": "8"}, "2471": {"fn": "LeveragedTrading.getBtcdownBalance", "offset": [8066, 8095], "op": "PUSH3", "path": "8", "value": "0xF70"}, "2475": {"fn": "LeveragedTrading.getBtcdownBalance", "jump": "i", "offset": [8066, 8095], "op": "JUMP", "path": "8"}, "2476": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4158, 4644], "op": "JUMPDEST", "path": "8"}, "2477": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4227, 4253], "op": "PUSH3", "path": "8", "statement": 28, "value": "0x9B6"}, "2481": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4227, 4251], "op": "PUSH3", "path": "8", "value": "0x3F5"}, "2485": {"fn": "LeveragedTrading.redeemBtcUp", "jump": "i", "offset": [4227, 4253], "op": "JUMP", "path": "8"}, "2486": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4227, 4253], "op": "JUMPDEST", "path": "8"}, "2487": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4268], "op": "PUSH1", "path": "8", "statement": 29, "value": "0xA"}, "2489": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4268], "op": "SLOAD", "path": "8"}, "2490": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "PUSH1", "path": "8", "value": "0x40"}, "2492": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "MLOAD", "path": "8"}, "2493": {"op": "PUSH4", "value": "0x852CD8D"}, "2498": {"op": "PUSH1", "value": "0xE3"}, "2500": {"op": "SHL"}, "2501": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "DUP2", "path": "8"}, "2502": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "MSTORE", "path": "8"}, "2503": {"op": "PUSH1", "value": "0x1"}, "2505": {"op": "PUSH1", "value": "0x1"}, "2507": {"op": "PUSH1", "value": "0xA0"}, "2509": {"op": "SHL"}, "2510": {"op": "SUB"}, "2511": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4268], "op": "SWAP1", "path": "8"}, "2512": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4268], "op": "SWAP2", "path": "8"}, "2513": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4268], "op": "AND", "path": "8"}, "2514": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4268], "op": "SWAP1", "path": "8"}, "2515": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4273], "op": "PUSH4", "path": "8", "value": "0x42966C68"}, "2520": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4273], "op": "SWAP1", "path": "8"}, "2521": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "PUSH3", "path": "8", "value": "0x9E8"}, "2525": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "SWAP1", "path": "8"}, "2526": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4274, 4295], "op": "DUP5", "path": "8"}, "2527": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4274, 4295], "op": "SWAP1", "path": "8"}, "2528": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "PUSH1", "path": "8", "value": "0x4"}, "2530": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "ADD", "path": "8"}, "2531": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "PUSH3", "path": "8", "value": "0x10B5"}, "2535": {"fn": "LeveragedTrading.redeemBtcUp", "jump": "i", "offset": [4263, 4296], "op": "JUMP", "path": "8"}, "2536": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "JUMPDEST", "path": "8"}, "2537": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "PUSH1", "path": "8", "value": "0x0"}, "2539": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "PUSH1", "path": "8", "value": "0x40"}, "2541": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "MLOAD", "path": "8"}, "2542": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "DUP1", "path": "8"}, "2543": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "DUP4", "path": "8"}, "2544": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "SUB", "path": "8"}, "2545": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "DUP2", "path": "8"}, "2546": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "PUSH1", "path": "8", "value": "0x0"}, "2548": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "DUP8", "path": "8"}, "2549": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "DUP1", "path": "8"}, "2550": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "EXTCODESIZE", "path": "8"}, "2551": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "ISZERO", "path": "8"}, "2552": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "DUP1", "path": "8"}, "2553": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "ISZERO", "path": "8"}, "2554": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "PUSH3", "path": "8", "value": "0xA03"}, "2558": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "JUMPI", "path": "8"}, "2559": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "PUSH1", "path": "8", "value": "0x0"}, "2561": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "DUP1", "path": "8"}, "2562": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "REVERT", "path": "8"}, "2563": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "JUMPDEST", "path": "8"}, "2564": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "POP", "path": "8"}, "2565": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "GAS", "path": "8"}, "2566": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "CALL", "path": "8"}, "2567": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "ISZERO", "path": "8"}, "2568": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "DUP1", "path": "8"}, "2569": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "ISZERO", "path": "8"}, "2570": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "PUSH3", "path": "8", "value": "0xA18"}, "2574": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "JUMPI", "path": "8"}, "2575": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "RETURNDATASIZE", "path": "8"}, "2576": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "PUSH1", "path": "8", "value": "0x0"}, "2578": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "DUP1", "path": "8"}, "2579": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "RETURNDATACOPY", "path": "8"}, "2580": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "RETURNDATASIZE", "path": "8"}, "2581": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "PUSH1", "path": "8", "value": "0x0"}, "2583": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "REVERT", "path": "8"}, "2584": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "JUMPDEST", "path": "8"}, "2585": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "POP", "path": "8"}, "2586": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "POP", "path": "8"}, "2587": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "POP", "path": "8"}, "2588": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4263, 4296], "op": "POP", "path": "8"}, "2589": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4320, 4335], "op": "PUSH3", "path": "8", "statement": 30, "value": "0xA26"}, "2593": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4320, 4333], "op": "PUSH3", "path": "8", "value": "0xAB2"}, "2597": {"fn": "LeveragedTrading.redeemBtcUp", "jump": "i", "offset": [4320, 4335], "op": "JUMP", "path": "8"}, "2598": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4320, 4335], "op": "JUMPDEST", "path": "8"}, "2599": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4307, 4317], "op": "PUSH1", "path": "8", "value": "0x1"}, "2601": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4307, 4335], "op": "DUP2", "path": "8"}, "2602": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4307, 4335], "op": "SWAP1", "path": "8"}, "2603": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4307, 4335], "op": "SSTORE", "path": "8"}, "2604": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4345, 4363], "op": "PUSH1", "path": "8", "value": "0x0"}, "2606": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4345, 4363], "op": "SWAP1", "path": "8"}, "2607": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4366, 4416], "op": "PUSH3", "path": "8", "value": "0xA45"}, "2611": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4366, 4416], "op": "SWAP1", "path": "8"}, "2612": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4408, 4415], "op": "PUSH3", "path": "8", "value": "0xF4240"}, "2616": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4408, 4415], "op": "SWAP1", "path": "8"}, "2617": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4366, 4403], "op": "PUSH3", "path": "8", "value": "0x522"}, "2621": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4366, 4403], "op": "SWAP1", "path": "8"}, "2622": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4366, 4387], "op": "DUP6", "path": "8"}, "2623": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4366, 4387], "op": "SWAP1", "path": "8"}, "2624": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4366, 4391], "op": "PUSH3", "path": "8", "value": "0xD49"}, "2628": {"fn": "LeveragedTrading.redeemBtcUp", "jump": "i", "offset": [4366, 4403], "op": "JUMP", "path": "8"}, "2629": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4366, 4416], "op": "JUMPDEST", "path": "8"}, "2630": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4441, 4452], "op": "PUSH1", "path": "8", "statement": 31, "value": "0x5"}, "2632": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4441, 4452], "op": "SLOAD", "path": "8"}, "2633": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4345, 4416], "op": "SWAP1", "path": "8"}, "2634": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4345, 4416], "op": "SWAP2", "path": "8"}, "2635": {"op": "POP"}, "2636": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4441, 4479], "op": "PUSH3", "path": "8", "value": "0xA57"}, "2640": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4441, 4479], "op": "SWAP1", "path": "8"}, "2641": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4457, 4478], "op": "DUP4", "path": "8"}, "2642": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4441, 4456], "op": "PUSH3", "path": "8", "value": "0xCE7"}, "2646": {"fn": "LeveragedTrading.redeemBtcUp", "jump": "i", "offset": [4441, 4479], "op": "JUMP", "path": "8"}, "2647": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4441, 4479], "op": "JUMPDEST", "path": "8"}, "2648": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4427, 4438], "op": "PUSH1", "path": "8", "value": "0x5"}, "2650": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4427, 4479], "op": "SSTORE", "path": "8"}, "2651": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4507, 4522], "op": "PUSH1", "path": "8", "statement": 32, "value": "0x3"}, "2653": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4507, 4522], "op": "SLOAD", "path": "8"}, "2654": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4507, 4538], "op": "PUSH3", "path": "8", "value": "0xA69"}, "2658": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4507, 4538], "op": "SWAP1", "path": "8"}, "2659": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4527, 4537], "op": "DUP3", "path": "8"}, "2660": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4507, 4526], "op": "PUSH3", "path": "8", "value": "0xCE7"}, "2664": {"fn": "LeveragedTrading.redeemBtcUp", "jump": "i", "offset": [4507, 4538], "op": "JUMP", "path": "8"}, "2665": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4507, 4538], "op": "JUMPDEST", "path": "8"}, "2666": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4489, 4504], "op": "PUSH1", "path": "8", "value": "0x3"}, "2668": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4489, 4538], "op": "SSTORE", "path": "8"}, "2669": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4570, 4581], "op": "PUSH1", "path": "8", "value": "0x8"}, "2671": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4570, 4581], "op": "SLOAD", "path": "8"}, "2672": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4599, 4636], "op": "PUSH1", "path": "8", "statement": 33, "value": "0x40"}, "2674": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4599, 4636], "op": "MLOAD", "path": "8"}, "2675": {"op": "PUSH4", "value": "0xA9059CBB"}, "2680": {"op": "PUSH1", "value": "0xE0"}, "2682": {"op": "SHL"}, "2683": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4599, 4636], "op": "DUP2", "path": "8"}, "2684": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4599, 4636], "op": "MSTORE", "path": "8"}, "2685": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4570, 4581], "op": "PUSH2", "path": "8", "value": "0x100"}, "2688": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4570, 4581], "op": "SWAP1", "path": "8"}, "2689": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4570, 4581], "op": "SWAP2", "path": "8"}, "2690": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4570, 4581], "op": "DIV", "path": "8"}, "2691": {"op": "PUSH1", "value": "0x1"}, "2693": {"op": "PUSH1", "value": "0x1"}, "2695": {"op": "PUSH1", "value": "0xA0"}, "2697": {"op": "SHL"}, "2698": {"op": "SUB"}, "2699": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4570, 4581], "op": "AND", "path": "8"}, "2700": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4570, 4581], "op": "SWAP1", "path": "8"}, "2701": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4570, 4581], "op": "DUP2", "path": "8"}, "2702": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4570, 4581], "op": "SWAP1", "path": "8"}, "2703": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4599, 4612], "op": "PUSH4", "path": "8", "value": "0xA9059CBB"}, "2708": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4599, 4612], "op": "SWAP1", "path": "8"}, "2709": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4599, 4636], "op": "PUSH3", "path": "8", "value": "0x790"}, "2713": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4599, 4636], "op": "SWAP1", "path": "8"}, "2714": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4613, 4623], "op": "CALLER", "path": "8"}, "2715": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4613, 4623], "op": "SWAP1", "path": "8"}, "2716": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4625, 4635], "op": "DUP7", "path": "8"}, "2717": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4625, 4635], "op": "SWAP1", "path": "8"}, "2718": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4599, 4636], "op": "PUSH1", "path": "8", "value": "0x4"}, "2720": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4599, 4636], "op": "ADD", "path": "8"}, "2721": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [4599, 4636], "op": "PUSH3", "path": "8", "value": "0xFA8"}, "2725": {"fn": "LeveragedTrading.redeemBtcUp", "jump": "i", "offset": [4599, 4636], "op": "JUMP", "path": "8"}, "2726": {"offset": [2045, 2079], "op": "JUMPDEST", "path": "8"}, "2727": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [2045, 2079], "op": "PUSH1", "path": "8", "value": "0x3"}, "2729": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [2045, 2079], "op": "SLOAD", "path": "8"}, "2730": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [2045, 2079], "op": "DUP2", "path": "8"}, "2731": {"fn": "LeveragedTrading.redeemBtcUp", "jump": "o", "offset": [2045, 2079], "op": "JUMP", "path": "8"}, "2732": {"offset": [1939, 1974], "op": "JUMPDEST", "path": "8"}, "2733": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [1939, 1974], "op": "PUSH1", "path": "8", "value": "0x1"}, "2735": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [1939, 1974], "op": "SLOAD", "path": "8"}, "2736": {"fn": "LeveragedTrading.redeemBtcUp", "offset": [1939, 1974], "op": "DUP2", "path": "8"}, "2737": {"fn": "LeveragedTrading.redeemBtcUp", "jump": "o", "offset": [1939, 1974], "op": "JUMP", "path": "8"}, "2738": {"fn": "LeveragedTrading.getBtcUpPrice", "offset": [6459, 6616], "op": "JUMPDEST", "path": "8"}, "2739": {"fn": "LeveragedTrading.getBtcUpPrice", "offset": [6505, 6512], "op": "PUSH1", "path": "8", "value": "0x0"}, "2741": {"fn": "LeveragedTrading.getBtcUpPrice", "offset": [6531, 6542], "op": "PUSH1", "path": "8", "statement": 34, "value": "0x5"}, "2743": {"fn": "LeveragedTrading.getBtcUpPrice", "offset": [6531, 6542], "op": "SLOAD", "path": "8"}, "2744": {"fn": "LeveragedTrading.getBtcUpPrice", "offset": [6546, 6547], "op": "PUSH1", "path": "8", "value": "0x0"}, "2746": {"branch": 61, "fn": "LeveragedTrading.getBtcUpPrice", "offset": [6531, 6547], "op": "EQ", "path": "8"}, "2747": {"fn": "LeveragedTrading.getBtcUpPrice", "offset": [6531, 6609], "op": "PUSH3", "path": "8", "value": "0xAE0"}, "2751": {"branch": 61, "fn": "LeveragedTrading.getBtcUpPrice", "offset": [6531, 6609], "op": "JUMPI", "path": "8"}, "2752": {"fn": "LeveragedTrading.getBtcUpPrice", "offset": [6564, 6609], "op": "PUSH3", "path": "8", "value": "0x529"}, "2756": {"fn": "LeveragedTrading.getBtcUpPrice", "offset": [6597, 6608], "op": "PUSH1", "path": "8", "value": "0x5"}, "2758": {"fn": "LeveragedTrading.getBtcUpPrice", "offset": [6597, 6608], "op": "SLOAD", "path": "8"}, "2759": {"fn": "LeveragedTrading.getBtcUpPrice", "offset": [6564, 6592], "op": "PUSH3", "path": "8", "value": "0x522"}, "2763": {"fn": "LeveragedTrading.getBtcUpPrice", "offset": [6584, 6591], "op": "PUSH3", "path": "8", "value": "0xF4240"}, "2767": {"fn": "LeveragedTrading.getBtcUpPrice", "offset": [6564, 6579], "op": "PUSH1", "path": "8", "value": "0x3"}, "2769": {"fn": "LeveragedTrading.getBtcUpPrice", "offset": [6564, 6579], "op": "SLOAD", "path": "8"}, "2770": {"fn": "LeveragedTrading.getBtcUpPrice", "offset": [6564, 6583], "op": "PUSH3", "path": "8", "value": "0xD49"}, "2774": {"fn": "LeveragedTrading.getBtcUpPrice", "offset": [6564, 6583], "op": "SWAP1", "path": "8"}, "2775": {"fn": "LeveragedTrading.getBtcUpPrice", "offset": [6564, 6592], "op": "SWAP2", "path": "8"}, "2776": {"fn": "LeveragedTrading.getBtcUpPrice", "offset": [6564, 6592], "op": "SWAP1", "path": "8"}, "2777": {"fn": "LeveragedTrading.getBtcUpPrice", "offset": [6564, 6592], "op": "PUSH4", "path": "8", "value": "0xFFFFFFFF"}, "2782": {"fn": "LeveragedTrading.getBtcUpPrice", "offset": [6564, 6592], "op": "AND", "path": "8"}, "2783": {"fn": "LeveragedTrading.getBtcUpPrice", "jump": "i", "offset": [6564, 6592], "op": "JUMP", "path": "8"}, "2784": {"fn": "LeveragedTrading.getBtcUpPrice", "offset": [6531, 6609], "op": "JUMPDEST", "path": "8"}, "2785": {"op": "POP"}, "2786": {"fn": "LeveragedTrading.getBtcUpPrice", "offset": [6551, 6561], "op": "PUSH1", "path": "8", "value": "0x1"}, "2788": {"fn": "LeveragedTrading.getBtcUpPrice", "offset": [6551, 6561], "op": "SLOAD", "path": "8"}, "2789": {"fn": "LeveragedTrading.getBtcUpPrice", "offset": [6551, 6561], "op": "SWAP1", "path": "8"}, "2790": {"fn": "LeveragedTrading.getBtcUpPrice", "jump": "o", "offset": [6459, 6616], "op": "JUMP", "path": "8"}, "2791": {"fn": "Ownable.transferOwnership", "offset": [1846, 2035], "op": "JUMPDEST", "path": "0"}, "2792": {"offset": [1196, 1208], "op": "PUSH3", "path": "0", "value": "0xAF1"}, "2796": {"offset": [1196, 1206], "op": "PUSH3", "path": "0", "value": "0xCF5"}, "2800": {"jump": "i", "offset": [1196, 1208], "op": "JUMP", "path": "0"}, "2801": {"fn": "Ownable.transferOwnership", "offset": [1196, 1208], "op": "JUMPDEST", "path": "0"}, "2802": {"op": "PUSH1", "value": "0x1"}, "2804": {"op": "PUSH1", "value": "0x1"}, "2806": {"op": "PUSH1", "value": "0xA0"}, "2808": {"op": "SHL"}, "2809": {"op": "SUB"}, "2810": {"offset": [1185, 1208], "op": "AND", "path": "0"}, "2811": {"offset": [1185, 1192], "op": "PUSH3", "path": "0", "value": "0xB04"}, "2815": {"offset": [1185, 1190], "op": "PUSH3", "path": "0", "value": "0x536"}, "2819": {"jump": "i", "offset": [1185, 1192], "op": "JUMP", "path": "0"}, "2820": {"fn": "Ownable.transferOwnership", "offset": [1185, 1192], "op": "JUMPDEST", "path": "0"}, "2821": {"op": "PUSH1", "value": "0x1"}, "2823": {"op": "PUSH1", "value": "0x1"}, "2825": {"op": "PUSH1", "value": "0xA0"}, "2827": {"op": "SHL"}, "2828": {"op": "SUB"}, "2829": {"offset": [1185, 1208], "op": "AND", "path": "0"}, "2830": {"branch": 66, "fn": "Ownable.transferOwnership", "offset": [1185, 1208], "op": "EQ", "path": "0"}, "2831": {"offset": [1177, 1245], "op": "PUSH3", "path": "0", "value": "0xB2D"}, "2835": {"branch": 66, "offset": [1177, 1245], "op": "JUMPI", "path": "0"}, "2836": {"fn": "Ownable.transferOwnership", "offset": [1177, 1245], "op": "PUSH1", "path": "0", "value": "0x40"}, "2838": {"fn": "Ownable.transferOwnership", "offset": [1177, 1245], "op": "MLOAD", "path": "0"}, "2839": {"op": "PUSH3", "value": "0x461BCD"}, "2843": {"op": "PUSH1", "value": "0xE5"}, "2845": {"op": "SHL"}, "2846": {"offset": [1177, 1245], "op": "DUP2", "path": "0"}, "2847": {"fn": "Ownable.transferOwnership", "offset": [1177, 1245], "op": "MSTORE", "path": "0"}, "2848": {"fn": "Ownable.transferOwnership", "offset": [1177, 1245], "op": "PUSH1", "path": "0", "value": "0x4"}, "2850": {"fn": "Ownable.transferOwnership", "offset": [1177, 1245], "op": "ADD", "path": "0"}, "2851": {"fn": "Ownable.transferOwnership", "offset": [1177, 1245], "op": "PUSH3", "path": "0", "value": "0x4DD"}, "2855": {"fn": "Ownable.transferOwnership", "offset": [1177, 1245], "op": "SWAP1", "path": "0"}, "2856": {"fn": "Ownable.transferOwnership", "offset": [1177, 1245], "op": "PUSH3", "path": "0", "value": "0x1049"}, "2860": {"fn": "Ownable.transferOwnership", "jump": "i", "offset": [1177, 1245], "op": "JUMP", "path": "0"}, "2861": {"fn": "Ownable.transferOwnership", "offset": [1177, 1245], "op": "JUMPDEST", "path": "0"}, "2862": {"op": "PUSH1", "value": "0x1"}, "2864": {"op": "PUSH1", "value": "0x1"}, "2866": {"op": "PUSH1", "value": "0xA0"}, "2868": {"op": "SHL"}, "2869": {"op": "SUB"}, "2870": {"fn": "Ownable.transferOwnership", "offset": [1934, 1956], "op": "DUP2", "path": "0", "statement": 35}, "2871": {"branch": 67, "fn": "Ownable.transferOwnership", "offset": [1934, 1956], "op": "AND", "path": "0"}, "2872": {"fn": "Ownable.transferOwnership", "offset": [1926, 1999], "op": "PUSH3", "path": "0", "value": "0xB56"}, "2876": {"branch": 67, "fn": "Ownable.transferOwnership", "offset": [1926, 1999], "op": "JUMPI", "path": "0"}, "2877": {"fn": "Ownable.transferOwnership", "offset": [1926, 1999], "op": "PUSH1", "path": "0", "value": "0x40"}, "2879": {"fn": "Ownable.transferOwnership", "offset": [1926, 1999], "op": "MLOAD", "path": "0"}, "2880": {"op": "PUSH3", "value": "0x461BCD"}, "2884": {"op": "PUSH1", "value": "0xE5"}, "2886": {"op": "SHL"}, "2887": {"fn": "Ownable.transferOwnership", "offset": [1926, 1999], "op": "DUP2", "path": "0"}, "2888": {"fn": "Ownable.transferOwnership", "offset": [1926, 1999], "op": "MSTORE", "path": "0"}, "2889": {"fn": "Ownable.transferOwnership", "offset": [1926, 1999], "op": "PUSH1", "path": "0", "value": "0x4"}, "2891": {"fn": "Ownable.transferOwnership", "offset": [1926, 1999], "op": "ADD", "path": "0"}, "2892": {"fn": "Ownable.transferOwnership", "offset": [1926, 1999], "op": "PUSH3", "path": "0", "value": "0x4DD"}, "2896": {"fn": "Ownable.transferOwnership", "offset": [1926, 1999], "op": "SWAP1", "path": "0"}, "2897": {"fn": "Ownable.transferOwnership", "offset": [1926, 1999], "op": "PUSH3", "path": "0", "value": "0xFCC"}, "2901": {"fn": "Ownable.transferOwnership", "jump": "i", "offset": [1926, 1999], "op": "JUMP", "path": "0"}, "2902": {"fn": "Ownable.transferOwnership", "offset": [1926, 1999], "op": "JUMPDEST", "path": "0"}, "2903": {"fn": "Ownable.transferOwnership", "offset": [2009, 2028], "op": "PUSH3", "path": "0", "statement": 36, "value": "0xB61"}, "2907": {"fn": "Ownable.transferOwnership", "offset": [2019, 2027], "op": "DUP2", "path": "0"}, "2908": {"fn": "Ownable.transferOwnership", "offset": [2009, 2018], "op": "PUSH3", "path": "0", "value": "0xCF9"}, "2912": {"fn": "Ownable.transferOwnership", "jump": "i", "offset": [2009, 2028], "op": "JUMP", "path": "0"}, "2913": {"fn": "Ownable.transferOwnership", "offset": [2009, 2028], "op": "JUMPDEST", "path": "0"}, "2914": {"fn": "Ownable.transferOwnership", "offset": [1846, 2035], "op": "POP", "path": "0"}, "2915": {"fn": "Ownable.transferOwnership", "jump": "o", "offset": [1846, 2035], "op": "JUMP", "path": "0"}, "2916": {"offset": [2271, 2302], "op": "JUMPDEST", "path": "8"}, "2917": {"fn": "Ownable.transferOwnership", "offset": [2271, 2302], "op": "PUSH1", "path": "8", "value": "0x7"}, "2919": {"fn": "Ownable.transferOwnership", "offset": [2271, 2302], "op": "SLOAD", "path": "8"}, "2920": {"fn": "Ownable.transferOwnership", "offset": [2271, 2302], "op": "DUP2", "path": "8"}, "2921": {"fn": "Ownable.transferOwnership", "jump": "o", "offset": [2271, 2302], "op": "JUMP", "path": "8"}, "2922": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3062, 3595], "op": "JUMPDEST", "path": "8"}, "2923": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3119, 3145], "op": "PUSH3", "path": "8", "statement": 37, "value": "0xB74"}, "2927": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3119, 3143], "op": "PUSH3", "path": "8", "value": "0x3F5"}, "2931": {"fn": "LeveragedTrading.issueBtcUp", "jump": "i", "offset": [3119, 3145], "op": "JUMP", "path": "8"}, "2932": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3119, 3145], "op": "JUMPDEST", "path": "8"}, "2933": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3177, 3192], "op": "PUSH3", "path": "8", "statement": 38, "value": "0xB7E"}, "2937": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3177, 3190], "op": "PUSH3", "path": "8", "value": "0xAB2"}, "2941": {"fn": "LeveragedTrading.issueBtcUp", "jump": "i", "offset": [3177, 3192], "op": "JUMP", "path": "8"}, "2942": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3177, 3192], "op": "JUMPDEST", "path": "8"}, "2943": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3164, 3174], "op": "PUSH1", "path": "8", "value": "0x1"}, "2945": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3164, 3192], "op": "DUP2", "path": "8"}, "2946": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3164, 3192], "op": "SWAP1", "path": "8"}, "2947": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3164, 3192], "op": "SSTORE", "path": "8"}, "2948": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3202, 3231], "op": "PUSH1", "path": "8", "value": "0x0"}, "2950": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3202, 3231], "op": "SWAP1", "path": "8"}, "2951": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3234, 3273], "op": "PUSH3", "path": "8", "value": "0xB9A"}, "2955": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3234, 3273], "op": "SWAP1", "path": "8"}, "2956": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3234, 3257], "op": "PUSH3", "path": "8", "value": "0x522"}, "2960": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3234, 3244], "op": "DUP5", "path": "8"}, "2961": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3249, 3256], "op": "PUSH3", "path": "8", "value": "0xF4240"}, "2965": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3234, 3248], "op": "PUSH3", "path": "8", "value": "0xD49"}, "2969": {"fn": "LeveragedTrading.issueBtcUp", "jump": "i", "offset": [3234, 3257], "op": "JUMP", "path": "8"}, "2970": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3234, 3273], "op": "JUMPDEST", "path": "8"}, "2971": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3289], "op": "PUSH1", "path": "8", "statement": 39, "value": "0xA"}, "2973": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3289], "op": "SLOAD", "path": "8"}, "2974": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "PUSH1", "path": "8", "value": "0x40"}, "2976": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "MLOAD", "path": "8"}, "2977": {"op": "PUSH4", "value": "0x140E25AD"}, "2982": {"op": "PUSH1", "value": "0xE3"}, "2984": {"op": "SHL"}, "2985": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "DUP2", "path": "8"}, "2986": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "MSTORE", "path": "8"}, "2987": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3202, 3273], "op": "SWAP2", "path": "8"}, "2988": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3202, 3273], "op": "SWAP3", "path": "8"}, "2989": {"op": "POP"}, "2990": {"op": "PUSH1", "value": "0x1"}, "2992": {"op": "PUSH1", "value": "0x1"}, "2994": {"op": "PUSH1", "value": "0xA0"}, "2996": {"op": "SHL"}, "2997": {"op": "SUB"}, "2998": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3289], "op": "AND", "path": "8"}, "2999": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3289], "op": "SWAP1", "path": "8"}, "3000": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3294], "op": "PUSH4", "path": "8", "value": "0xA0712D68"}, "3005": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3294], "op": "SWAP1", "path": "8"}, "3006": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "PUSH3", "path": "8", "value": "0xBCD"}, "3010": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "SWAP1", "path": "8"}, "3011": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3202, 3273], "op": "DUP5", "path": "8"}, "3012": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3202, 3273], "op": "SWAP1", "path": "8"}, "3013": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "PUSH1", "path": "8", "value": "0x4"}, "3015": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "ADD", "path": "8"}, "3016": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "PUSH3", "path": "8", "value": "0x10B5"}, "3020": {"fn": "LeveragedTrading.issueBtcUp", "jump": "i", "offset": [3284, 3317], "op": "JUMP", "path": "8"}, "3021": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "JUMPDEST", "path": "8"}, "3022": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "PUSH1", "path": "8", "value": "0x0"}, "3024": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "PUSH1", "path": "8", "value": "0x40"}, "3026": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "MLOAD", "path": "8"}, "3027": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "DUP1", "path": "8"}, "3028": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "DUP4", "path": "8"}, "3029": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "SUB", "path": "8"}, "3030": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "DUP2", "path": "8"}, "3031": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "PUSH1", "path": "8", "value": "0x0"}, "3033": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "DUP8", "path": "8"}, "3034": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "DUP1", "path": "8"}, "3035": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "EXTCODESIZE", "path": "8"}, "3036": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "ISZERO", "path": "8"}, "3037": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "DUP1", "path": "8"}, "3038": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "ISZERO", "path": "8"}, "3039": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "PUSH3", "path": "8", "value": "0xBE8"}, "3043": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "JUMPI", "path": "8"}, "3044": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "PUSH1", "path": "8", "value": "0x0"}, "3046": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "DUP1", "path": "8"}, "3047": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "REVERT", "path": "8"}, "3048": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "JUMPDEST", "path": "8"}, "3049": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "POP", "path": "8"}, "3050": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "GAS", "path": "8"}, "3051": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "CALL", "path": "8"}, "3052": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "ISZERO", "path": "8"}, "3053": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "DUP1", "path": "8"}, "3054": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "ISZERO", "path": "8"}, "3055": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "PUSH3", "path": "8", "value": "0xBFD"}, "3059": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "JUMPI", "path": "8"}, "3060": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "RETURNDATASIZE", "path": "8"}, "3061": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "PUSH1", "path": "8", "value": "0x0"}, "3063": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "DUP1", "path": "8"}, "3064": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "RETURNDATACOPY", "path": "8"}, "3065": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "RETURNDATASIZE", "path": "8"}, "3066": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "PUSH1", "path": "8", "value": "0x0"}, "3068": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "REVERT", "path": "8"}, "3069": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3284, 3317], "op": "JUMPDEST", "path": "8"}, "3070": {"op": "POP"}, "3071": {"op": "POP"}, "3072": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3341, 3352], "op": "PUSH1", "path": "8", "statement": 40, "value": "0x5"}, "3074": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3341, 3352], "op": "SLOAD", "path": "8"}, "3075": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3341, 3379], "op": "PUSH3", "path": "8", "value": "0xC11"}, "3079": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3341, 3379], "op": "SWAP3", "path": "8"}, "3080": {"op": "POP"}, "3081": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3341, 3352], "op": "SWAP1", "path": "8"}, "3082": {"op": "POP"}, "3083": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3357, 3378], "op": "DUP3", "path": "8"}, "3084": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3341, 3356], "op": "PUSH3", "path": "8", "value": "0xCD2"}, "3088": {"fn": "LeveragedTrading.issueBtcUp", "jump": "i", "offset": [3341, 3379], "op": "JUMP", "path": "8"}, "3089": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3341, 3379], "op": "JUMPDEST", "path": "8"}, "3090": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3327, 3338], "op": "PUSH1", "path": "8", "value": "0x5"}, "3092": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3327, 3379], "op": "SSTORE", "path": "8"}, "3093": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3407, 3422], "op": "PUSH1", "path": "8", "statement": 41, "value": "0x3"}, "3095": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3407, 3422], "op": "SLOAD", "path": "8"}, "3096": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3407, 3438], "op": "PUSH3", "path": "8", "value": "0xC23"}, "3100": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3407, 3438], "op": "SWAP1", "path": "8"}, "3101": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3427, 3437], "op": "DUP4", "path": "8"}, "3102": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3407, 3426], "op": "PUSH3", "path": "8", "value": "0xCD2"}, "3106": {"fn": "LeveragedTrading.issueBtcUp", "jump": "i", "offset": [3407, 3438], "op": "JUMP", "path": "8"}, "3107": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3407, 3438], "op": "JUMPDEST", "path": "8"}, "3108": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3389, 3404], "op": "PUSH1", "path": "8", "value": "0x3"}, "3110": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3389, 3438], "op": "SSTORE", "path": "8"}, "3111": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3470, 3481], "op": "PUSH1", "path": "8", "value": "0x8"}, "3113": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3470, 3481], "op": "SLOAD", "path": "8"}, "3114": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3500, 3556], "op": "PUSH1", "path": "8", "statement": 42, "value": "0x40"}, "3116": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3500, 3556], "op": "MLOAD", "path": "8"}, "3117": {"op": "PUSH4", "value": "0x23B872DD"}, "3122": {"op": "PUSH1", "value": "0xE0"}, "3124": {"op": "SHL"}, "3125": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3500, 3556], "op": "DUP2", "path": "8"}, "3126": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3500, 3556], "op": "MSTORE", "path": "8"}, "3127": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3470, 3481], "op": "PUSH2", "path": "8", "value": "0x100"}, "3130": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3470, 3481], "op": "SWAP1", "path": "8"}, "3131": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3470, 3481], "op": "SWAP2", "path": "8"}, "3132": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3470, 3481], "op": "DIV", "path": "8"}, "3133": {"op": "PUSH1", "value": "0x1"}, "3135": {"op": "PUSH1", "value": "0x1"}, "3137": {"op": "PUSH1", "value": "0xA0"}, "3139": {"op": "SHL"}, "3140": {"op": "SUB"}, "3141": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3470, 3481], "op": "AND", "path": "8"}, "3142": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3470, 3481], "op": "SWAP1", "path": "8"}, "3143": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3470, 3481], "op": "DUP2", "path": "8"}, "3144": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3470, 3481], "op": "SWAP1", "path": "8"}, "3145": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3500, 3517], "op": "PUSH4", "path": "8", "value": "0x23B872DD"}, "3150": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3500, 3517], "op": "SWAP1", "path": "8"}, "3151": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3500, 3556], "op": "PUSH3", "path": "8", "value": "0x904"}, "3155": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3500, 3556], "op": "SWAP1", "path": "8"}, "3156": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3518, 3528], "op": "CALLER", "path": "8"}, "3157": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3518, 3528], "op": "SWAP1", "path": "8"}, "3158": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3538, 3542], "op": "ADDRESS", "path": "8"}, "3159": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3538, 3542], "op": "SWAP1", "path": "8"}, "3160": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3545, 3555], "op": "DUP9", "path": "8"}, "3161": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3545, 3555], "op": "SWAP1", "path": "8"}, "3162": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3500, 3556], "op": "PUSH1", "path": "8", "value": "0x4"}, "3164": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3500, 3556], "op": "ADD", "path": "8"}, "3165": {"fn": "LeveragedTrading.issueBtcUp", "offset": [3500, 3556], "op": "PUSH3", "path": "8", "value": "0xF84"}, "3169": {"branch": 62, "fn": "LeveragedTrading.issueBtcUp", "jump": "i", "offset": [3500, 3556], "op": "JUMP", "path": "8"}, "3170": {"offset": [2352, 2389], "op": "JUMPDEST", "path": "8"}, "3171": {"fn": "LeveragedTrading.issueBtcUp", "offset": [2352, 2389], "op": "PUSH1", "path": "8", "value": "0x8"}, "3173": {"fn": "LeveragedTrading.issueBtcUp", "offset": [2352, 2389], "op": "SLOAD", "path": "8"}, "3174": {"fn": "LeveragedTrading.issueBtcUp", "offset": [2352, 2389], "op": "PUSH1", "path": "8", "value": "0xFF"}, "3176": {"fn": "LeveragedTrading.issueBtcUp", "offset": [2352, 2389], "op": "AND", "path": "8"}, "3177": {"fn": "LeveragedTrading.issueBtcUp", "offset": [2352, 2389], "op": "DUP2", "path": "8"}, "3178": {"fn": "LeveragedTrading.issueBtcUp", "jump": "o", "offset": [2352, 2389], "op": "JUMP", "path": "8"}, "3179": {"fn": "LeveragedTrading.getRebalanceAmount", "offset": [6198, 6423], "op": "JUMPDEST", "path": "8"}, "3180": {"fn": "LeveragedTrading.getRebalanceAmount", "offset": [6267, 6274], "op": "PUSH1", "path": "8", "value": "0x0"}, "3182": {"fn": "LeveragedTrading.getRebalanceAmount", "offset": [6286, 6303], "op": "DUP1", "path": "8"}, "3183": {"fn": "LeveragedTrading.getRebalanceAmount", "offset": [6306, 6328], "op": "PUSH3", "path": "8", "value": "0xC79"}, "3187": {"fn": "LeveragedTrading.getRebalanceAmount", "offset": [6319, 6327], "op": "DUP4", "path": "8"}, "3188": {"fn": "LeveragedTrading.getRebalanceAmount", "offset": [6306, 6318], "op": "PUSH3", "path": "8", "value": "0xD65"}, "3192": {"fn": "LeveragedTrading.getRebalanceAmount", "jump": "i", "offset": [6306, 6328], "op": "JUMP", "path": "8"}, "3193": {"fn": "LeveragedTrading.getRebalanceAmount", "offset": [6306, 6328], "op": "JUMPDEST", "path": "8"}, "3194": {"fn": "LeveragedTrading.getRebalanceAmount", "offset": [6286, 6328], "op": "SWAP1", "path": "8"}, "3195": {"fn": "LeveragedTrading.getRebalanceAmount", "offset": [6286, 6328], "op": "POP", "path": "8"}, "3196": {"fn": "LeveragedTrading.getRebalanceAmount", "offset": [6346, 6416], "op": "PUSH3", "path": "8", "statement": 43, "value": "0xCA9"}, "3200": {"fn": "LeveragedTrading.getRebalanceAmount", "offset": [6408, 6415], "op": "PUSH3", "path": "8", "value": "0xF4240"}, "3204": {"fn": "LeveragedTrading.getRebalanceAmount", "offset": [6346, 6403], "op": "PUSH3", "path": "8", "value": "0x522"}, "3208": {"fn": "LeveragedTrading.getRebalanceAmount", "offset": [6390, 6402], "op": "PUSH3", "path": "8", "value": "0xC92"}, "3212": {"fn": "LeveragedTrading.getRebalanceAmount", "offset": [6392, 6401], "op": "DUP5", "path": "8"}, "3213": {"fn": "LeveragedTrading.getRebalanceAmount", "offset": [6390, 6391], "op": "PUSH3", "path": "8", "value": "0xDCF"}, "3217": {"fn": "LeveragedTrading.getRebalanceAmount", "jump": "i", "offset": [6390, 6402], "op": "JUMP", "path": "8"}, "3218": {"fn": "LeveragedTrading.getRebalanceAmount", "offset": [6390, 6402], "op": "JUMPDEST", "path": "8"}, "3219": {"fn": "LeveragedTrading.getRebalanceAmount", "offset": [6346, 6385], "op": "PUSH3", "path": "8", "value": "0xCA2"}, "3223": {"fn": "LeveragedTrading.getRebalanceAmount", "offset": [6350, 6365], "op": "PUSH1", "path": "8", "value": "0x3"}, "3225": {"fn": "LeveragedTrading.getRebalanceAmount", "offset": [6350, 6365], "op": "SLOAD", "path": "8"}, "3226": {"fn": "LeveragedTrading.getRebalanceAmount", "offset": [6367, 6384], "op": "PUSH1", "path": "8", "value": "0x4"}, "3228": {"fn": "LeveragedTrading.getRebalanceAmount", "offset": [6367, 6384], "op": "SLOAD", "path": "8"}, "3229": {"fn": "LeveragedTrading.getRebalanceAmount", "offset": [6346, 6349], "op": "PUSH3", "path": "8", "value": "0xE4F"}, "3233": {"fn": "LeveragedTrading.getRebalanceAmount", "jump": "i", "offset": [6346, 6385], "op": "JUMP", "path": "8"}, "3234": {"fn": "LeveragedTrading.getRebalanceAmount", "offset": [6346, 6385], "op": "JUMPDEST", "path": "8"}, "3235": {"fn": "LeveragedTrading.getRebalanceAmount", "offset": [6346, 6389], "op": "SWAP1", "path": "8"}, "3236": {"fn": "LeveragedTrading.getRebalanceAmount", "offset": [6346, 6389], "op": "PUSH3", "path": "8", "value": "0xD49"}, "3240": {"fn": "LeveragedTrading.getRebalanceAmount", "jump": "i", "offset": [6346, 6403], "op": "JUMP", "path": "8"}, "3241": {"fn": "LeveragedTrading.getRebalanceAmount", "offset": [6346, 6416], "op": "JUMPDEST", "path": "8"}, "3242": {"fn": "LeveragedTrading.getRebalanceAmount", "offset": [6339, 6416], "op": "SWAP2", "path": "8"}, "3243": {"fn": "LeveragedTrading.getRebalanceAmount", "offset": [6339, 6416], "op": "POP", "path": "8"}, "3244": {"fn": "LeveragedTrading.getRebalanceAmount", "offset": [6339, 6416], "op": "POP", "path": "8"}, "3245": {"fn": "LeveragedTrading.getRebalanceAmount", "offset": [6198, 6423], "op": "JUMPDEST", "path": "8"}, "3246": {"fn": "LeveragedTrading.getRebalanceAmount", "offset": [6198, 6423], "op": "SWAP2", "path": "8"}, "3247": {"fn": "LeveragedTrading.getRebalanceAmount", "offset": [6198, 6423], "op": "SWAP1", "path": "8"}, "3248": {"fn": "LeveragedTrading.getRebalanceAmount", "offset": [6198, 6423], "op": "POP", "path": "8"}, "3249": {"fn": "LeveragedTrading.getRebalanceAmount", "jump": "o", "offset": [6198, 6423], "op": "JUMP", "path": "8"}, "3250": {"fn": "LeveragedTrading.getSign", "offset": [5999, 6191], "op": "JUMPDEST", "path": "8"}, "3251": {"fn": "LeveragedTrading.getSign", "offset": [6057, 6063], "op": "PUSH1", "path": "8", "value": "0x0"}, "3253": {"fn": "LeveragedTrading.getSign", "offset": [6090, 6102], "op": "PUSH1", "path": "8", "value": "0x7"}, "3255": {"fn": "LeveragedTrading.getSign", "offset": [6090, 6102], "op": "SLOAD", "path": "8"}, "3256": {"fn": "LeveragedTrading.getSign", "offset": [6079, 6087], "op": "DUP3", "path": "8"}, "3257": {"branch": 63, "fn": "LeveragedTrading.getSign", "offset": [6079, 6102], "op": "GT", "path": "8"}, "3258": {"fn": "LeveragedTrading.getSign", "offset": [6075, 6185], "op": "ISZERO", "path": "8"}, "3259": {"fn": "LeveragedTrading.getSign", "offset": [6075, 6185], "op": "PUSH3", "path": "8", "value": "0xCC8"}, "3263": {"branch": 63, "fn": "LeveragedTrading.getSign", "offset": [6075, 6185], "op": "JUMPI", "path": "8"}, "3264": {"op": "POP"}, "3265": {"fn": "LeveragedTrading.getSign", "offset": [6125, 6126], "op": "PUSH1", "path": "8", "statement": 44, "value": "0x1"}, "3267": {"fn": "LeveragedTrading.getSign", "offset": [6118, 6126], "op": "PUSH3", "path": "8", "value": "0xCAD"}, "3271": {"fn": "LeveragedTrading.getSign", "offset": [6118, 6126], "op": "JUMP", "path": "8"}, "3272": {"fn": "LeveragedTrading.getSign", "offset": [6075, 6185], "op": "JUMPDEST", "path": "8"}, "3273": {"op": "POP"}, "3274": {"op": "PUSH1", "value": "0x0"}, "3276": {"op": "NOT"}, "3277": {"fn": "LeveragedTrading.getSign", "offset": [6165, 6174], "op": "PUSH3", "path": "8", "statement": 45, "value": "0xCAD"}, "3281": {"fn": "LeveragedTrading.getSign", "offset": [6165, 6174], "op": "JUMP", "path": "8"}, "3282": {"fn": "SafeMath.add", "offset": [2672, 2768], "op": "JUMPDEST", "path": "6"}, "3283": {"fn": "SafeMath.add", "offset": [2730, 2737], "op": "PUSH1", "path": "6", "value": "0x0"}, "3285": {"fn": "SafeMath.add", "offset": [2756, 2761], "op": "PUSH3", "path": "6", "statement": 46, "value": "0xCE0"}, "3289": {"fn": "SafeMath.add", "offset": [2760, 2761], "op": "DUP3", "path": "6"}, "3290": {"fn": "SafeMath.add", "offset": [2756, 2757], "op": "DUP5", "path": "6"}, "3291": {"fn": "SafeMath.add", "offset": [2756, 2761], "op": "PUSH3", "path": "6", "value": "0x10BE"}, "3295": {"fn": "SafeMath.add", "jump": "i", "offset": [2756, 2761], "op": "JUMP", "path": "6"}, "3296": {"fn": "SafeMath.add", "offset": [2756, 2761], "op": "JUMPDEST", "path": "6"}, "3297": {"fn": "SafeMath.add", "offset": [2749, 2761], "op": "SWAP4", "path": "6"}, "3298": {"fn": "SafeMath.add", "offset": [2672, 2768], "op": "SWAP3", "path": "6"}, "3299": {"op": "POP"}, "3300": {"op": "POP"}, "3301": {"op": "POP"}, "3302": {"fn": "SafeMath.add", "jump": "o", "offset": [2672, 2768], "op": "JUMP", "path": "6"}, "3303": {"fn": "SafeMath.sub", "offset": [3039, 3135], "op": "JUMPDEST", "path": "6"}, "3304": {"fn": "SafeMath.sub", "offset": [3097, 3104], "op": "PUSH1", "path": "6", "value": "0x0"}, "3306": {"fn": "SafeMath.sub", "offset": [3123, 3128], "op": "PUSH3", "path": "6", "statement": 47, "value": "0xCE0"}, "3310": {"fn": "SafeMath.sub", "offset": [3127, 3128], "op": "DUP3", "path": "6"}, "3311": {"fn": "SafeMath.sub", "offset": [3123, 3124], "op": "DUP5", "path": "6"}, "3312": {"fn": "SafeMath.sub", "offset": [3123, 3128], "op": "PUSH3", "path": "6", "value": "0x1254"}, "3316": {"fn": "SafeMath.sub", "jump": "i", "offset": [3123, 3128], "op": "JUMP", "path": "6"}, "3317": {"fn": "Context._msgSender", "offset": [586, 682], "op": "JUMPDEST", "path": "5"}, "3318": {"fn": "Context._msgSender", "offset": [665, 675], "op": "CALLER", "path": "5", "statement": 48}, "3319": {"fn": "Context._msgSender", "offset": [586, 682], "op": "SWAP1", "path": "5"}, "3320": {"fn": "Context._msgSender", "jump": "o", "offset": [586, 682], "op": "JUMP", "path": "5"}, "3321": {"fn": "Ownable._setOwner", "offset": [2041, 2210], "op": "JUMPDEST", "path": "0"}, "3322": {"fn": "Ownable._setOwner", "offset": [2096, 2112], "op": "PUSH1", "path": "0", "value": "0x0"}, "3324": {"fn": "Ownable._setOwner", "offset": [2115, 2121], "op": "DUP1", "path": "0"}, "3325": {"fn": "Ownable._setOwner", "offset": [2115, 2121], "op": "SLOAD", "path": "0"}, "3326": {"op": "PUSH1", "value": "0x1"}, "3328": {"op": "PUSH1", "value": "0x1"}, "3330": {"op": "PUSH1", "value": "0xA0"}, "3332": {"op": "SHL"}, "3333": {"op": "SUB"}, "3334": {"fn": "Ownable._setOwner", "offset": [2131, 2148], "op": "DUP4", "path": "0", "statement": 49}, "3335": {"fn": "Ownable._setOwner", "offset": [2131, 2148], "op": "DUP2", "path": "0"}, "3336": {"fn": "Ownable._setOwner", "offset": [2131, 2148], "op": "AND", "path": "0"}, "3337": {"op": "PUSH1", "value": "0x1"}, "3339": {"op": "PUSH1", "value": "0x1"}, "3341": {"op": "PUSH1", "value": "0xA0"}, "3343": {"op": "SHL"}, "3344": {"op": "SUB"}, "3345": {"op": "NOT"}, "3346": {"fn": "Ownable._setOwner", "offset": [2131, 2148], "op": "DUP4", "path": "0"}, "3347": {"fn": "Ownable._setOwner", "offset": [2131, 2148], "op": "AND", "path": "0"}, "3348": {"fn": "Ownable._setOwner", "offset": [2131, 2148], "op": "DUP2", "path": "0"}, "3349": {"fn": "Ownable._setOwner", "offset": [2131, 2148], "op": "OR", "path": "0"}, "3350": {"fn": "Ownable._setOwner", "offset": [2131, 2148], "op": "DUP5", "path": "0"}, "3351": {"fn": "Ownable._setOwner", "offset": [2131, 2148], "op": "SSTORE", "path": "0"}, "3352": {"fn": "Ownable._setOwner", "offset": [2163, 2203], "op": "PUSH1", "path": "0", "statement": 50, "value": "0x40"}, "3354": {"fn": "Ownable._setOwner", "offset": [2163, 2203], "op": "MLOAD", "path": "0"}, "3355": {"fn": "Ownable._setOwner", "offset": [2115, 2121], "op": "SWAP2", "path": "0"}, "3356": {"fn": "Ownable._setOwner", "offset": [2115, 2121], "op": "SWAP1", "path": "0"}, "3357": {"fn": "Ownable._setOwner", "offset": [2115, 2121], "op": "SWAP3", "path": "0"}, "3358": {"fn": "Ownable._setOwner", "offset": [2115, 2121], "op": "AND", "path": "0"}, "3359": {"fn": "Ownable._setOwner", "offset": [2115, 2121], "op": "SWAP3", "path": "0"}, "3360": {"fn": "Ownable._setOwner", "offset": [2115, 2121], "op": "DUP4", "path": "0"}, "3361": {"fn": "Ownable._setOwner", "offset": [2115, 2121], "op": "SWAP2", "path": "0"}, "3362": {"fn": "Ownable._setOwner", "offset": [2163, 2203], "op": "PUSH32", "path": "0", "value": "0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"}, "3395": {"fn": "Ownable._setOwner", "offset": [2163, 2203], "op": "SWAP2", "path": "0"}, "3396": {"fn": "Ownable._setOwner", "offset": [2096, 2112], "op": "SWAP1", "path": "0"}, "3397": {"fn": "Ownable._setOwner", "offset": [2163, 2203], "op": "LOG3", "path": "0"}, "3398": {"fn": "Ownable._setOwner", "offset": [2041, 2210], "op": "POP", "path": "0"}, "3399": {"fn": "Ownable._setOwner", "offset": [2041, 2210], "op": "POP", "path": "0"}, "3400": {"fn": "Ownable._setOwner", "jump": "o", "offset": [2041, 2210], "op": "JUMP", "path": "0"}, "3401": {"fn": "SafeMath.mul", "offset": [3382, 3478], "op": "JUMPDEST", "path": "6"}, "3402": {"fn": "SafeMath.mul", "offset": [3440, 3447], "op": "PUSH1", "path": "6", "value": "0x0"}, "3404": {"fn": "SafeMath.mul", "offset": [3466, 3471], "op": "PUSH3", "path": "6", "statement": 51, "value": "0xCE0"}, "3408": {"fn": "SafeMath.mul", "offset": [3470, 3471], "op": "DUP3", "path": "6"}, "3409": {"fn": "SafeMath.mul", "offset": [3466, 3467], "op": "DUP5", "path": "6"}, "3410": {"fn": "SafeMath.mul", "offset": [3466, 3471], "op": "PUSH3", "path": "6", "value": "0x1232"}, "3414": {"fn": "SafeMath.mul", "jump": "i", "offset": [3466, 3471], "op": "JUMP", "path": "6"}, "3415": {"fn": "SafeMath.div", "offset": [3767, 3863], "op": "JUMPDEST", "path": "6"}, "3416": {"fn": "SafeMath.div", "offset": [3825, 3832], "op": "PUSH1", "path": "6", "value": "0x0"}, "3418": {"fn": "SafeMath.div", "offset": [3851, 3856], "op": "PUSH3", "path": "6", "statement": 52, "value": "0xCE0"}, "3422": {"fn": "SafeMath.div", "offset": [3855, 3856], "op": "DUP3", "path": "6"}, "3423": {"fn": "SafeMath.div", "offset": [3851, 3852], "op": "DUP5", "path": "6"}, "3424": {"fn": "SafeMath.div", "offset": [3851, 3856], "op": "PUSH3", "path": "6", "value": "0x10D9"}, "3428": {"fn": "SafeMath.div", "jump": "i", "offset": [3851, 3856], "op": "JUMP", "path": "6"}, "3429": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7554, 7872], "op": "JUMPDEST", "path": "8"}, "3430": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7617, 7624], "op": "PUSH1", "path": "8", "value": "0x0"}, "3432": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7668, 7680], "op": "PUSH1", "path": "8", "value": "0x7"}, "3434": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7668, 7680], "op": "SLOAD", "path": "8"}, "3435": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7657, 7665], "op": "DUP3", "path": "8"}, "3436": {"branch": 64, "fn": "LeveragedTrading.getPriceDiff", "offset": [7657, 7680], "op": "GT", "path": "8"}, "3437": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7653, 7865], "op": "ISZERO", "path": "8"}, "3438": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7653, 7865], "op": "PUSH3", "path": "8", "value": "0xDA8"}, "3442": {"branch": 64, "fn": "LeveragedTrading.getPriceDiff", "offset": [7653, 7865], "op": "JUMPI", "path": "8"}, "3443": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7703, 7755], "op": "PUSH3", "path": "8", "statement": 53, "value": "0xDA0"}, "3447": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7747, 7754], "op": "PUSH3", "path": "8", "value": "0xF4240"}, "3451": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7703, 7742], "op": "PUSH3", "path": "8", "value": "0xD99"}, "3455": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7729, 7741], "op": "PUSH1", "path": "8", "value": "0x7"}, "3457": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7729, 7741], "op": "SLOAD", "path": "8"}, "3458": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7703, 7724], "op": "PUSH3", "path": "8", "value": "0x522"}, "3462": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7716, 7723], "op": "PUSH3", "path": "8", "value": "0xF4240"}, "3466": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7703, 7711], "op": "DUP8", "path": "8"}, "3467": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7703, 7715], "op": "PUSH3", "path": "8", "value": "0xD49"}, "3471": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7703, 7715], "op": "SWAP1", "path": "8"}, "3472": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7703, 7724], "op": "SWAP2", "path": "8"}, "3473": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7703, 7724], "op": "SWAP1", "path": "8"}, "3474": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7703, 7724], "op": "PUSH4", "path": "8", "value": "0xFFFFFFFF"}, "3479": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7703, 7724], "op": "AND", "path": "8"}, "3480": {"fn": "LeveragedTrading.getPriceDiff", "jump": "i", "offset": [7703, 7724], "op": "JUMP", "path": "8"}, "3481": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7703, 7742], "op": "JUMPDEST", "path": "8"}, "3482": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7703, 7746], "op": "SWAP1", "path": "8"}, "3483": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7703, 7746], "op": "PUSH3", "path": "8", "value": "0xCE7"}, "3487": {"fn": "LeveragedTrading.getPriceDiff", "jump": "i", "offset": [7703, 7755], "op": "JUMP", "path": "8"}, "3488": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7703, 7755], "op": "JUMPDEST", "path": "8"}, "3489": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7696, 7755], "op": "SWAP1", "path": "8"}, "3490": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7696, 7755], "op": "POP", "path": "8"}, "3491": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7696, 7755], "op": "PUSH3", "path": "8", "value": "0xCAD"}, "3495": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7696, 7755], "op": "JUMP", "path": "8"}, "3496": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7653, 7865], "op": "JUMPDEST", "path": "8"}, "3497": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7802, 7854], "op": "PUSH3", "path": "8", "statement": 54, "value": "0xDA0"}, "3501": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7846, 7853], "op": "PUSH3", "path": "8", "value": "0xF4240"}, "3505": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7802, 7841], "op": "PUSH3", "path": "8", "value": "0xD99"}, "3509": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7832, 7840], "op": "DUP5", "path": "8"}, "3510": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7802, 7827], "op": "PUSH3", "path": "8", "value": "0x522"}, "3514": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7819, 7826], "op": "PUSH3", "path": "8", "value": "0xF4240"}, "3518": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7802, 7814], "op": "PUSH1", "path": "8", "value": "0x7"}, "3520": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7802, 7814], "op": "SLOAD", "path": "8"}, "3521": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7802, 7818], "op": "PUSH3", "path": "8", "value": "0xD49"}, "3525": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7802, 7818], "op": "SWAP1", "path": "8"}, "3526": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7802, 7827], "op": "SWAP2", "path": "8"}, "3527": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7802, 7827], "op": "SWAP1", "path": "8"}, "3528": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7802, 7827], "op": "PUSH4", "path": "8", "value": "0xFFFFFFFF"}, "3533": {"fn": "LeveragedTrading.getPriceDiff", "offset": [7802, 7827], "op": "AND", "path": "8"}, "3534": {"fn": "LeveragedTrading.getPriceDiff", "jump": "i", "offset": [7802, 7827], "op": "JUMP", "path": "8"}, "3535": {"fn": "LeveragedTrading.L", "offset": [7323, 7548], "op": "JUMPDEST", "path": "8"}, "3536": {"fn": "LeveragedTrading.L", "offset": [7368, 7375], "op": "PUSH1", "path": "8", "value": "0x0"}, "3538": {"fn": "LeveragedTrading.L", "offset": [7368, 7375], "op": "DUP1", "path": "8"}, "3539": {"fn": "LeveragedTrading.L", "offset": [7455, 7460], "op": "PUSH3", "path": "8", "value": "0xDDF"}, "3543": {"fn": "LeveragedTrading.L", "offset": [7459, 7460], "op": "DUP4", "path": "8"}, "3544": {"fn": "LeveragedTrading.L", "offset": [7455, 7456], "op": "PUSH1", "path": "8", "value": "0x3"}, "3546": {"fn": "LeveragedTrading.L", "offset": [7455, 7460], "op": "PUSH3", "path": "8", "value": "0x1232"}, "3550": {"fn": "LeveragedTrading.L", "jump": "i", "offset": [7455, 7460], "op": "JUMP", "path": "8"}, "3551": {"fn": "LeveragedTrading.L", "offset": [7455, 7460], "op": "JUMPDEST", "path": "8"}, "3552": {"fn": "LeveragedTrading.L", "offset": [7443, 7450], "op": "PUSH3", "path": "8", "value": "0xF4240"}, "3556": {"fn": "LeveragedTrading.L", "offset": [7434, 7440], "op": "PUSH3", "path": "8", "value": "0xDF0"}, "3560": {"fn": "LeveragedTrading.L", "offset": [7439, 7440], "op": "PUSH1", "path": "8", "value": "0x2"}, "3562": {"fn": "LeveragedTrading.L", "offset": [7434, 7435], "op": "DUP7", "path": "8"}, "3563": {"fn": "LeveragedTrading.L", "offset": [7434, 7440], "op": "PUSH3", "path": "8", "value": "0x1147"}, "3567": {"fn": "LeveragedTrading.L", "jump": "i", "offset": [7434, 7440], "op": "JUMP", "path": "8"}, "3568": {"fn": "LeveragedTrading.L", "offset": [7434, 7440], "op": "JUMPDEST", "path": "8"}, "3569": {"fn": "LeveragedTrading.L", "offset": [7434, 7450], "op": "PUSH3", "path": "8", "value": "0xDFC"}, "3573": {"fn": "LeveragedTrading.L", "offset": [7434, 7450], "op": "SWAP2", "path": "8"}, "3574": {"fn": "LeveragedTrading.L", "offset": [7434, 7450], "op": "SWAP1", "path": "8"}, "3575": {"fn": "LeveragedTrading.L", "offset": [7434, 7450], "op": "PUSH3", "path": "8", "value": "0x10D9"}, "3579": {"fn": "LeveragedTrading.L", "jump": "i", "offset": [7434, 7450], "op": "JUMP", "path": "8"}, "3580": {"fn": "LeveragedTrading.L", "offset": [7434, 7450], "op": "JUMPDEST", "path": "8"}, "3581": {"fn": "LeveragedTrading.L", "offset": [7429, 7451], "op": "PUSH3", "path": "8", "value": "0xE09"}, "3585": {"fn": "LeveragedTrading.L", "offset": [7429, 7451], "op": "SWAP1", "path": "8"}, "3586": {"fn": "LeveragedTrading.L", "offset": [7429, 7430], "op": "PUSH1", "path": "8", "value": "0x9"}, "3588": {"fn": "LeveragedTrading.L", "offset": [7429, 7451], "op": "PUSH3", "path": "8", "value": "0x1232"}, "3592": {"fn": "LeveragedTrading.L", "jump": "i", "offset": [7429, 7451], "op": "JUMP", "path": "8"}, "3593": {"fn": "LeveragedTrading.L", "offset": [7429, 7451], "op": "JUMPDEST", "path": "8"}, "3594": {"fn": "LeveragedTrading.L", "offset": [7429, 7460], "op": "PUSH3", "path": "8", "value": "0xE15"}, "3598": {"fn": "LeveragedTrading.L", "offset": [7429, 7460], "op": "SWAP2", "path": "8"}, "3599": {"fn": "LeveragedTrading.L", "offset": [7429, 7460], "op": "SWAP1", "path": "8"}, "3600": {"fn": "LeveragedTrading.L", "offset": [7429, 7460], "op": "PUSH3", "path": "8", "value": "0x10BE"}, "3604": {"fn": "LeveragedTrading.L", "jump": "i", "offset": [7429, 7460], "op": "JUMP", "path": "8"}, "3605": {"fn": "LeveragedTrading.L", "offset": [7429, 7460], "op": "JUMPDEST", "path": "8"}, "3606": {"fn": "LeveragedTrading.L", "offset": [7429, 7470], "op": "PUSH3", "path": "8", "value": "0xE24"}, "3610": {"fn": "LeveragedTrading.L", "offset": [7429, 7470], "op": "SWAP1", "path": "8"}, "3611": {"fn": "LeveragedTrading.L", "offset": [7463, 7470], "op": "PUSH3", "path": "8", "value": "0xF4240"}, "3615": {"fn": "LeveragedTrading.L", "offset": [7429, 7470], "op": "PUSH3", "path": "8", "value": "0x10BE"}, "3619": {"fn": "LeveragedTrading.L", "jump": "i", "offset": [7429, 7470], "op": "JUMP", "path": "8"}, "3620": {"fn": "LeveragedTrading.L", "offset": [7429, 7470], "op": "JUMPDEST", "path": "8"}, "3621": {"fn": "LeveragedTrading.L", "offset": [7413, 7470], "op": "SWAP1", "path": "8"}, "3622": {"op": "POP"}, "3623": {"fn": "LeveragedTrading.L", "offset": [7494, 7502], "op": "PUSH5", "path": "8", "value": "0xE8D4A51000"}, "3629": {"fn": "LeveragedTrading.L", "offset": [7530, 7541], "op": "PUSH3", "path": "8", "statement": 55, "value": "0xE38"}, "3633": {"fn": "LeveragedTrading.L", "offset": [7413, 7470], "op": "DUP3", "path": "8"}, "3634": {"fn": "LeveragedTrading.L", "offset": [7494, 7502], "op": "DUP3", "path": "8"}, "3635": {"fn": "LeveragedTrading.L", "offset": [7530, 7541], "op": "PUSH3", "path": "8", "value": "0x10D9"}, "3639": {"fn": "LeveragedTrading.L", "jump": "i", "offset": [7530, 7541], "op": "JUMP", "path": "8"}, "3640": {"fn": "LeveragedTrading.L", "offset": [7530, 7541], "op": "JUMPDEST", "path": "8"}, "3641": {"fn": "LeveragedTrading.L", "offset": [7520, 7541], "op": "PUSH3", "path": "8", "value": "0xE47"}, "3645": {"fn": "LeveragedTrading.L", "offset": [7520, 7541], "op": "SWAP1", "path": "8"}, "3646": {"fn": "LeveragedTrading.L", "offset": [7520, 7527], "op": "PUSH3", "path": "8", "value": "0xF4240"}, "3650": {"fn": "LeveragedTrading.L", "offset": [7520, 7541], "op": "PUSH3", "path": "8", "value": "0x1254"}, "3654": {"fn": "LeveragedTrading.L", "jump": "i", "offset": [7520, 7541], "op": "JUMP", "path": "8"}, "3655": {"fn": "LeveragedTrading.L", "offset": [7520, 7541], "op": "JUMPDEST", "path": "8"}, "3656": {"fn": "LeveragedTrading.L", "offset": [7513, 7541], "op": "SWAP5", "path": "8"}, "3657": {"fn": "LeveragedTrading.L", "offset": [7323, 7548], "op": "SWAP4", "path": "8"}, "3658": {"op": "POP"}, "3659": {"op": "POP"}, "3660": {"op": "POP"}, "3661": {"op": "POP"}, "3662": {"fn": "LeveragedTrading.L", "jump": "o", "offset": [7323, 7548], "op": "JUMP", "path": "8"}, "3663": {"fn": "LeveragedTrading.min", "offset": [7212, 7317], "op": "JUMPDEST", "path": "8"}, "3664": {"fn": "LeveragedTrading.min", "offset": [7270, 7277], "op": "PUSH1", "path": "8", "value": "0x0"}, "3666": {"fn": "LeveragedTrading.min", "offset": [7301, 7302], "op": "DUP2", "path": "8", "statement": 56}, "3667": {"fn": "LeveragedTrading.min", "offset": [7296, 7297], "op": "DUP4", "path": "8"}, "3668": {"fn": "LeveragedTrading.min", "offset": [7296, 7302], "op": "GT", "path": "8"}, "3669": {"branch": 65, "fn": "LeveragedTrading.min", "offset": [7296, 7302], "op": "ISZERO", "path": "8"}, "3670": {"fn": "LeveragedTrading.min", "offset": [7296, 7310], "op": "PUSH3", "path": "8", "value": "0xE61"}, "3674": {"branch": 65, "fn": "LeveragedTrading.min", "offset": [7296, 7310], "op": "JUMPI", "path": "8"}, "3675": {"fn": "LeveragedTrading.min", "offset": [7309, 7310], "op": "DUP2", "path": "8"}, "3676": {"fn": "LeveragedTrading.min", "offset": [7296, 7310], "op": "PUSH3", "path": "8", "value": "0xCE0"}, "3680": {"fn": "LeveragedTrading.min", "offset": [7296, 7310], "op": "JUMP", "path": "8"}, "3681": {"fn": "LeveragedTrading.min", "offset": [7296, 7310], "op": "JUMPDEST", "path": "8"}, "3682": {"op": "POP"}, "3683": {"fn": "LeveragedTrading.min", "offset": [7305, 7306], "op": "SWAP1", "path": "8"}, "3684": {"fn": "LeveragedTrading.min", "offset": [7305, 7306], "op": "SWAP2", "path": "8"}, "3685": {"fn": "LeveragedTrading.min", "offset": [7212, 7317], "op": "SWAP1", "path": "8"}, "3686": {"op": "POP"}, "3687": {"fn": "LeveragedTrading.min", "jump": "o", "offset": [7212, 7317], "op": "JUMP", "path": "8"}, "3688": {"op": "JUMPDEST"}, "3689": {"op": "PUSH2", "value": "0xFA6"}, "3692": {"op": "DUP1"}, "3693": {"op": "PUSH3", "value": "0x1285"}, "3697": {"op": "DUP4"}, "3698": {"op": "CODECOPY"}, "3699": {"op": "ADD"}, "3700": {"op": "SWAP1"}, "3701": {"jump": "o", "op": "JUMP"}, "3702": {"op": "JUMPDEST"}, "3703": {"op": "PUSH2", "value": "0xFAA"}, "3706": {"op": "DUP1"}, "3707": {"op": "PUSH3", "value": "0x222B"}, "3711": {"op": "DUP4"}, "3712": {"op": "CODECOPY"}, "3713": {"op": "ADD"}, "3714": {"op": "SWAP1"}, "3715": {"jump": "o", "op": "JUMP"}, "3716": {"op": "JUMPDEST"}, "3717": {"op": "DUP1"}, "3718": {"op": "MLOAD"}, "3719": {"op": "PUSH10", "value": "0xFFFFFFFFFFFFFFFFFFFF"}, "3730": {"op": "DUP2"}, "3731": {"op": "AND"}, "3732": {"op": "DUP2"}, "3733": {"op": "EQ"}, "3734": {"op": "PUSH3", "value": "0xCAD"}, "3738": {"op": "JUMPI"}, "3739": {"op": "PUSH1", "value": "0x0"}, "3741": {"op": "DUP1"}, "3742": {"op": "REVERT"}, "3743": {"op": "JUMPDEST"}, "3744": {"op": "PUSH1", "value": "0x0"}, "3746": {"op": "PUSH1", "value": "0x20"}, "3748": {"op": "DUP3"}, "3749": {"op": "DUP5"}, "3750": {"op": "SUB"}, "3751": {"op": "SLT"}, "3752": {"op": "ISZERO"}, "3753": {"op": "PUSH3", "value": "0xEB1"}, "3757": {"op": "JUMPI"}, "3758": {"op": "DUP1"}, "3759": {"op": "DUP2"}, "3760": {"op": "REVERT"}, "3761": {"op": "JUMPDEST"}, "3762": {"op": "DUP2"}, "3763": {"op": "CALLDATALOAD"}, "3764": {"op": "PUSH1", "value": "0x1"}, "3766": {"op": "PUSH1", "value": "0x1"}, "3768": {"op": "PUSH1", "value": "0xA0"}, "3770": {"op": "SHL"}, "3771": {"op": "SUB"}, "3772": {"op": "DUP2"}, "3773": {"op": "AND"}, "3774": {"op": "DUP2"}, "3775": {"op": "EQ"}, "3776": {"op": "PUSH3", "value": "0xCE0"}, "3780": {"op": "JUMPI"}, "3781": {"op": "DUP2"}, "3782": {"op": "DUP3"}, "3783": {"op": "REVERT"}, "3784": {"op": "JUMPDEST"}, "3785": {"op": "PUSH1", "value": "0x0"}, "3787": {"op": "PUSH1", "value": "0x20"}, "3789": {"op": "DUP3"}, "3790": {"op": "DUP5"}, "3791": {"op": "SUB"}, "3792": {"op": "SLT"}, "3793": {"op": "ISZERO"}, "3794": {"op": "PUSH3", "value": "0xEDA"}, "3798": {"op": "JUMPI"}, "3799": {"op": "DUP1"}, "3800": {"op": "DUP2"}, "3801": {"op": "REVERT"}, "3802": {"op": "JUMPDEST"}, "3803": {"op": "DUP2"}, "3804": {"op": "MLOAD"}, "3805": {"op": "DUP1"}, "3806": {"op": "ISZERO"}, "3807": {"op": "ISZERO"}, "3808": {"op": "DUP2"}, "3809": {"op": "EQ"}, "3810": {"op": "PUSH3", "value": "0xCE0"}, "3814": {"op": "JUMPI"}, "3815": {"op": "DUP2"}, "3816": {"op": "DUP3"}, "3817": {"op": "REVERT"}, "3818": {"op": "JUMPDEST"}, "3819": {"op": "PUSH1", "value": "0x0"}, "3821": {"op": "PUSH1", "value": "0x20"}, "3823": {"op": "DUP3"}, "3824": {"op": "DUP5"}, "3825": {"op": "SUB"}, "3826": {"op": "SLT"}, "3827": {"op": "ISZERO"}, "3828": {"op": "PUSH3", "value": "0xEFC"}, "3832": {"op": "JUMPI"}, "3833": {"op": "DUP1"}, "3834": {"op": "DUP2"}, "3835": {"op": "REVERT"}, "3836": {"op": "JUMPDEST"}, "3837": {"op": "POP"}, "3838": {"op": "CALLDATALOAD"}, "3839": {"op": "SWAP2"}, "3840": {"op": "SWAP1"}, "3841": {"op": "POP"}, "3842": {"jump": "o", "op": "JUMP"}, "3843": {"op": "JUMPDEST"}, "3844": {"op": "PUSH1", "value": "0x0"}, "3846": {"op": "PUSH1", "value": "0x20"}, "3848": {"op": "DUP3"}, "3849": {"op": "DUP5"}, "3850": {"op": "SUB"}, "3851": {"op": "SLT"}, "3852": {"op": "ISZERO"}, "3853": {"op": "PUSH3", "value": "0xF15"}, "3857": {"op": "JUMPI"}, "3858": {"op": "DUP1"}, "3859": {"op": "DUP2"}, "3860": {"op": "REVERT"}, "3861": {"op": "JUMPDEST"}, "3862": {"op": "POP"}, "3863": {"op": "MLOAD"}, "3864": {"op": "SWAP2"}, "3865": {"op": "SWAP1"}, "3866": {"op": "POP"}, "3867": {"jump": "o", "op": "JUMP"}, "3868": {"op": "JUMPDEST"}, "3869": {"op": "PUSH1", "value": "0x0"}, "3871": {"op": "DUP1"}, "3872": {"op": "PUSH1", "value": "0x0"}, "3874": {"op": "DUP1"}, "3875": {"op": "PUSH1", "value": "0x0"}, "3877": {"op": "PUSH1", "value": "0xA0"}, "3879": {"op": "DUP7"}, "3880": {"op": "DUP9"}, "3881": {"op": "SUB"}, "3882": {"op": "SLT"}, "3883": {"op": "ISZERO"}, "3884": {"op": "PUSH3", "value": "0xF34"}, "3888": {"op": "JUMPI"}, "3889": {"op": "DUP1"}, "3890": {"op": "DUP2"}, "3891": {"op": "REVERT"}, "3892": {"op": "JUMPDEST"}, "3893": {"op": "PUSH3", "value": "0xF3F"}, "3897": {"op": "DUP7"}, "3898": {"op": "PUSH3", "value": "0xE84"}, "3902": {"jump": "i", "op": "JUMP"}, "3903": {"op": "JUMPDEST"}, "3904": {"op": "SWAP5"}, "3905": {"op": "POP"}, "3906": {"op": "PUSH1", "value": "0x20"}, "3908": {"op": "DUP7"}, "3909": {"op": "ADD"}, "3910": {"op": "MLOAD"}, "3911": {"op": "SWAP4"}, "3912": {"op": "POP"}, "3913": {"op": "PUSH1", "value": "0x40"}, "3915": {"op": "DUP7"}, "3916": {"op": "ADD"}, "3917": {"op": "MLOAD"}, "3918": {"op": "SWAP3"}, "3919": {"op": "POP"}, "3920": {"op": "PUSH1", "value": "0x60"}, "3922": {"op": "DUP7"}, "3923": {"op": "ADD"}, "3924": {"op": "MLOAD"}, "3925": {"op": "SWAP2"}, "3926": {"op": "POP"}, "3927": {"op": "PUSH3", "value": "0xF64"}, "3931": {"op": "PUSH1", "value": "0x80"}, "3933": {"op": "DUP8"}, "3934": {"op": "ADD"}, "3935": {"op": "PUSH3", "value": "0xE84"}, "3939": {"jump": "i", "op": "JUMP"}, "3940": {"op": "JUMPDEST"}, "3941": {"op": "SWAP1"}, "3942": {"op": "POP"}, "3943": {"op": "SWAP3"}, "3944": {"op": "SWAP6"}, "3945": {"op": "POP"}, "3946": {"op": "SWAP3"}, "3947": {"op": "SWAP6"}, "3948": {"op": "SWAP1"}, "3949": {"op": "SWAP4"}, "3950": {"op": "POP"}, "3951": {"jump": "o", "op": "JUMP"}, "3952": {"op": "JUMPDEST"}, "3953": {"op": "PUSH1", "value": "0x1"}, "3955": {"op": "PUSH1", "value": "0x1"}, "3957": {"op": "PUSH1", "value": "0xA0"}, "3959": {"op": "SHL"}, "3960": {"op": "SUB"}, "3961": {"op": "SWAP2"}, "3962": {"op": "SWAP1"}, "3963": {"op": "SWAP2"}, "3964": {"op": "AND"}, "3965": {"op": "DUP2"}, "3966": {"op": "MSTORE"}, "3967": {"op": "PUSH1", "value": "0x20"}, "3969": {"op": "ADD"}, "3970": {"op": "SWAP1"}, "3971": {"jump": "o", "op": "JUMP"}, "3972": {"op": "JUMPDEST"}, "3973": {"op": "PUSH1", "value": "0x1"}, "3975": {"op": "PUSH1", "value": "0x1"}, "3977": {"op": "PUSH1", "value": "0xA0"}, "3979": {"op": "SHL"}, "3980": {"op": "SUB"}, "3981": {"op": "SWAP4"}, "3982": {"op": "DUP5"}, "3983": {"op": "AND"}, "3984": {"op": "DUP2"}, "3985": {"op": "MSTORE"}, "3986": {"op": "SWAP2"}, "3987": {"op": "SWAP1"}, "3988": {"op": "SWAP3"}, "3989": {"op": "AND"}, "3990": {"op": "PUSH1", "value": "0x20"}, "3992": {"op": "DUP3"}, "3993": {"op": "ADD"}, "3994": {"op": "MSTORE"}, "3995": {"op": "PUSH1", "value": "0x40"}, "3997": {"op": "DUP2"}, "3998": {"op": "ADD"}, "3999": {"op": "SWAP2"}, "4000": {"op": "SWAP1"}, "4001": {"op": "SWAP2"}, "4002": {"op": "MSTORE"}, "4003": {"op": "PUSH1", "value": "0x60"}, "4005": {"op": "ADD"}, "4006": {"op": "SWAP1"}, "4007": {"jump": "o", "op": "JUMP"}, "4008": {"op": "JUMPDEST"}, "4009": {"op": "PUSH1", "value": "0x1"}, "4011": {"op": "PUSH1", "value": "0x1"}, "4013": {"op": "PUSH1", "value": "0xA0"}, "4015": {"op": "SHL"}, "4016": {"op": "SUB"}, "4017": {"op": "SWAP3"}, "4018": {"op": "SWAP1"}, "4019": {"op": "SWAP3"}, "4020": {"op": "AND"}, "4021": {"op": "DUP3"}, "4022": {"op": "MSTORE"}, "4023": {"op": "PUSH1", "value": "0x20"}, "4025": {"op": "DUP3"}, "4026": {"op": "ADD"}, "4027": {"op": "MSTORE"}, "4028": {"op": "PUSH1", "value": "0x40"}, "4030": {"op": "ADD"}, "4031": {"op": "SWAP1"}, "4032": {"jump": "o", "op": "JUMP"}, "4033": {"op": "JUMPDEST"}, "4034": {"op": "SWAP1"}, "4035": {"op": "ISZERO"}, "4036": {"op": "ISZERO"}, "4037": {"op": "DUP2"}, "4038": {"op": "MSTORE"}, "4039": {"op": "PUSH1", "value": "0x20"}, "4041": {"op": "ADD"}, "4042": {"op": "SWAP1"}, "4043": {"jump": "o", "op": "JUMP"}, "4044": {"op": "JUMPDEST"}, "4045": {"op": "PUSH1", "value": "0x20"}, "4047": {"op": "DUP1"}, "4048": {"op": "DUP3"}, "4049": {"op": "MSTORE"}, "4050": {"op": "PUSH1", "value": "0x26"}, "4052": {"op": "SWAP1"}, "4053": {"op": "DUP3"}, "4054": {"op": "ADD"}, "4055": {"op": "MSTORE"}, "4056": {"op": "PUSH32", "value": "0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"}, "4089": {"op": "PUSH1", "value": "0x40"}, "4091": {"op": "DUP3"}, "4092": {"op": "ADD"}, "4093": {"op": "MSTORE"}, "4094": {"op": "PUSH6", "value": "0x646472657373"}, "4101": {"op": "PUSH1", "value": "0xD0"}, "4103": {"op": "SHL"}, "4104": {"op": "PUSH1", "value": "0x60"}, "4106": {"op": "DUP3"}, "4107": {"op": "ADD"}, "4108": {"op": "MSTORE"}, "4109": {"op": "PUSH1", "value": "0x80"}, "4111": {"op": "ADD"}, "4112": {"op": "SWAP1"}, "4113": {"jump": "o", "op": "JUMP"}, "4114": {"op": "JUMPDEST"}, "4115": {"op": "PUSH1", "value": "0x20"}, "4117": {"op": "DUP1"}, "4118": {"op": "DUP3"}, "4119": {"op": "MSTORE"}, "4120": {"op": "PUSH1", "value": "0x1F"}, "4122": {"op": "SWAP1"}, "4123": {"op": "DUP3"}, "4124": {"op": "ADD"}, "4125": {"op": "MSTORE"}, "4126": {"op": "PUSH32", "value": "0x54686520706F6F6C2077617320616C726561647920696E697469617465642E00"}, "4159": {"op": "PUSH1", "value": "0x40"}, "4161": {"op": "DUP3"}, "4162": {"op": "ADD"}, "4163": {"op": "MSTORE"}, "4164": {"op": "PUSH1", "value": "0x60"}, "4166": {"op": "ADD"}, "4167": {"op": "SWAP1"}, "4168": {"jump": "o", "op": "JUMP"}, "4169": {"op": "JUMPDEST"}, "4170": {"op": "PUSH1", "value": "0x20"}, "4172": {"op": "DUP1"}, "4173": {"op": "DUP3"}, "4174": {"op": "MSTORE"}, "4175": {"op": "DUP2"}, "4176": {"op": "DUP2"}, "4177": {"op": "ADD"}, "4178": {"op": "MSTORE"}, "4179": {"op": "PUSH32", "value": "0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"}, "4212": {"op": "PUSH1", "value": "0x40"}, "4214": {"op": "DUP3"}, "4215": {"op": "ADD"}, "4216": {"op": "MSTORE"}, "4217": {"op": "PUSH1", "value": "0x60"}, "4219": {"op": "ADD"}, "4220": {"op": "SWAP1"}, "4221": {"jump": "o", "op": "JUMP"}, "4222": {"op": "JUMPDEST"}, "4223": {"op": "PUSH1", "value": "0x20"}, "4225": {"op": "DUP1"}, "4226": {"op": "DUP3"}, "4227": {"op": "MSTORE"}, "4228": {"op": "PUSH1", "value": "0x1B"}, "4230": {"op": "SWAP1"}, "4231": {"op": "DUP3"}, "4232": {"op": "ADD"}, "4233": {"op": "MSTORE"}, "4234": {"op": "PUSH32", "value": "0x596F7520646F6E2774206861766520656E6F75676820555344432E0000000000"}, "4267": {"op": "PUSH1", "value": "0x40"}, "4269": {"op": "DUP3"}, "4270": {"op": "ADD"}, "4271": {"op": "MSTORE"}, "4272": {"op": "PUSH1", "value": "0x60"}, "4274": {"op": "ADD"}, "4275": {"op": "SWAP1"}, "4276": {"jump": "o", "op": "JUMP"}, "4277": {"op": "JUMPDEST"}, "4278": {"op": "SWAP1"}, "4279": {"op": "DUP2"}, "4280": {"op": "MSTORE"}, "4281": {"op": "PUSH1", "value": "0x20"}, "4283": {"op": "ADD"}, "4284": {"op": "SWAP1"}, "4285": {"jump": "o", "op": "JUMP"}, "4286": {"op": "JUMPDEST"}, "4287": {"op": "PUSH1", "value": "0x0"}, "4289": {"op": "DUP3"}, "4290": {"op": "NOT"}, "4291": {"op": "DUP3"}, "4292": {"op": "GT"}, "4293": {"op": "ISZERO"}, "4294": {"op": "PUSH3", "value": "0x10D4"}, "4298": {"op": "JUMPI"}, "4299": {"op": "PUSH3", "value": "0x10D4"}, "4303": {"op": "PUSH3", "value": "0x126E"}, "4307": {"jump": "i", "op": "JUMP"}, "4308": {"op": "JUMPDEST"}, "4309": {"op": "POP"}, "4310": {"op": "ADD"}, "4311": {"op": "SWAP1"}, "4312": {"jump": "o", "op": "JUMP"}, "4313": {"op": "JUMPDEST"}, "4314": {"op": "PUSH1", "value": "0x0"}, "4316": {"op": "DUP3"}, "4317": {"op": "PUSH3", "value": "0x10F5"}, "4321": {"op": "JUMPI"}, "4322": {"op": "PUSH4", "value": "0x4E487B71"}, "4327": {"op": "PUSH1", "value": "0xE0"}, "4329": {"op": "SHL"}, "4330": {"op": "DUP2"}, "4331": {"op": "MSTORE"}, "4332": {"op": "PUSH1", "value": "0x12"}, "4334": {"op": "PUSH1", "value": "0x4"}, "4336": {"op": "MSTORE"}, "4337": {"op": "PUSH1", "value": "0x24"}, "4339": {"op": "DUP2"}, "4340": {"op": "REVERT"}, "4341": {"op": "JUMPDEST"}, "4342": {"op": "POP"}, "4343": {"op": "DIV"}, "4344": {"op": "SWAP1"}, "4345": {"jump": "o", "op": "JUMP"}, "4346": {"op": "JUMPDEST"}, "4347": {"op": "DUP1"}, "4348": {"op": "DUP3"}, "4349": {"op": "JUMPDEST"}, "4350": {"op": "PUSH1", "value": "0x1"}, "4352": {"op": "DUP1"}, "4353": {"op": "DUP7"}, "4354": {"op": "GT"}, "4355": {"op": "PUSH3", "value": "0x110E"}, "4359": {"op": "JUMPI"}, "4360": {"op": "POP"}, "4361": {"op": "PUSH3", "value": "0x113E"}, "4365": {"op": "JUMP"}, "4366": {"op": "JUMPDEST"}, "4367": {"op": "DUP2"}, "4368": {"op": "DUP8"}, "4369": {"op": "DIV"}, "4370": {"op": "DUP3"}, "4371": {"op": "GT"}, "4372": {"op": "ISZERO"}, "4373": {"op": "PUSH3", "value": "0x1123"}, "4377": {"op": "JUMPI"}, "4378": {"op": "PUSH3", "value": "0x1123"}, "4382": {"op": "PUSH3", "value": "0x126E"}, "4386": {"jump": "i", "op": "JUMP"}, "4387": {"op": "JUMPDEST"}, "4388": {"op": "DUP1"}, "4389": {"op": "DUP7"}, "4390": {"op": "AND"}, "4391": {"op": "ISZERO"}, "4392": {"op": "PUSH3", "value": "0x1131"}, "4396": {"op": "JUMPI"}, "4397": {"op": "SWAP2"}, "4398": {"op": "DUP2"}, "4399": {"op": "MUL"}, "4400": {"op": "SWAP2"}, "4401": {"op": "JUMPDEST"}, "4402": {"op": "SWAP5"}, "4403": {"op": "SWAP1"}, "4404": {"op": "SWAP5"}, "4405": {"op": "SHR"}, "4406": {"op": "SWAP4"}, "4407": {"op": "DUP1"}, "4408": {"op": "MUL"}, "4409": {"op": "PUSH3", "value": "0x10FD"}, "4413": {"op": "JUMP"}, "4414": {"op": "JUMPDEST"}, "4415": {"op": "SWAP5"}, "4416": {"op": "POP"}, "4417": {"op": "SWAP5"}, "4418": {"op": "SWAP3"}, "4419": {"op": "POP"}, "4420": {"op": "POP"}, "4421": {"op": "POP"}, "4422": {"jump": "o", "op": "JUMP"}, "4423": {"op": "JUMPDEST"}, "4424": {"op": "PUSH1", "value": "0x0"}, "4426": {"op": "PUSH3", "value": "0xCE0"}, "4430": {"op": "PUSH1", "value": "0x0"}, "4432": {"op": "NOT"}, "4433": {"op": "PUSH1", "value": "0xFF"}, "4435": {"op": "DUP6"}, "4436": {"op": "AND"}, "4437": {"op": "DUP5"}, "4438": {"op": "PUSH1", "value": "0x0"}, "4440": {"op": "DUP3"}, "4441": {"op": "PUSH3", "value": "0x1166"}, "4445": {"op": "JUMPI"}, "4446": {"op": "POP"}, "4447": {"op": "PUSH1", "value": "0x1"}, "4449": {"op": "PUSH3", "value": "0xCE0"}, "4453": {"op": "JUMP"}, "4454": {"op": "JUMPDEST"}, "4455": {"op": "DUP2"}, "4456": {"op": "PUSH3", "value": "0x1175"}, "4460": {"op": "JUMPI"}, "4461": {"op": "POP"}, "4462": {"op": "PUSH1", "value": "0x0"}, "4464": {"op": "PUSH3", "value": "0xCE0"}, "4468": {"op": "JUMP"}, "4469": {"op": "JUMPDEST"}, "4470": {"op": "DUP2"}, "4471": {"op": "PUSH1", "value": "0x1"}, "4473": {"op": "DUP2"}, "4474": {"op": "EQ"}, "4475": {"op": "PUSH3", "value": "0x118E"}, "4479": {"op": "JUMPI"}, "4480": {"op": "PUSH1", "value": "0x2"}, "4482": {"op": "DUP2"}, "4483": {"op": "EQ"}, "4484": {"op": "PUSH3", "value": "0x1199"}, "4488": {"op": "JUMPI"}, "4489": {"op": "PUSH3", "value": "0x11CD"}, "4493": {"op": "JUMP"}, "4494": {"op": "JUMPDEST"}, "4495": {"op": "PUSH1", "value": "0x1"}, "4497": {"op": "SWAP2"}, "4498": {"op": "POP"}, "4499": {"op": "POP"}, "4500": {"op": "PUSH3", "value": "0xCE0"}, "4504": {"op": "JUMP"}, "4505": {"op": "JUMPDEST"}, "4506": {"op": "PUSH1", "value": "0xFF"}, "4508": {"op": "DUP5"}, "4509": {"op": "GT"}, "4510": {"op": "ISZERO"}, "4511": {"op": "PUSH3", "value": "0x11AD"}, "4515": {"op": "JUMPI"}, "4516": {"op": "PUSH3", "value": "0x11AD"}, "4520": {"op": "PUSH3", "value": "0x126E"}, "4524": {"jump": "i", "op": "JUMP"}, "4525": {"op": "JUMPDEST"}, "4526": {"op": "PUSH1", "value": "0x1"}, "4528": {"op": "DUP5"}, "4529": {"op": "SHL"}, "4530": {"op": "SWAP2"}, "4531": {"op": "POP"}, "4532": {"op": "DUP5"}, "4533": {"op": "DUP3"}, "4534": {"op": "GT"}, "4535": {"op": "ISZERO"}, "4536": {"op": "PUSH3", "value": "0x11C6"}, "4540": {"op": "JUMPI"}, "4541": {"op": "PUSH3", "value": "0x11C6"}, "4545": {"op": "PUSH3", "value": "0x126E"}, "4549": {"jump": "i", "op": "JUMP"}, "4550": {"op": "JUMPDEST"}, "4551": {"op": "POP"}, "4552": {"op": "PUSH3", "value": "0xCE0"}, "4556": {"op": "JUMP"}, "4557": {"op": "JUMPDEST"}, "4558": {"op": "POP"}, "4559": {"op": "PUSH1", "value": "0x20"}, "4561": {"op": "DUP4"}, "4562": {"op": "LT"}, "4563": {"op": "PUSH2", "value": "0x133"}, "4566": {"op": "DUP4"}, "4567": {"op": "LT"}, "4568": {"op": "AND"}, "4569": {"op": "PUSH1", "value": "0x4E"}, "4571": {"op": "DUP5"}, "4572": {"op": "LT"}, "4573": {"op": "PUSH1", "value": "0xB"}, "4575": {"op": "DUP5"}, "4576": {"op": "LT"}, "4577": {"op": "AND"}, "4578": {"op": "OR"}, "4579": {"op": "ISZERO"}, "4580": {"op": "PUSH3", "value": "0x1205"}, "4584": {"op": "JUMPI"}, "4585": {"op": "POP"}, "4586": {"op": "DUP2"}, "4587": {"op": "DUP2"}, "4588": {"op": "EXP"}, "4589": {"op": "DUP4"}, "4590": {"op": "DUP2"}, "4591": {"op": "GT"}, "4592": {"op": "ISZERO"}, "4593": {"op": "PUSH3", "value": "0x11FF"}, "4597": {"op": "JUMPI"}, "4598": {"op": "PUSH3", "value": "0x11FF"}, "4602": {"op": "PUSH3", "value": "0x126E"}, "4606": {"jump": "i", "op": "JUMP"}, "4607": {"op": "JUMPDEST"}, "4608": {"op": "PUSH3", "value": "0xCE0"}, "4612": {"op": "JUMP"}, "4613": {"op": "JUMPDEST"}, "4614": {"op": "PUSH3", "value": "0x1214"}, "4618": {"op": "DUP5"}, "4619": {"op": "DUP5"}, "4620": {"op": "DUP5"}, "4621": {"op": "PUSH1", "value": "0x1"}, "4623": {"op": "PUSH3", "value": "0x10FA"}, "4627": {"jump": "i", "op": "JUMP"}, "4628": {"op": "JUMPDEST"}, "4629": {"op": "DUP1"}, "4630": {"op": "DUP7"}, "4631": {"op": "DIV"}, "4632": {"op": "DUP3"}, "4633": {"op": "GT"}, "4634": {"op": "ISZERO"}, "4635": {"op": "PUSH3", "value": "0x1229"}, "4639": {"op": "JUMPI"}, "4640": {"op": "PUSH3", "value": "0x1229"}, "4644": {"op": "PUSH3", "value": "0x126E"}, "4648": {"jump": "i", "op": "JUMP"}, "4649": {"op": "JUMPDEST"}, "4650": {"op": "MUL"}, "4651": {"op": "SWAP5"}, "4652": {"op": "SWAP4"}, "4653": {"op": "POP"}, "4654": {"op": "POP"}, "4655": {"op": "POP"}, "4656": {"op": "POP"}, "4657": {"jump": "o", "op": "JUMP"}, "4658": {"op": "JUMPDEST"}, "4659": {"op": "PUSH1", "value": "0x0"}, "4661": {"op": "DUP2"}, "4662": {"op": "PUSH1", "value": "0x0"}, "4664": {"op": "NOT"}, "4665": {"op": "DIV"}, "4666": {"op": "DUP4"}, "4667": {"op": "GT"}, "4668": {"op": "DUP3"}, "4669": {"op": "ISZERO"}, "4670": {"op": "ISZERO"}, "4671": {"op": "AND"}, "4672": {"op": "ISZERO"}, "4673": {"op": "PUSH3", "value": "0x124F"}, "4677": {"op": "JUMPI"}, "4678": {"op": "PUSH3", "value": "0x124F"}, "4682": {"op": "PUSH3", "value": "0x126E"}, "4686": {"jump": "i", "op": "JUMP"}, "4687": {"op": "JUMPDEST"}, "4688": {"op": "POP"}, "4689": {"op": "MUL"}, "4690": {"op": "SWAP1"}, "4691": {"jump": "o", "op": "JUMP"}, "4692": {"op": "JUMPDEST"}, "4693": {"op": "PUSH1", "value": "0x0"}, "4695": {"op": "DUP3"}, "4696": {"op": "DUP3"}, "4697": {"op": "LT"}, "4698": {"op": "ISZERO"}, "4699": {"op": "PUSH3", "value": "0x1269"}, "4703": {"op": "JUMPI"}, "4704": {"op": "PUSH3", "value": "0x1269"}, "4708": {"op": "PUSH3", "value": "0x126E"}, "4712": {"jump": "i", "op": "JUMP"}, "4713": {"op": "JUMPDEST"}, "4714": {"op": "POP"}, "4715": {"op": "SUB"}, "4716": {"op": "SWAP1"}, "4717": {"jump": "o", "op": "JUMP"}, "4718": {"op": "JUMPDEST"}, "4719": {"op": "PUSH4", "value": "0x4E487B71"}, "4724": {"op": "PUSH1", "value": "0xE0"}, "4726": {"op": "SHL"}, "4727": {"op": "PUSH1", "value": "0x0"}, "4729": {"op": "MSTORE"}, "4730": {"op": "PUSH1", "value": "0x11"}, "4732": {"op": "PUSH1", "value": "0x4"}, "4734": {"op": "MSTORE"}, "4735": {"op": "PUSH1", "value": "0x24"}, "4737": {"op": "PUSH1", "value": "0x0"}, "4739": {"op": "REVERT"}}, "sha1": "929dd75fae3fcc587c23505153556e17e8802f12", "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport  {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport  {ERC20Burnable} from \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n\ninterface IERC20 {\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    function approve(address spender, uint256 amount) external returns (bool);\n}\n\n\ncontract BTCUP is  ERC20, ERC20Burnable {\n    address parentAddress;\n\n    constructor(address _parentAddress) ERC20(\"Bitcoin Up\", \"BTCUP\") {\n        parentAddress = _parentAddress;\n    }\n\n    function mint(uint256 quantity) public onlyParent {\n        _mint(tx.origin, quantity);\n    }\n\n    function burn(uint256 quantity) public override onlyParent {\n        burnFrom(tx.origin, quantity);\n    }\n\n    function decimals() public view override returns (uint8) {\n        return 6;\n    }\n\n    modifier onlyParent {\n        require(msg.sender == parentAddress);\n        _;\n    }\n}\n\n\ncontract BTCDOWN is ERC20, ERC20Burnable {\n    address parentAddress;\n\n    constructor(address _parentAddress) ERC20(\"Bitcoin Down\", \"BTCDOWN\") {\n        parentAddress = _parentAddress;\n    }\n\n    function mint(uint256 quantity) public onlyParent {\n        _mint(tx.origin, quantity);\n    }\n\n    function burn(uint256 quantity) public override onlyParent {\n        burnFrom(tx.origin, quantity);\n    }\n\n    function decimals() public view override returns (uint8) {\n        return 6;\n    }\n\n    modifier onlyParent {\n        require(msg.sender == parentAddress);\n        _;\n    }\n}\n\n\ncontract LeveragedTrading is Ownable {\n    using SafeMath for uint256;\n\n    uint256 public priceBtcUp = 10 ** 6;\n    uint256 public priceBtcDown = 10 ** 6;        // 6 decimals\n\n    uint256 public collateralBtcUp = 0;          //6 decimals\n    uint256 public collateralBtcDown = 0;\n\n    uint256 public amountBtcUp = 0;           // 6 decimals\n    uint256 public amountBtcDown = 0;         // 6 decimals\n\n    uint256 public lastBtcPrice = 0;       // 8 decimals, chainlink conventions\n\n    bool public poolIsInitialized = false;\n\n    address addressUsdc = 0xb7a4F3E9097C08dA09517b5aB877F7a917224ede;  // <- Kovan  //0xeb8f08a975Ab53E34D8a0330E0D34de942C95926;\n    address addressBtcUSDFeed =  0x6135b13325bfC4B00278B4abC5e20bbce2D6580e; // <- Kovan          // 0xECe365B379E1dD183B20fc5f022230C044d51404;\n\n    BTCUP btcUp;\n    BTCDOWN btcDown;\n\n    function initializePool(uint256 amountUsdc) public onlyOwner {\n        require(!poolIsInitialized, \"The pool was already initiated.\");\n\n        btcUp = new BTCUP(address(this));\n        btcDown = new BTCDOWN(address(this));\n\n        issueBtcUp(amountUsdc.div(2));\n        issueBtcDown(amountUsdc.div(2));\n\n        poolIsInitialized = true;\n    }\n\n    function issueBtcUp(uint256 amountUsdc) public {\n        rebalanceLeveragedTokens();\n        \n        priceBtcUp = getBtcUpPrice();\n        uint256 amountLeveragedTokens = amountUsdc.mul(10 ** 6).div(priceBtcUp);\n\n        btcUp.mint(amountLeveragedTokens);\n        amountBtcUp = amountBtcUp.add(amountLeveragedTokens);\n        collateralBtcUp = collateralBtcUp.add(amountUsdc);\n\n        IERC20 usdc = IERC20(addressUsdc);\n        require(usdc.transferFrom(msg.sender, address(this), amountUsdc), \"You don't have enough USDC.\");\n    }\n\n    function issueBtcDown(uint256 amountUsdc) public {\n        rebalanceLeveragedTokens();\n        \n        priceBtcDown = getBtcDownPrice();\n        uint256 amountLeveragedTokens = amountUsdc.mul(10 ** 6).div(priceBtcDown);\n\n        btcDown.mint(amountLeveragedTokens);\n        amountBtcDown = amountBtcDown.add(amountLeveragedTokens);\n        collateralBtcDown = collateralBtcDown.add(amountUsdc);\n\n        IERC20 usdc = IERC20(addressUsdc);\n        require(usdc.transferFrom(msg.sender, address(this), amountUsdc), \"You don't have enough USDC.\");\n    }\n\n    function redeemBtcUp(uint256 amountLeveragedTokens) public {\n        rebalanceLeveragedTokens();\n        btcUp.burn(amountLeveragedTokens);\n\n        priceBtcUp = getBtcUpPrice();\n        uint256 amountUsdc = amountLeveragedTokens.mul(priceBtcUp).div(10 ** 6);\n\n        amountBtcUp = amountBtcUp.sub(amountLeveragedTokens);\n        collateralBtcUp = collateralBtcUp.sub(amountUsdc);\n\n        IERC20 usdc = IERC20(addressUsdc);\n        assert(usdc.transfer(msg.sender, amountUsdc));\n    }\n\n    function redeemBtcDown(uint256 amountLeveragedTokens) public {\n        rebalanceLeveragedTokens();\n        btcDown.burn(amountLeveragedTokens);\n\n        priceBtcDown = getBtcDownPrice();\n        uint256 amountUsdc = amountLeveragedTokens.mul(priceBtcDown).div(10 ** 6);\n        \n        amountBtcDown = amountBtcDown.sub(amountLeveragedTokens);\n        collateralBtcDown = collateralBtcDown.sub(amountUsdc);\n\n        IERC20 usdc = IERC20(addressUsdc);\n        assert(usdc.transfer(msg.sender,  amountUsdc));\n    }\n\n    function rebalanceLeveragedTokens() public {\n        uint256 btcPrice = getBtcPrice();\n        if ((collateralBtcUp > 0) && (collateralBtcDown > 0)) {\n            uint256 rebalanceAmount = getRebalanceAmount(btcPrice);\n            if (getSign(btcPrice) > 0) {\n                collateralBtcUp = collateralBtcUp.add(rebalanceAmount);\n                collateralBtcDown = collateralBtcDown.sub(rebalanceAmount);\n            }\n\n            else {\n                collateralBtcUp = collateralBtcUp.sub(rebalanceAmount);\n                collateralBtcDown = collateralBtcDown.add(rebalanceAmount);\n            }\n\n        }\n        lastBtcPrice = btcPrice;\n    }\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    function getSign(uint256 btcPrice) internal view returns (int256) {\n        if (btcPrice > lastBtcPrice) {\n            return 1;\n        }\n        else {\n            return -1;\n        }\n    }\n \n    function getRebalanceAmount(uint256 priceBtc) internal view returns (uint256) {\n        uint256 priceDiff = getPriceDiff(priceBtc);\n\n        return min(collateralBtcUp, collateralBtcDown).mul(L(priceDiff)).div(10 ** 6);\n    }\n\n// getBtcUpPrice() 6 decimals\n    function getBtcUpPrice() public view returns (uint256) {\n        return amountBtcUp == 0 ?  priceBtcUp : collateralBtcUp.mul(10 ** 6).div(amountBtcUp);\n    }\n\n// getBtcDownPrice() 6 decimals\n    function getBtcDownPrice() public view returns (uint256) {//6 decimals\n        return amountBtcDown == 0 ?  priceBtcDown : collateralBtcDown.mul(10 ** 6).div(amountBtcDown);\n    }\n\n// get the price of our asset with 8 decimals\n    function getBtcPrice() public view returns (uint256) {\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(addressBtcUSDFeed);\n        (,int256 answer,,,) = priceFeed.latestRoundData();\n\n         return uint256(answer);             // we call chainlink oracle to get the price of the asset\n         \n    }\n    \n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a <= b ? a : b;\n    }\n\n    function L(uint256 x) internal pure returns (uint256) {            //6  decimals\n\n        uint256 denom = 9 * (x ** 2 / 10 ** 6)  + 3 * x + 10 ** 6;\n        uint256 num = 10 ** 12;\n\n        return 10 ** 6 - num / denom;\n    }\n\n    function getPriceDiff(uint256 btcPrice) internal view returns (uint256) {     //6 decimals\n        if (btcPrice > lastBtcPrice) {\n            return btcPrice.mul(10 ** 6).div(lastBtcPrice).sub(10 ** 6);\n        }\n\n        else {\n            return lastBtcPrice.mul(10 ** 6).div(btcPrice).sub(10 ** 6);\n        }\n\n    }\n\n    function getBtcupBalance() public view returns(uint256) {\n        return btcUp.balanceOf(msg.sender);\n    }\n\n    function getBtcdownBalance() public view returns(uint256) {\n        return btcDown.balanceOf(msg.sender);\n    }\n\n\n}\n\n\n\n\n\n\n", "sourceMap": "1863:6243:8:-:0;;;1967:7;1939:35;;;;1980:37;;-1:-1:-1;2045:34:8;;;;2107:36;;;;2150:30;;;;2210:32;;;;2271:31;;2352:37;;;2396:64;-1:-1:-1;;;;;;2396:64:8;;;;;;2526:71;;;-1:-1:-1;;;;;;2526:71:8;2555:42;2526:71;;;1863:6243;;;;;;;;;-1:-1:-1;867:23:0;877:12;:10;:12::i;:::-;867:9;:23::i;:::-;1863:6243:8;;586:96:5;665:10;586:96;:::o;2041:169:0:-;2096:16;2115:6;;-1:-1:-1;;;;;2131:17:0;;;-1:-1:-1;;;;;;2131:17:0;;;;;;2163:40;;2115:6;;;;;;;2163:40;;2096:16;2163:40;2041:169;;:::o;1863:6243:8:-;;;;;;;", "sourcePath": "contracts/LeveragedTrading.sol", "type": "contract", "deployment": {"address": "0x00CB04b945354d3c34A22246633f490705620bfb", "chainid": "42", "blockHeight": 32771684}}
},{}],5:[function(require,module,exports){
module.exports={
"serverUrl" : "https://rjfi3tltmxvh.usemoralis.com:2053/server",
"appId" : "97wagl7iRrfE4SiHD8Y0aR77PrX5Btie0sisKP26"
}
},{}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usdcInfo = exports.leveragedTradingInfo = exports.btcupInfo = exports.btcdownInfo = void 0;
//"0x1bAA6AC0073e1C5A9C12e8A3856EA87560f0A636",
const leveragedTradingInfo = {
  "contractAddress": "0x00CB04b945354d3c34A22246633f490705620bfb",
  "abi": require("../build/deployments/42/0x00CB04b945354d3c34A22246633f490705620bfb.json")["abi"]
};
exports.leveragedTradingInfo = leveragedTradingInfo;
const btcupInfo = {
  contractAddress: "0x7C4a5a1A20Fa8dfedDf4d13e16F45f0E8612d0EE",
  abi: require("../build/contracts/BTCUP.json")["abi"]
};
exports.btcupInfo = btcupInfo;
const btcdownInfo = {
  contractAddress: "0x2CE25b47f33B84c6876c2936472FCBDE98bf8025",
  abi: require("../build/contracts/BTCDOWN.json")["abi"]
};
exports.btcdownInfo = btcdownInfo;
const usdcInfo = {
  contractAddress: "0xb7a4F3E9097C08dA09517b5aB877F7a917224ede",
  abi: require("../build/contracts/IERC20.json")["abi"]
};
exports.usdcInfo = usdcInfo;

},{"../build/contracts/BTCDOWN.json":1,"../build/contracts/BTCUP.json":2,"../build/contracts/IERC20.json":3,"../build/deployments/42/0x00CB04b945354d3c34A22246633f490705620bfb.json":4}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "leveragedTradingInfo", {
  enumerable: true,
  get: function () {
    return _contracts_and_abi.leveragedTradingInfo;
  }
});

var _contracts_and_abi = require("./contracts_and_abi.js");

var _secondary_functions = require("./secondary_functions.js");

const BigNumber = require('bignumber.js');

const config = require("./.config.json");

const serverUrl = config["serverUrl"];
const appId = config["appId"];
Moralis.start({
  serverUrl,
  appId
});

if (Moralis.User.current()) {
  Moralis.User.logOut();
}

;

async function connect() {
  if (!Moralis.User.current()) {
    await Moralis.authenticate({
      signingMessage: "Log in using Moralis"
    });
  }
}

async function issueBtcUp() {
  const moneyForInvestment = parseFloat(document.getElementById("amount-btcup-issue").value);
  const moneyForInvestmentStr = (0, _secondary_functions.getBigNumberWithDecimals)(moneyForInvestment, 6).toString();
  const tx = await (0, _secondary_functions.approve)(moneyForInvestmentStr, _contracts_and_abi.leveragedTradingInfo["contractAddress"], _contracts_and_abi.usdcInfo["contractAddress"], _contracts_and_abi.usdcInfo["abi"]);
  await tx.wait();
  const writeOptionsIssueBtcUp = {
    contractAddress: _contracts_and_abi.leveragedTradingInfo["contractAddress"],
    functionName: "issueBtcUp",
    abi: _contracts_and_abi.leveragedTradingInfo["abi"],
    params: {
      amountUsdc: moneyForInvestmentStr
    }
  };
  await Moralis.executeFunction(writeOptionsIssueBtcUp);
}

async function issueBtcDown() {
  const moneyForInvestment = parseFloat(document.getElementById("amount-btcdown-issue").value);
  const moneyForInvestmentStr = (0, _secondary_functions.getBigNumberWithDecimals)(moneyForInvestment, 6).toString();
  const tx = await (0, _secondary_functions.approve)(moneyForInvestmentStr, _contracts_and_abi.leveragedTradingInfo["contractAddress"], _contracts_and_abi.usdcInfo["contractAddress"], _contracts_and_abi.usdcInfo["abi"]);
  await tx.wait();
  const writeOptionsIssueBtcDown = {
    contractAddress: _contracts_and_abi.leveragedTradingInfo["contractAddress"],
    functionName: "issueBtcDown",
    abi: _contracts_and_abi.leveragedTradingInfo["abi"],
    params: {
      amountUsdc: moneyForInvestmentStr
    }
  };
  await Moralis.executeFunction(writeOptionsIssueBtcDown);
}

async function redeemBtcUp() {
  const amountLeveragedTokens = parseFloat(document.getElementById("amount-btcup-redeem").value);
  const amountLeveragedTokensStr = (0, _secondary_functions.getBigNumberWithDecimals)(amountLeveragedTokens, 6).toString();
  const tx = await (0, _secondary_functions.approve)(amountLeveragedTokensStr, _contracts_and_abi.leveragedTradingInfo["contractAddress"], _contracts_and_abi.btcupInfo["contractAddress"], _contracts_and_abi.btcupInfo["abi"]);
  await tx.wait();
  const writeOptionsRedeemBtcUp = {
    contractAddress: _contracts_and_abi.leveragedTradingInfo["contractAddress"],
    functionName: "redeemBtcUp",
    abi: _contracts_and_abi.leveragedTradingInfo["abi"],
    params: {
      amountLeveragedTokens: amountLeveragedTokensStr
    }
  };
  await Moralis.executeFunction(writeOptionsRedeemBtcUp);
}

async function redeemBtcDown() {
  const amountLeveragedTokens = parseFloat(document.getElementById("amount-btcdown-redeem").value);
  const amountLeveragedTokensStr = (0, _secondary_functions.getBigNumberWithDecimals)(amountLeveragedTokens, 6).toString();
  const tx = await (0, _secondary_functions.approve)(amountLeveragedTokensStr, _contracts_and_abi.leveragedTradingInfo["contractAddress"], _contracts_and_abi.btcdownInfo["contractAddress"], _contracts_and_abi.btcdownInfo["abi"]);
  await tx.wait();
  const writeOptionsRedeemBtcUp = {
    contractAddress: _contracts_and_abi.leveragedTradingInfo["contractAddress"],
    functionName: "redeemBtcDown",
    abi: _contracts_and_abi.leveragedTradingInfo["abi"],
    params: {
      amountLeveragedTokens: amountLeveragedTokensStr
    }
  };
  await Moralis.executeFunction(writeOptionsRedeemBtcUp);
}

document.getElementById("connect-btn").onclick = connect;
document.getElementById("issue-btcup-btn").onclick = issueBtcUp;
document.getElementById("issue-btcdown-btn").onclick = issueBtcDown;
document.getElementById("redeem-btcup-btn").onclick = redeemBtcUp;
document.getElementById("redeem-btcdown-btn").onclick = redeemBtcDown;

},{"./.config.json":5,"./contracts_and_abi.js":6,"./secondary_functions.js":8,"bignumber.js":9}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.approve = approve;
exports.getBigNumberWithDecimals = getBigNumberWithDecimals;

const BigNumber = require('bignumber.js');

function getBigNumberWithDecimals(x, numberDecimals) {
  const xAsBigNumber = new BigNumber(x.toFixed(numberDecimals));
  const ScalingFactorAsBigNumber = new BigNumber("1".concat("0".repeat(numberDecimals)));
  return xAsBigNumber.multipliedBy(ScalingFactorAsBigNumber);
}

async function approve(amountBigNumberWithDecimalsStr, spenderAddress, contractAddress, abi) {
  const writeOptionsApproval = {
    contractAddress: contractAddress,
    functionName: "approve",
    abi: abi,
    params: {
      spender: spenderAddress,
      amount: amountBigNumberWithDecimalsStr
    }
  };
  return await Moralis.executeFunction(writeOptionsApproval);
}

},{"bignumber.js":9}],9:[function(require,module,exports){
;(function (globalObject) {
  'use strict';

/*
 *      bignumber.js v9.0.2
 *      A JavaScript library for arbitrary-precision arithmetic.
 *      https://github.com/MikeMcl/bignumber.js
 *      Copyright (c) 2021 Michael Mclaughlin <M8ch88l@gmail.com>
 *      MIT Licensed.
 *
 *      BigNumber.prototype methods     |  BigNumber methods
 *                                      |
 *      absoluteValue            abs    |  clone
 *      comparedTo                      |  config               set
 *      decimalPlaces            dp     |      DECIMAL_PLACES
 *      dividedBy                div    |      ROUNDING_MODE
 *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT
 *      exponentiatedBy          pow    |      RANGE
 *      integerValue                    |      CRYPTO
 *      isEqualTo                eq     |      MODULO_MODE
 *      isFinite                        |      POW_PRECISION
 *      isGreaterThan            gt     |      FORMAT
 *      isGreaterThanOrEqualTo   gte    |      ALPHABET
 *      isInteger                       |  isBigNumber
 *      isLessThan               lt     |  maximum              max
 *      isLessThanOrEqualTo      lte    |  minimum              min
 *      isNaN                           |  random
 *      isNegative                      |  sum
 *      isPositive                      |
 *      isZero                          |
 *      minus                           |
 *      modulo                   mod    |
 *      multipliedBy             times  |
 *      negated                         |
 *      plus                            |
 *      precision                sd     |
 *      shiftedBy                       |
 *      squareRoot               sqrt   |
 *      toExponential                   |
 *      toFixed                         |
 *      toFormat                        |
 *      toFraction                      |
 *      toJSON                          |
 *      toNumber                        |
 *      toPrecision                     |
 *      toString                        |
 *      valueOf                         |
 *
 */


  var BigNumber,
    isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,
    mathceil = Math.ceil,
    mathfloor = Math.floor,

    bignumberError = '[BigNumber Error] ',
    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',

    BASE = 1e14,
    LOG_BASE = 14,
    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1
    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
    SQRT_BASE = 1e7,

    // EDITABLE
    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
    // the arguments to toExponential, toFixed, toFormat, and toPrecision.
    MAX = 1E9;                                   // 0 to MAX_INT32


  /*
   * Create and return a BigNumber constructor.
   */
  function clone(configObject) {
    var div, convertBase, parseNumeric,
      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },
      ONE = new BigNumber(1),


      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------


      // The default values below must be integers within the inclusive ranges stated.
      // The values can also be changed at run-time using BigNumber.set.

      // The maximum number of decimal places for operations involving division.
      DECIMAL_PLACES = 20,                     // 0 to MAX

      // The rounding mode used when rounding to the above decimal places, and when using
      // toExponential, toFixed, toFormat and toPrecision, and round (default value).
      // UP         0 Away from zero.
      // DOWN       1 Towards zero.
      // CEIL       2 Towards +Infinity.
      // FLOOR      3 Towards -Infinity.
      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.
      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
      ROUNDING_MODE = 4,                       // 0 to 8

      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

      // The exponent value at and beneath which toString returns exponential notation.
      // Number type: -7
      TO_EXP_NEG = -7,                         // 0 to -MAX

      // The exponent value at and above which toString returns exponential notation.
      // Number type: 21
      TO_EXP_POS = 21,                         // 0 to MAX

      // RANGE : [MIN_EXP, MAX_EXP]

      // The minimum exponent value, beneath which underflow to zero occurs.
      // Number type: -324  (5e-324)
      MIN_EXP = -1e7,                          // -1 to -MAX

      // The maximum exponent value, above which overflow to Infinity occurs.
      // Number type:  308  (1.7976931348623157e+308)
      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
      MAX_EXP = 1e7,                           // 1 to MAX

      // Whether to use cryptographically-secure random number generation, if available.
      CRYPTO = false,                          // true or false

      // The modulo mode used when calculating the modulus: a mod n.
      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
      // The remainder (r) is calculated as: r = a - n * q.
      //
      // UP        0 The remainder is positive if the dividend is negative, else is negative.
      // DOWN      1 The remainder has the same sign as the dividend.
      //             This modulo mode is commonly known as 'truncated division' and is
      //             equivalent to (a % n) in JavaScript.
      // FLOOR     3 The remainder has the same sign as the divisor (Python %).
      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
      //             The remainder is always positive.
      //
      // The truncated division, floored division, Euclidian division and IEEE 754 remainder
      // modes are commonly used for the modulus operation.
      // Although the other rounding modes can also be used, they may not give useful results.
      MODULO_MODE = 1,                         // 0 to 9

      // The maximum number of significant digits of the result of the exponentiatedBy operation.
      // If POW_PRECISION is 0, there will be unlimited significant digits.
      POW_PRECISION = 0,                       // 0 to MAX

      // The format specification used by the BigNumber.prototype.toFormat method.
      FORMAT = {
        prefix: '',
        groupSize: 3,
        secondaryGroupSize: 0,
        groupSeparator: ',',
        decimalSeparator: '.',
        fractionGroupSize: 0,
        fractionGroupSeparator: '\xA0',        // non-breaking space
        suffix: ''
      },

      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',
      // '-', '.', whitespace, or repeated character.
      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'
      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',
      alphabetHasNormalDecimalDigits = true;


    //------------------------------------------------------------------------------------------


    // CONSTRUCTOR


    /*
     * The BigNumber constructor and exported function.
     * Create and return a new instance of a BigNumber object.
     *
     * v {number|string|BigNumber} A numeric value.
     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.
     */
    function BigNumber(v, b) {
      var alphabet, c, caseChanged, e, i, isNum, len, str,
        x = this;

      // Enable constructor call without `new`.
      if (!(x instanceof BigNumber)) return new BigNumber(v, b);

      if (b == null) {

        if (v && v._isBigNumber === true) {
          x.s = v.s;

          if (!v.c || v.e > MAX_EXP) {
            x.c = x.e = null;
          } else if (v.e < MIN_EXP) {
            x.c = [x.e = 0];
          } else {
            x.e = v.e;
            x.c = v.c.slice();
          }

          return;
        }

        if ((isNum = typeof v == 'number') && v * 0 == 0) {

          // Use `1 / n` to handle minus zero also.
          x.s = 1 / v < 0 ? (v = -v, -1) : 1;

          // Fast path for integers, where n < 2147483648 (2**31).
          if (v === ~~v) {
            for (e = 0, i = v; i >= 10; i /= 10, e++);

            if (e > MAX_EXP) {
              x.c = x.e = null;
            } else {
              x.e = e;
              x.c = [v];
            }

            return;
          }

          str = String(v);
        } else {

          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);

          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
        }

        // Decimal point?
        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

        // Exponential form?
        if ((i = str.search(/e/i)) > 0) {

          // Determine exponent.
          if (e < 0) e = i;
          e += +str.slice(i + 1);
          str = str.substring(0, i);
        } else if (e < 0) {

          // Integer.
          e = str.length;
        }

      } else {

        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
        intCheck(b, 2, ALPHABET.length, 'Base');

        // Allow exponential notation to be used with base 10 argument, while
        // also rounding to DECIMAL_PLACES as with other bases.
        if (b == 10 && alphabetHasNormalDecimalDigits) {
          x = new BigNumber(v);
          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
        }

        str = String(v);

        if (isNum = typeof v == 'number') {

          // Avoid potential interpretation of Infinity and NaN as base 44+ values.
          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);

          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;

          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
          if (BigNumber.DEBUG && str.replace(/^0\.0*|\./, '').length > 15) {
            throw Error
             (tooManyDigits + v);
          }
        } else {
          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
        }

        alphabet = ALPHABET.slice(0, b);
        e = i = 0;

        // Check that str is a valid base b number.
        // Don't use RegExp, so alphabet can contain special characters.
        for (len = str.length; i < len; i++) {
          if (alphabet.indexOf(c = str.charAt(i)) < 0) {
            if (c == '.') {

              // If '.' is not the first character and it has not be found before.
              if (i > e) {
                e = len;
                continue;
              }
            } else if (!caseChanged) {

              // Allow e.g. hexadecimal 'FF' as well as 'ff'.
              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||
                  str == str.toLowerCase() && (str = str.toUpperCase())) {
                caseChanged = true;
                i = -1;
                e = 0;
                continue;
              }
            }

            return parseNumeric(x, String(v), isNum, b);
          }
        }

        // Prevent later check for length on converted number.
        isNum = false;
        str = convertBase(str, b, 10, x.s);

        // Decimal point?
        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');
        else e = str.length;
      }

      // Determine leading zeros.
      for (i = 0; str.charCodeAt(i) === 48; i++);

      // Determine trailing zeros.
      for (len = str.length; str.charCodeAt(--len) === 48;);

      if (str = str.slice(i, ++len)) {
        len -= i;

        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
        if (isNum && BigNumber.DEBUG &&
          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {
            throw Error
             (tooManyDigits + (x.s * v));
        }

         // Overflow?
        if ((e = e - i - 1) > MAX_EXP) {

          // Infinity.
          x.c = x.e = null;

        // Underflow?
        } else if (e < MIN_EXP) {

          // Zero.
          x.c = [x.e = 0];
        } else {
          x.e = e;
          x.c = [];

          // Transform base

          // e is the base 10 exponent.
          // i is where to slice str to get the first element of the coefficient array.
          i = (e + 1) % LOG_BASE;
          if (e < 0) i += LOG_BASE;  // i < 1

          if (i < len) {
            if (i) x.c.push(+str.slice(0, i));

            for (len -= LOG_BASE; i < len;) {
              x.c.push(+str.slice(i, i += LOG_BASE));
            }

            i = LOG_BASE - (str = str.slice(i)).length;
          } else {
            i -= len;
          }

          for (; i--; str += '0');
          x.c.push(+str);
        }
      } else {

        // Zero.
        x.c = [x.e = 0];
      }
    }


    // CONSTRUCTOR PROPERTIES


    BigNumber.clone = clone;

    BigNumber.ROUND_UP = 0;
    BigNumber.ROUND_DOWN = 1;
    BigNumber.ROUND_CEIL = 2;
    BigNumber.ROUND_FLOOR = 3;
    BigNumber.ROUND_HALF_UP = 4;
    BigNumber.ROUND_HALF_DOWN = 5;
    BigNumber.ROUND_HALF_EVEN = 6;
    BigNumber.ROUND_HALF_CEIL = 7;
    BigNumber.ROUND_HALF_FLOOR = 8;
    BigNumber.EUCLID = 9;


    /*
     * Configure infrequently-changing library-wide settings.
     *
     * Accept an object with the following optional properties (if the value of a property is
     * a number, it must be an integer within the inclusive range stated):
     *
     *   DECIMAL_PLACES   {number}           0 to MAX
     *   ROUNDING_MODE    {number}           0 to 8
     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]
     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]
     *   CRYPTO           {boolean}          true or false
     *   MODULO_MODE      {number}           0 to 9
     *   POW_PRECISION       {number}           0 to MAX
     *   ALPHABET         {string}           A string of two or more unique characters which does
     *                                       not contain '.'.
     *   FORMAT           {object}           An object with some of the following properties:
     *     prefix                 {string}
     *     groupSize              {number}
     *     secondaryGroupSize     {number}
     *     groupSeparator         {string}
     *     decimalSeparator       {string}
     *     fractionGroupSize      {number}
     *     fractionGroupSeparator {string}
     *     suffix                 {string}
     *
     * (The values assigned to the above FORMAT object properties are not checked for validity.)
     *
     * E.g.
     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
     *
     * Ignore properties/parameters set to null or undefined, except for ALPHABET.
     *
     * Return an object with the properties current values.
     */
    BigNumber.config = BigNumber.set = function (obj) {
      var p, v;

      if (obj != null) {

        if (typeof obj == 'object') {

          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'
          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {
            v = obj[p];
            intCheck(v, 0, MAX, p);
            DECIMAL_PLACES = v;
          }

          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'
          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {
            v = obj[p];
            intCheck(v, 0, 8, p);
            ROUNDING_MODE = v;
          }

          // EXPONENTIAL_AT {number|number[]}
          // Integer, -MAX to MAX inclusive or
          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].
          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'
          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {
            v = obj[p];
            if (v && v.pop) {
              intCheck(v[0], -MAX, 0, p);
              intCheck(v[1], 0, MAX, p);
              TO_EXP_NEG = v[0];
              TO_EXP_POS = v[1];
            } else {
              intCheck(v, -MAX, MAX, p);
              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
            }
          }

          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'
          if (obj.hasOwnProperty(p = 'RANGE')) {
            v = obj[p];
            if (v && v.pop) {
              intCheck(v[0], -MAX, -1, p);
              intCheck(v[1], 1, MAX, p);
              MIN_EXP = v[0];
              MAX_EXP = v[1];
            } else {
              intCheck(v, -MAX, MAX, p);
              if (v) {
                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
              } else {
                throw Error
                 (bignumberError + p + ' cannot be zero: ' + v);
              }
            }
          }

          // CRYPTO {boolean} true or false.
          // '[BigNumber Error] CRYPTO not true or false: {v}'
          // '[BigNumber Error] crypto unavailable'
          if (obj.hasOwnProperty(p = 'CRYPTO')) {
            v = obj[p];
            if (v === !!v) {
              if (v) {
                if (typeof crypto != 'undefined' && crypto &&
                 (crypto.getRandomValues || crypto.randomBytes)) {
                  CRYPTO = v;
                } else {
                  CRYPTO = !v;
                  throw Error
                   (bignumberError + 'crypto unavailable');
                }
              } else {
                CRYPTO = v;
              }
            } else {
              throw Error
               (bignumberError + p + ' not true or false: ' + v);
            }
          }

          // MODULO_MODE {number} Integer, 0 to 9 inclusive.
          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'
          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {
            v = obj[p];
            intCheck(v, 0, 9, p);
            MODULO_MODE = v;
          }

          // POW_PRECISION {number} Integer, 0 to MAX inclusive.
          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'
          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {
            v = obj[p];
            intCheck(v, 0, MAX, p);
            POW_PRECISION = v;
          }

          // FORMAT {object}
          // '[BigNumber Error] FORMAT not an object: {v}'
          if (obj.hasOwnProperty(p = 'FORMAT')) {
            v = obj[p];
            if (typeof v == 'object') FORMAT = v;
            else throw Error
             (bignumberError + p + ' not an object: ' + v);
          }

          // ALPHABET {string}
          // '[BigNumber Error] ALPHABET invalid: {v}'
          if (obj.hasOwnProperty(p = 'ALPHABET')) {
            v = obj[p];

            // Disallow if less than two characters,
            // or if it contains '+', '-', '.', whitespace, or a repeated character.
            if (typeof v == 'string' && !/^.?$|[+\-.\s]|(.).*\1/.test(v)) {
              alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';
              ALPHABET = v;
            } else {
              throw Error
               (bignumberError + p + ' invalid: ' + v);
            }
          }

        } else {

          // '[BigNumber Error] Object expected: {v}'
          throw Error
           (bignumberError + 'Object expected: ' + obj);
        }
      }

      return {
        DECIMAL_PLACES: DECIMAL_PLACES,
        ROUNDING_MODE: ROUNDING_MODE,
        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
        RANGE: [MIN_EXP, MAX_EXP],
        CRYPTO: CRYPTO,
        MODULO_MODE: MODULO_MODE,
        POW_PRECISION: POW_PRECISION,
        FORMAT: FORMAT,
        ALPHABET: ALPHABET
      };
    };


    /*
     * Return true if v is a BigNumber instance, otherwise return false.
     *
     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.
     *
     * v {any}
     *
     * '[BigNumber Error] Invalid BigNumber: {v}'
     */
    BigNumber.isBigNumber = function (v) {
      if (!v || v._isBigNumber !== true) return false;
      if (!BigNumber.DEBUG) return true;

      var i, n,
        c = v.c,
        e = v.e,
        s = v.s;

      out: if ({}.toString.call(c) == '[object Array]') {

        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {

          // If the first element is zero, the BigNumber value must be zero.
          if (c[0] === 0) {
            if (e === 0 && c.length === 1) return true;
            break out;
          }

          // Calculate number of digits that c[0] should have, based on the exponent.
          i = (e + 1) % LOG_BASE;
          if (i < 1) i += LOG_BASE;

          // Calculate number of digits of c[0].
          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {
          if (String(c[0]).length == i) {

            for (i = 0; i < c.length; i++) {
              n = c[i];
              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;
            }

            // Last element cannot be zero, unless it is the only element.
            if (n !== 0) return true;
          }
        }

      // Infinity/NaN
      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {
        return true;
      }

      throw Error
        (bignumberError + 'Invalid BigNumber: ' + v);
    };


    /*
     * Return a new BigNumber whose value is the maximum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */
    BigNumber.maximum = BigNumber.max = function () {
      return maxOrMin(arguments, P.lt);
    };


    /*
     * Return a new BigNumber whose value is the minimum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */
    BigNumber.minimum = BigNumber.min = function () {
      return maxOrMin(arguments, P.gt);
    };


    /*
     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
     * zeros are produced).
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'
     * '[BigNumber Error] crypto unavailable'
     */
    BigNumber.random = (function () {
      var pow2_53 = 0x20000000000000;

      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
      // Check if Math.random() produces more than 32 bits of randomness.
      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff
       ? function () { return mathfloor(Math.random() * pow2_53); }
       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +
         (Math.random() * 0x800000 | 0); };

      return function (dp) {
        var a, b, e, k, v,
          i = 0,
          c = [],
          rand = new BigNumber(ONE);

        if (dp == null) dp = DECIMAL_PLACES;
        else intCheck(dp, 0, MAX);

        k = mathceil(dp / LOG_BASE);

        if (CRYPTO) {

          // Browsers supporting crypto.getRandomValues.
          if (crypto.getRandomValues) {

            a = crypto.getRandomValues(new Uint32Array(k *= 2));

            for (; i < k;) {

              // 53 bits:
              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
              // 11111 11111111 11111111 11111111 11100000 00000000 00000000
              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
              //                                     11111 11111111 11111111
              // 0x20000 is 2^21.
              v = a[i] * 0x20000 + (a[i + 1] >>> 11);

              // Rejection sampling:
              // 0 <= v < 9007199254740992
              // Probability that v >= 9e15, is
              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
              if (v >= 9e15) {
                b = crypto.getRandomValues(new Uint32Array(2));
                a[i] = b[0];
                a[i + 1] = b[1];
              } else {

                // 0 <= v <= 8999999999999999
                // 0 <= (v % 1e14) <= 99999999999999
                c.push(v % 1e14);
                i += 2;
              }
            }
            i = k / 2;

          // Node.js supporting crypto.randomBytes.
          } else if (crypto.randomBytes) {

            // buffer
            a = crypto.randomBytes(k *= 7);

            for (; i < k;) {

              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
              // 0x100000000 is 2^32, 0x1000000 is 2^24
              // 11111 11111111 11111111 11111111 11111111 11111111 11111111
              // 0 <= v < 9007199254740992
              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +
                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +
                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];

              if (v >= 9e15) {
                crypto.randomBytes(7).copy(a, i);
              } else {

                // 0 <= (v % 1e14) <= 99999999999999
                c.push(v % 1e14);
                i += 7;
              }
            }
            i = k / 7;
          } else {
            CRYPTO = false;
            throw Error
             (bignumberError + 'crypto unavailable');
          }
        }

        // Use Math.random.
        if (!CRYPTO) {

          for (; i < k;) {
            v = random53bitInt();
            if (v < 9e15) c[i++] = v % 1e14;
          }
        }

        k = c[--i];
        dp %= LOG_BASE;

        // Convert trailing digits to zeros according to dp.
        if (k && dp) {
          v = POWS_TEN[LOG_BASE - dp];
          c[i] = mathfloor(k / v) * v;
        }

        // Remove trailing elements which are zero.
        for (; c[i] === 0; c.pop(), i--);

        // Zero?
        if (i < 0) {
          c = [e = 0];
        } else {

          // Remove leading elements which are zero and adjust exponent accordingly.
          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);

          // Count the digits of the first element of c to determine leading zeros, and...
          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);

          // adjust the exponent accordingly.
          if (i < LOG_BASE) e -= LOG_BASE - i;
        }

        rand.e = e;
        rand.c = c;
        return rand;
      };
    })();


    /*
     * Return a BigNumber whose value is the sum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */
    BigNumber.sum = function () {
      var i = 1,
        args = arguments,
        sum = new BigNumber(args[0]);
      for (; i < args.length;) sum = sum.plus(args[i++]);
      return sum;
    };


    // PRIVATE FUNCTIONS


    // Called by BigNumber and BigNumber.prototype.toString.
    convertBase = (function () {
      var decimal = '0123456789';

      /*
       * Convert string of baseIn to an array of numbers of baseOut.
       * Eg. toBaseOut('255', 10, 16) returns [15, 15].
       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].
       */
      function toBaseOut(str, baseIn, baseOut, alphabet) {
        var j,
          arr = [0],
          arrL,
          i = 0,
          len = str.length;

        for (; i < len;) {
          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);

          arr[0] += alphabet.indexOf(str.charAt(i++));

          for (j = 0; j < arr.length; j++) {

            if (arr[j] > baseOut - 1) {
              if (arr[j + 1] == null) arr[j + 1] = 0;
              arr[j + 1] += arr[j] / baseOut | 0;
              arr[j] %= baseOut;
            }
          }
        }

        return arr.reverse();
      }

      // Convert a numeric string of baseIn to a numeric string of baseOut.
      // If the caller is toString, we are converting from base 10 to baseOut.
      // If the caller is BigNumber, we are converting from baseIn to base 10.
      return function (str, baseIn, baseOut, sign, callerIsToString) {
        var alphabet, d, e, k, r, x, xc, y,
          i = str.indexOf('.'),
          dp = DECIMAL_PLACES,
          rm = ROUNDING_MODE;

        // Non-integer.
        if (i >= 0) {
          k = POW_PRECISION;

          // Unlimited precision.
          POW_PRECISION = 0;
          str = str.replace('.', '');
          y = new BigNumber(baseIn);
          x = y.pow(str.length - i);
          POW_PRECISION = k;

          // Convert str as if an integer, then restore the fraction part by dividing the
          // result by its base raised to a power.

          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),
           10, baseOut, decimal);
          y.e = y.c.length;
        }

        // Convert the number as integer.

        xc = toBaseOut(str, baseIn, baseOut, callerIsToString
         ? (alphabet = ALPHABET, decimal)
         : (alphabet = decimal, ALPHABET));

        // xc now represents str as an integer and converted to baseOut. e is the exponent.
        e = k = xc.length;

        // Remove trailing zeros.
        for (; xc[--k] == 0; xc.pop());

        // Zero?
        if (!xc[0]) return alphabet.charAt(0);

        // Does str represent an integer? If so, no need for the division.
        if (i < 0) {
          --e;
        } else {
          x.c = xc;
          x.e = e;

          // The sign is needed for correct rounding.
          x.s = sign;
          x = div(x, y, dp, rm, baseOut);
          xc = x.c;
          r = x.r;
          e = x.e;
        }

        // xc now represents str converted to baseOut.

        // THe index of the rounding digit.
        d = e + dp + 1;

        // The rounding digit: the digit to the right of the digit that may be rounded up.
        i = xc[d];

        // Look at the rounding digits and mode to determine whether to round up.

        k = baseOut / 2;
        r = r || d < 0 || xc[d + 1] != null;

        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||
               rm == (x.s < 0 ? 8 : 7));

        // If the index of the rounding digit is not greater than zero, or xc represents
        // zero, then the result of the base conversion is zero or, if rounding up, a value
        // such as 0.00001.
        if (d < 1 || !xc[0]) {

          // 1^-dp or 0
          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
        } else {

          // Truncate xc to the required number of decimal places.
          xc.length = d;

          // Round up?
          if (r) {

            // Rounding up may mean the previous digit has to be rounded up and so on.
            for (--baseOut; ++xc[--d] > baseOut;) {
              xc[d] = 0;

              if (!d) {
                ++e;
                xc = [1].concat(xc);
              }
            }
          }

          // Determine trailing zeros.
          for (k = xc.length; !xc[--k];);

          // E.g. [4, 11, 15] becomes 4bf.
          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));

          // Add leading zeros, decimal point and trailing zeros as required.
          str = toFixedPoint(str, e, alphabet.charAt(0));
        }

        // The caller will add the sign.
        return str;
      };
    })();


    // Perform division in the specified base. Called by div and convertBase.
    div = (function () {

      // Assume non-zero x and k.
      function multiply(x, k, base) {
        var m, temp, xlo, xhi,
          carry = 0,
          i = x.length,
          klo = k % SQRT_BASE,
          khi = k / SQRT_BASE | 0;

        for (x = x.slice(); i--;) {
          xlo = x[i] % SQRT_BASE;
          xhi = x[i] / SQRT_BASE | 0;
          m = khi * xlo + xhi * klo;
          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;
          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
          x[i] = temp % base;
        }

        if (carry) x = [carry].concat(x);

        return x;
      }

      function compare(a, b, aL, bL) {
        var i, cmp;

        if (aL != bL) {
          cmp = aL > bL ? 1 : -1;
        } else {

          for (i = cmp = 0; i < aL; i++) {

            if (a[i] != b[i]) {
              cmp = a[i] > b[i] ? 1 : -1;
              break;
            }
          }
        }

        return cmp;
      }

      function subtract(a, b, aL, base) {
        var i = 0;

        // Subtract b from a.
        for (; aL--;) {
          a[aL] -= i;
          i = a[aL] < b[aL] ? 1 : 0;
          a[aL] = i * base + a[aL] - b[aL];
        }

        // Remove leading zeros.
        for (; !a[0] && a.length > 1; a.splice(0, 1));
      }

      // x: dividend, y: divisor.
      return function (x, y, dp, rm, base) {
        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,
          yL, yz,
          s = x.s == y.s ? 1 : -1,
          xc = x.c,
          yc = y.c;

        // Either NaN, Infinity or 0?
        if (!xc || !xc[0] || !yc || !yc[0]) {

          return new BigNumber(

           // Return NaN if either NaN, or both Infinity or 0.
           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :

            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
            xc && xc[0] == 0 || !yc ? s * 0 : s / 0
         );
        }

        q = new BigNumber(s);
        qc = q.c = [];
        e = x.e - y.e;
        s = dp + e + 1;

        if (!base) {
          base = BASE;
          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
          s = s / LOG_BASE | 0;
        }

        // Result exponent may be one less then the current value of e.
        // The coefficients of the BigNumbers from convertBase may have trailing zeros.
        for (i = 0; yc[i] == (xc[i] || 0); i++);

        if (yc[i] > (xc[i] || 0)) e--;

        if (s < 0) {
          qc.push(1);
          more = true;
        } else {
          xL = xc.length;
          yL = yc.length;
          i = 0;
          s += 2;

          // Normalise xc and yc so highest order digit of yc is >= base / 2.

          n = mathfloor(base / (yc[0] + 1));

          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.
          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {
          if (n > 1) {
            yc = multiply(yc, n, base);
            xc = multiply(xc, n, base);
            yL = yc.length;
            xL = xc.length;
          }

          xi = yL;
          rem = xc.slice(0, yL);
          remL = rem.length;

          // Add zeros to make remainder as long as divisor.
          for (; remL < yL; rem[remL++] = 0);
          yz = yc.slice();
          yz = [0].concat(yz);
          yc0 = yc[0];
          if (yc[1] >= base / 2) yc0++;
          // Not necessary, but to prevent trial digit n > base, when using base 3.
          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;

          do {
            n = 0;

            // Compare divisor and remainder.
            cmp = compare(yc, rem, yL, remL);

            // If divisor < remainder.
            if (cmp < 0) {

              // Calculate trial digit, n.

              rem0 = rem[0];
              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

              // n is how many times the divisor goes into the current remainder.
              n = mathfloor(rem0 / yc0);

              //  Algorithm:
              //  product = divisor multiplied by trial digit (n).
              //  Compare product and remainder.
              //  If product is greater than remainder:
              //    Subtract divisor from product, decrement trial digit.
              //  Subtract product from remainder.
              //  If product was less than remainder at the last compare:
              //    Compare new remainder and divisor.
              //    If remainder is greater than divisor:
              //      Subtract divisor from remainder, increment trial digit.

              if (n > 1) {

                // n may be > base only when base is 3.
                if (n >= base) n = base - 1;

                // product = divisor * trial digit.
                prod = multiply(yc, n, base);
                prodL = prod.length;
                remL = rem.length;

                // Compare product and remainder.
                // If product > remainder then trial digit n too high.
                // n is 1 too high about 5% of the time, and is not known to have
                // ever been more than 1 too high.
                while (compare(prod, rem, prodL, remL) == 1) {
                  n--;

                  // Subtract divisor from product.
                  subtract(prod, yL < prodL ? yz : yc, prodL, base);
                  prodL = prod.length;
                  cmp = 1;
                }
              } else {

                // n is 0 or 1, cmp is -1.
                // If n is 0, there is no need to compare yc and rem again below,
                // so change cmp to 1 to avoid it.
                // If n is 1, leave cmp as -1, so yc and rem are compared again.
                if (n == 0) {

                  // divisor < remainder, so n must be at least 1.
                  cmp = n = 1;
                }

                // product = divisor
                prod = yc.slice();
                prodL = prod.length;
              }

              if (prodL < remL) prod = [0].concat(prod);

              // Subtract product from remainder.
              subtract(rem, prod, remL, base);
              remL = rem.length;

               // If product was < remainder.
              if (cmp == -1) {

                // Compare divisor and new remainder.
                // If divisor < new remainder, subtract divisor from remainder.
                // Trial digit n too low.
                // n is 1 too low about 5% of the time, and very rarely 2 too low.
                while (compare(yc, rem, yL, remL) < 1) {
                  n++;

                  // Subtract divisor from remainder.
                  subtract(rem, yL < remL ? yz : yc, remL, base);
                  remL = rem.length;
                }
              }
            } else if (cmp === 0) {
              n++;
              rem = [0];
            } // else cmp === 1 and n will be 0

            // Add the next digit, n, to the result array.
            qc[i++] = n;

            // Update the remainder.
            if (rem[0]) {
              rem[remL++] = xc[xi] || 0;
            } else {
              rem = [xc[xi]];
              remL = 1;
            }
          } while ((xi++ < xL || rem[0] != null) && s--);

          more = rem[0] != null;

          // Leading zero?
          if (!qc[0]) qc.splice(0, 1);
        }

        if (base == BASE) {

          // To calculate q.e, first get the number of digits of qc[0].
          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);

          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);

        // Caller is convertBase.
        } else {
          q.e = e;
          q.r = +more;
        }

        return q;
      };
    })();


    /*
     * Return a string representing the value of BigNumber n in fixed-point or exponential
     * notation rounded to the specified decimal places or significant digits.
     *
     * n: a BigNumber.
     * i: the index of the last digit required (i.e. the digit that may be rounded up).
     * rm: the rounding mode.
     * id: 1 (toExponential) or 2 (toPrecision).
     */
    function format(n, i, rm, id) {
      var c0, e, ne, len, str;

      if (rm == null) rm = ROUNDING_MODE;
      else intCheck(rm, 0, 8);

      if (!n.c) return n.toString();

      c0 = n.c[0];
      ne = n.e;

      if (i == null) {
        str = coeffToString(n.c);
        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)
         ? toExponential(str, ne)
         : toFixedPoint(str, ne, '0');
      } else {
        n = round(new BigNumber(n), i, rm);

        // n.e may have changed if the value was rounded up.
        e = n.e;

        str = coeffToString(n.c);
        len = str.length;

        // toPrecision returns exponential notation if the number of significant digits
        // specified is less than the number of digits necessary to represent the integer
        // part of the value in fixed-point notation.

        // Exponential notation.
        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {

          // Append zeros?
          for (; len < i; str += '0', len++);
          str = toExponential(str, e);

        // Fixed-point notation.
        } else {
          i -= ne;
          str = toFixedPoint(str, e, '0');

          // Append zeros?
          if (e + 1 > len) {
            if (--i > 0) for (str += '.'; i--; str += '0');
          } else {
            i += e - len;
            if (i > 0) {
              if (e + 1 == len) str += '.';
              for (; i--; str += '0');
            }
          }
        }
      }

      return n.s < 0 && c0 ? '-' + str : str;
    }


    // Handle BigNumber.max and BigNumber.min.
    function maxOrMin(args, method) {
      var n,
        i = 1,
        m = new BigNumber(args[0]);

      for (; i < args.length; i++) {
        n = new BigNumber(args[i]);

        // If any number is NaN, return NaN.
        if (!n.s) {
          m = n;
          break;
        } else if (method.call(m, n)) {
          m = n;
        }
      }

      return m;
    }


    /*
     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
     * Called by minus, plus and times.
     */
    function normalise(n, c, e) {
      var i = 1,
        j = c.length;

       // Remove trailing zeros.
      for (; !c[--j]; c.pop());

      // Calculate the base 10 exponent. First get the number of digits of c[0].
      for (j = c[0]; j >= 10; j /= 10, i++);

      // Overflow?
      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {

        // Infinity.
        n.c = n.e = null;

      // Underflow?
      } else if (e < MIN_EXP) {

        // Zero.
        n.c = [n.e = 0];
      } else {
        n.e = e;
        n.c = c;
      }

      return n;
    }


    // Handle values that fail the validity test in BigNumber.
    parseNumeric = (function () {
      var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
        dotAfter = /^([^.]+)\.$/,
        dotBefore = /^\.([^.]+)$/,
        isInfinityOrNaN = /^-?(Infinity|NaN)$/,
        whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;

      return function (x, str, isNum, b) {
        var base,
          s = isNum ? str : str.replace(whitespaceOrPlus, '');

        // No exception on ±Infinity or NaN.
        if (isInfinityOrNaN.test(s)) {
          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
        } else {
          if (!isNum) {

            // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
            s = s.replace(basePrefix, function (m, p1, p2) {
              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
              return !b || b == base ? p1 : m;
            });

            if (b) {
              base = b;

              // E.g. '1.' to '1', '.1' to '0.1'
              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
            }

            if (str != s) return new BigNumber(s, base);
          }

          // '[BigNumber Error] Not a number: {n}'
          // '[BigNumber Error] Not a base {b} number: {n}'
          if (BigNumber.DEBUG) {
            throw Error
              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);
          }

          // NaN
          x.s = null;
        }

        x.c = x.e = null;
      }
    })();


    /*
     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
     * If r is truthy, it is known that there are more digits after the rounding digit.
     */
    function round(x, sd, rm, r) {
      var d, i, j, k, n, ni, rd,
        xc = x.c,
        pows10 = POWS_TEN;

      // if x is not Infinity or NaN...
      if (xc) {

        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
        // n is a base 1e14 number, the value of the element of array x.c containing rd.
        // ni is the index of n within x.c.
        // d is the number of digits of n.
        // i is the index of rd within n including leading zeros.
        // j is the actual index of rd within n (if < 0, rd is a leading zero).
        out: {

          // Get the number of digits of the first element of xc.
          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);
          i = sd - d;

          // If the rounding digit is in the first element of xc...
          if (i < 0) {
            i += LOG_BASE;
            j = sd;
            n = xc[ni = 0];

            // Get the rounding digit at index j of n.
            rd = n / pows10[d - j - 1] % 10 | 0;
          } else {
            ni = mathceil((i + 1) / LOG_BASE);

            if (ni >= xc.length) {

              if (r) {

                // Needed by sqrt.
                for (; xc.length <= ni; xc.push(0));
                n = rd = 0;
                d = 1;
                i %= LOG_BASE;
                j = i - LOG_BASE + 1;
              } else {
                break out;
              }
            } else {
              n = k = xc[ni];

              // Get the number of digits of n.
              for (d = 1; k >= 10; k /= 10, d++);

              // Get the index of rd within n.
              i %= LOG_BASE;

              // Get the index of rd within n, adjusted for leading zeros.
              // The number of leading zeros of n is given by LOG_BASE - d.
              j = i - LOG_BASE + d;

              // Get the rounding digit at index j of n.
              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
            }
          }

          r = r || sd < 0 ||

          // Are there any non-zero digits after the rounding digit?
          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);

          r = rm < 4
           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&

            // Check whether the digit to the left of the rounding digit is odd.
            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||
             rm == (x.s < 0 ? 8 : 7));

          if (sd < 1 || !xc[0]) {
            xc.length = 0;

            if (r) {

              // Convert sd to decimal places.
              sd -= x.e + 1;

              // 1, 0.1, 0.01, 0.001, 0.0001 etc.
              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
              x.e = -sd || 0;
            } else {

              // Zero.
              xc[0] = x.e = 0;
            }

            return x;
          }

          // Remove excess digits.
          if (i == 0) {
            xc.length = ni;
            k = 1;
            ni--;
          } else {
            xc.length = ni + 1;
            k = pows10[LOG_BASE - i];

            // E.g. 56700 becomes 56000 if 7 is the rounding digit.
            // j > 0 means i > number of leading zeros of n.
            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
          }

          // Round up?
          if (r) {

            for (; ;) {

              // If the digit to be rounded up is in the first element of xc...
              if (ni == 0) {

                // i will be the length of xc[0] before k is added.
                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);
                j = xc[0] += k;
                for (k = 1; j >= 10; j /= 10, k++);

                // if i != k the length has increased.
                if (i != k) {
                  x.e++;
                  if (xc[0] == BASE) xc[0] = 1;
                }

                break;
              } else {
                xc[ni] += k;
                if (xc[ni] != BASE) break;
                xc[ni--] = 0;
                k = 1;
              }
            }
          }

          // Remove trailing zeros.
          for (i = xc.length; xc[--i] === 0; xc.pop());
        }

        // Overflow? Infinity.
        if (x.e > MAX_EXP) {
          x.c = x.e = null;

        // Underflow? Zero.
        } else if (x.e < MIN_EXP) {
          x.c = [x.e = 0];
        }
      }

      return x;
    }


    function valueOf(n) {
      var str,
        e = n.e;

      if (e === null) return n.toString();

      str = coeffToString(n.c);

      str = e <= TO_EXP_NEG || e >= TO_EXP_POS
        ? toExponential(str, e)
        : toFixedPoint(str, e, '0');

      return n.s < 0 ? '-' + str : str;
    }


    // PROTOTYPE/INSTANCE METHODS


    /*
     * Return a new BigNumber whose value is the absolute value of this BigNumber.
     */
    P.absoluteValue = P.abs = function () {
      var x = new BigNumber(this);
      if (x.s < 0) x.s = 1;
      return x;
    };


    /*
     * Return
     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
     *   0 if they have the same value,
     *   or null if the value of either is NaN.
     */
    P.comparedTo = function (y, b) {
      return compare(this, new BigNumber(y, b));
    };


    /*
     * If dp is undefined or null or true or false, return the number of decimal places of the
     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
     *
     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this
     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or
     * ROUNDING_MODE if rm is omitted.
     *
     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */
    P.decimalPlaces = P.dp = function (dp, rm) {
      var c, n, v,
        x = this;

      if (dp != null) {
        intCheck(dp, 0, MAX);
        if (rm == null) rm = ROUNDING_MODE;
        else intCheck(rm, 0, 8);

        return round(new BigNumber(x), dp + x.e + 1, rm);
      }

      if (!(c = x.c)) return null;
      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;

      // Subtract the number of trailing zeros of the last number.
      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);
      if (n < 0) n = 0;

      return n;
    };


    /*
     *  n / 0 = I
     *  n / N = N
     *  n / I = 0
     *  0 / n = 0
     *  0 / 0 = N
     *  0 / N = N
     *  0 / I = 0
     *  N / n = N
     *  N / 0 = N
     *  N / N = N
     *  N / I = N
     *  I / n = I
     *  I / 0 = I
     *  I / N = N
     *  I / I = N
     *
     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
     */
    P.dividedBy = P.div = function (y, b) {
      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
    };


    /*
     * Return a new BigNumber whose value is the integer part of dividing the value of this
     * BigNumber by the value of BigNumber(y, b).
     */
    P.dividedToIntegerBy = P.idiv = function (y, b) {
      return div(this, new BigNumber(y, b), 0, 1);
    };


    /*
     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.
     *
     * If m is present, return the result modulo m.
     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.
     *
     * The modular power operation works efficiently when x, n, and m are integers, otherwise it
     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.
     *
     * n {number|string|BigNumber} The exponent. An integer.
     * [m] {number|string|BigNumber} The modulus.
     *
     * '[BigNumber Error] Exponent not an integer: {n}'
     */
    P.exponentiatedBy = P.pow = function (n, m) {
      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,
        x = this;

      n = new BigNumber(n);

      // Allow NaN and ±Infinity, but not other non-integers.
      if (n.c && !n.isInteger()) {
        throw Error
          (bignumberError + 'Exponent not an integer: ' + valueOf(n));
      }

      if (m != null) m = new BigNumber(m);

      // Exponent of MAX_SAFE_INTEGER is 15.
      nIsBig = n.e > 14;

      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.
      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {

        // The sign of the result of pow when x is negative depends on the evenness of n.
        // If +n overflows to ±Infinity, the evenness of n would be not be known.
        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));
        return m ? y.mod(m) : y;
      }

      nIsNeg = n.s < 0;

      if (m) {

        // x % m returns NaN if abs(m) is zero, or m is NaN.
        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);

        isModExp = !nIsNeg && x.isInteger() && m.isInteger();

        if (isModExp) x = x.mod(m);

      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.
      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.
      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0
        // [1, 240000000]
        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7
        // [80000000000000]  [99999750000000]
        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {

        // If x is negative and n is odd, k = -0, else k = 0.
        k = x.s < 0 && isOdd(n) ? -0 : 0;

        // If x >= 1, k = ±Infinity.
        if (x.e > -1) k = 1 / k;

        // If n is negative return ±0, else return ±Infinity.
        return new BigNumber(nIsNeg ? 1 / k : k);

      } else if (POW_PRECISION) {

        // Truncating each coefficient array to a length of k after each multiplication
        // equates to truncating significant digits to POW_PRECISION + [28, 41],
        // i.e. there will be a minimum of 28 guard digits retained.
        k = mathceil(POW_PRECISION / LOG_BASE + 2);
      }

      if (nIsBig) {
        half = new BigNumber(0.5);
        if (nIsNeg) n.s = 1;
        nIsOdd = isOdd(n);
      } else {
        i = Math.abs(+valueOf(n));
        nIsOdd = i % 2;
      }

      y = new BigNumber(ONE);

      // Performs 54 loop iterations for n of 9007199254740991.
      for (; ;) {

        if (nIsOdd) {
          y = y.times(x);
          if (!y.c) break;

          if (k) {
            if (y.c.length > k) y.c.length = k;
          } else if (isModExp) {
            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));
          }
        }

        if (i) {
          i = mathfloor(i / 2);
          if (i === 0) break;
          nIsOdd = i % 2;
        } else {
          n = n.times(half);
          round(n, n.e + 1, 1);

          if (n.e > 14) {
            nIsOdd = isOdd(n);
          } else {
            i = +valueOf(n);
            if (i === 0) break;
            nIsOdd = i % 2;
          }
        }

        x = x.times(x);

        if (k) {
          if (x.c && x.c.length > k) x.c.length = k;
        } else if (isModExp) {
          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));
        }
      }

      if (isModExp) return y;
      if (nIsNeg) y = ONE.div(y);

      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
    };


    /*
     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer
     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.
     *
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'
     */
    P.integerValue = function (rm) {
      var n = new BigNumber(this);
      if (rm == null) rm = ROUNDING_MODE;
      else intCheck(rm, 0, 8);
      return round(n, n.e + 1, rm);
    };


    /*
     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
     * otherwise return false.
     */
    P.isEqualTo = P.eq = function (y, b) {
      return compare(this, new BigNumber(y, b)) === 0;
    };


    /*
     * Return true if the value of this BigNumber is a finite number, otherwise return false.
     */
    P.isFinite = function () {
      return !!this.c;
    };


    /*
     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
     * otherwise return false.
     */
    P.isGreaterThan = P.gt = function (y, b) {
      return compare(this, new BigNumber(y, b)) > 0;
    };


    /*
     * Return true if the value of this BigNumber is greater than or equal to the value of
     * BigNumber(y, b), otherwise return false.
     */
    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {
      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;

    };


    /*
     * Return true if the value of this BigNumber is an integer, otherwise return false.
     */
    P.isInteger = function () {
      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
    };


    /*
     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
     * otherwise return false.
     */
    P.isLessThan = P.lt = function (y, b) {
      return compare(this, new BigNumber(y, b)) < 0;
    };


    /*
     * Return true if the value of this BigNumber is less than or equal to the value of
     * BigNumber(y, b), otherwise return false.
     */
    P.isLessThanOrEqualTo = P.lte = function (y, b) {
      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;
    };


    /*
     * Return true if the value of this BigNumber is NaN, otherwise return false.
     */
    P.isNaN = function () {
      return !this.s;
    };


    /*
     * Return true if the value of this BigNumber is negative, otherwise return false.
     */
    P.isNegative = function () {
      return this.s < 0;
    };


    /*
     * Return true if the value of this BigNumber is positive, otherwise return false.
     */
    P.isPositive = function () {
      return this.s > 0;
    };


    /*
     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.
     */
    P.isZero = function () {
      return !!this.c && this.c[0] == 0;
    };


    /*
     *  n - 0 = n
     *  n - N = N
     *  n - I = -I
     *  0 - n = -n
     *  0 - 0 = 0
     *  0 - N = N
     *  0 - I = -I
     *  N - n = N
     *  N - 0 = N
     *  N - N = N
     *  N - I = N
     *  I - n = I
     *  I - 0 = I
     *  I - N = N
     *  I - I = N
     *
     * Return a new BigNumber whose value is the value of this BigNumber minus the value of
     * BigNumber(y, b).
     */
    P.minus = function (y, b) {
      var i, j, t, xLTy,
        x = this,
        a = x.s;

      y = new BigNumber(y, b);
      b = y.s;

      // Either NaN?
      if (!a || !b) return new BigNumber(NaN);

      // Signs differ?
      if (a != b) {
        y.s = -b;
        return x.plus(y);
      }

      var xe = x.e / LOG_BASE,
        ye = y.e / LOG_BASE,
        xc = x.c,
        yc = y.c;

      if (!xe || !ye) {

        // Either Infinity?
        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);

        // Either zero?
        if (!xc[0] || !yc[0]) {

          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :

           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
           ROUNDING_MODE == 3 ? -0 : 0);
        }
      }

      xe = bitFloor(xe);
      ye = bitFloor(ye);
      xc = xc.slice();

      // Determine which is the bigger number.
      if (a = xe - ye) {

        if (xLTy = a < 0) {
          a = -a;
          t = xc;
        } else {
          ye = xe;
          t = yc;
        }

        t.reverse();

        // Prepend zeros to equalise exponents.
        for (b = a; b--; t.push(0));
        t.reverse();
      } else {

        // Exponents equal. Check digit by digit.
        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;

        for (a = b = 0; b < j; b++) {

          if (xc[b] != yc[b]) {
            xLTy = xc[b] < yc[b];
            break;
          }
        }
      }

      // x < y? Point xc to the array of the bigger number.
      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;

      b = (j = yc.length) - (i = xc.length);

      // Append zeros to xc if shorter.
      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
      if (b > 0) for (; b--; xc[i++] = 0);
      b = BASE - 1;

      // Subtract yc from xc.
      for (; j > a;) {

        if (xc[--j] < yc[j]) {
          for (i = j; i && !xc[--i]; xc[i] = b);
          --xc[i];
          xc[j] += BASE;
        }

        xc[j] -= yc[j];
      }

      // Remove leading zeros and adjust exponent accordingly.
      for (; xc[0] == 0; xc.splice(0, 1), --ye);

      // Zero?
      if (!xc[0]) {

        // Following IEEE 754 (2008) 6.3,
        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
        y.s = ROUNDING_MODE == 3 ? -1 : 1;
        y.c = [y.e = 0];
        return y;
      }

      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
      // for finite x and y.
      return normalise(y, xc, ye);
    };


    /*
     *   n % 0 =  N
     *   n % N =  N
     *   n % I =  n
     *   0 % n =  0
     *  -0 % n = -0
     *   0 % 0 =  N
     *   0 % N =  N
     *   0 % I =  0
     *   N % n =  N
     *   N % 0 =  N
     *   N % N =  N
     *   N % I =  N
     *   I % n =  N
     *   I % 0 =  N
     *   I % N =  N
     *   I % I =  N
     *
     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
     * BigNumber(y, b). The result depends on the value of MODULO_MODE.
     */
    P.modulo = P.mod = function (y, b) {
      var q, s,
        x = this;

      y = new BigNumber(y, b);

      // Return NaN if x is Infinity or NaN, or y is NaN or zero.
      if (!x.c || !y.s || y.c && !y.c[0]) {
        return new BigNumber(NaN);

      // Return x if y is Infinity or x is zero.
      } else if (!y.c || x.c && !x.c[0]) {
        return new BigNumber(x);
      }

      if (MODULO_MODE == 9) {

        // Euclidian division: q = sign(y) * floor(x / abs(y))
        // r = x - qy    where  0 <= r < abs(y)
        s = y.s;
        y.s = 1;
        q = div(x, y, 0, 3);
        y.s = s;
        q.s *= s;
      } else {
        q = div(x, y, 0, MODULO_MODE);
      }

      y = x.minus(q.times(y));

      // To match JavaScript %, ensure sign of zero is sign of dividend.
      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;

      return y;
    };


    /*
     *  n * 0 = 0
     *  n * N = N
     *  n * I = I
     *  0 * n = 0
     *  0 * 0 = 0
     *  0 * N = N
     *  0 * I = N
     *  N * n = N
     *  N * 0 = N
     *  N * N = N
     *  N * I = N
     *  I * n = I
     *  I * 0 = N
     *  I * N = N
     *  I * I = I
     *
     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value
     * of BigNumber(y, b).
     */
    P.multipliedBy = P.times = function (y, b) {
      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,
        base, sqrtBase,
        x = this,
        xc = x.c,
        yc = (y = new BigNumber(y, b)).c;

      // Either NaN, ±Infinity or ±0?
      if (!xc || !yc || !xc[0] || !yc[0]) {

        // Return NaN if either is NaN, or one is 0 and the other is Infinity.
        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
          y.c = y.e = y.s = null;
        } else {
          y.s *= x.s;

          // Return ±Infinity if either is ±Infinity.
          if (!xc || !yc) {
            y.c = y.e = null;

          // Return ±0 if either is ±0.
          } else {
            y.c = [0];
            y.e = 0;
          }
        }

        return y;
      }

      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
      y.s *= x.s;
      xcL = xc.length;
      ycL = yc.length;

      // Ensure xc points to longer array and xcL to its length.
      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;

      // Initialise the result array with zeros.
      for (i = xcL + ycL, zc = []; i--; zc.push(0));

      base = BASE;
      sqrtBase = SQRT_BASE;

      for (i = ycL; --i >= 0;) {
        c = 0;
        ylo = yc[i] % sqrtBase;
        yhi = yc[i] / sqrtBase | 0;

        for (k = xcL, j = i + k; j > i;) {
          xlo = xc[--k] % sqrtBase;
          xhi = xc[k] / sqrtBase | 0;
          m = yhi * xlo + xhi * ylo;
          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;
          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
          zc[j--] = xlo % base;
        }

        zc[j] = c;
      }

      if (c) {
        ++e;
      } else {
        zc.splice(0, 1);
      }

      return normalise(y, zc, e);
    };


    /*
     * Return a new BigNumber whose value is the value of this BigNumber negated,
     * i.e. multiplied by -1.
     */
    P.negated = function () {
      var x = new BigNumber(this);
      x.s = -x.s || null;
      return x;
    };


    /*
     *  n + 0 = n
     *  n + N = N
     *  n + I = I
     *  0 + n = n
     *  0 + 0 = 0
     *  0 + N = N
     *  0 + I = I
     *  N + n = N
     *  N + 0 = N
     *  N + N = N
     *  N + I = N
     *  I + n = I
     *  I + 0 = I
     *  I + N = N
     *  I + I = I
     *
     * Return a new BigNumber whose value is the value of this BigNumber plus the value of
     * BigNumber(y, b).
     */
    P.plus = function (y, b) {
      var t,
        x = this,
        a = x.s;

      y = new BigNumber(y, b);
      b = y.s;

      // Either NaN?
      if (!a || !b) return new BigNumber(NaN);

      // Signs differ?
       if (a != b) {
        y.s = -b;
        return x.minus(y);
      }

      var xe = x.e / LOG_BASE,
        ye = y.e / LOG_BASE,
        xc = x.c,
        yc = y.c;

      if (!xe || !ye) {

        // Return ±Infinity if either ±Infinity.
        if (!xc || !yc) return new BigNumber(a / 0);

        // Either zero?
        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
      }

      xe = bitFloor(xe);
      ye = bitFloor(ye);
      xc = xc.slice();

      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
      if (a = xe - ye) {
        if (a > 0) {
          ye = xe;
          t = yc;
        } else {
          a = -a;
          t = xc;
        }

        t.reverse();
        for (; a--; t.push(0));
        t.reverse();
      }

      a = xc.length;
      b = yc.length;

      // Point xc to the longer array, and b to the shorter length.
      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;

      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
      for (a = 0; b;) {
        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
      }

      if (a) {
        xc = [a].concat(xc);
        ++ye;
      }

      // No need to check for zero, as +x + +y != 0 && -x + -y != 0
      // ye = MAX_EXP + 1 possible
      return normalise(y, xc, ye);
    };


    /*
     * If sd is undefined or null or true or false, return the number of significant digits of
     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
     * If sd is true include integer-part trailing zeros in the count.
     *
     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this
     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or
     * ROUNDING_MODE if rm is omitted.
     *
     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.
     *                     boolean: whether to count integer-part trailing zeros: true or false.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
     */
    P.precision = P.sd = function (sd, rm) {
      var c, n, v,
        x = this;

      if (sd != null && sd !== !!sd) {
        intCheck(sd, 1, MAX);
        if (rm == null) rm = ROUNDING_MODE;
        else intCheck(rm, 0, 8);

        return round(new BigNumber(x), sd, rm);
      }

      if (!(c = x.c)) return null;
      v = c.length - 1;
      n = v * LOG_BASE + 1;

      if (v = c[v]) {

        // Subtract the number of trailing zeros of the last element.
        for (; v % 10 == 0; v /= 10, n--);

        // Add the number of digits of the first element.
        for (v = c[0]; v >= 10; v /= 10, n++);
      }

      if (sd && x.e + 1 > n) n = x.e + 1;

      return n;
    };


    /*
     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
     *
     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'
     */
    P.shiftedBy = function (k) {
      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
      return this.times('1e' + k);
    };


    /*
     *  sqrt(-n) =  N
     *  sqrt(N) =  N
     *  sqrt(-I) =  N
     *  sqrt(I) =  I
     *  sqrt(0) =  0
     *  sqrt(-0) = -0
     *
     * Return a new BigNumber whose value is the square root of the value of this BigNumber,
     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
     */
    P.squareRoot = P.sqrt = function () {
      var m, n, r, rep, t,
        x = this,
        c = x.c,
        s = x.s,
        e = x.e,
        dp = DECIMAL_PLACES + 4,
        half = new BigNumber('0.5');

      // Negative/NaN/Infinity/zero?
      if (s !== 1 || !c || !c[0]) {
        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
      }

      // Initial estimate.
      s = Math.sqrt(+valueOf(x));

      // Math.sqrt underflow/overflow?
      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
      if (s == 0 || s == 1 / 0) {
        n = coeffToString(c);
        if ((n.length + e) % 2 == 0) n += '0';
        s = Math.sqrt(+n);
        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);

        if (s == 1 / 0) {
          n = '5e' + e;
        } else {
          n = s.toExponential();
          n = n.slice(0, n.indexOf('e') + 1) + e;
        }

        r = new BigNumber(n);
      } else {
        r = new BigNumber(s + '');
      }

      // Check for zero.
      // r could be zero if MIN_EXP is changed after the this value was created.
      // This would cause a division by zero (x/t) and hence Infinity below, which would cause
      // coeffToString to throw.
      if (r.c[0]) {
        e = r.e;
        s = e + dp;
        if (s < 3) s = 0;

        // Newton-Raphson iteration.
        for (; ;) {
          t = r;
          r = half.times(t.plus(div(x, t, dp, 1)));

          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {

            // The exponent of r may here be one less than the final result exponent,
            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
            // are indexed correctly.
            if (r.e < e) --s;
            n = n.slice(s - 3, s + 1);

            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
            // iteration.
            if (n == '9999' || !rep && n == '4999') {

              // On the first iteration only, check to see if rounding up gives the
              // exact result as the nines may infinitely repeat.
              if (!rep) {
                round(t, t.e + DECIMAL_PLACES + 2, 0);

                if (t.times(t).eq(x)) {
                  r = t;
                  break;
                }
              }

              dp += 4;
              s += 4;
              rep = 1;
            } else {

              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
              // result. If not, then there are further digits and m will be truthy.
              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

                // Truncate to the first rounding digit.
                round(r, r.e + DECIMAL_PLACES + 2, 1);
                m = !r.times(r).eq(x);
              }

              break;
            }
          }
        }
      }

      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
    };


    /*
     * Return a string representing the value of this BigNumber in exponential notation and
     * rounded using ROUNDING_MODE to dp fixed decimal places.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */
    P.toExponential = function (dp, rm) {
      if (dp != null) {
        intCheck(dp, 0, MAX);
        dp++;
      }
      return format(this, dp, rm, 1);
    };


    /*
     * Return a string representing the value of this BigNumber in fixed-point notation rounding
     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
     *
     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
     * but e.g. (-0.00001).toFixed(0) is '-0'.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */
    P.toFixed = function (dp, rm) {
      if (dp != null) {
        intCheck(dp, 0, MAX);
        dp = dp + this.e + 1;
      }
      return format(this, dp, rm);
    };


    /*
     * Return a string representing the value of this BigNumber in fixed-point notation rounded
     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
     * of the format or FORMAT object (see BigNumber.set).
     *
     * The formatting object may contain some or all of the properties shown below.
     *
     * FORMAT = {
     *   prefix: '',
     *   groupSize: 3,
     *   secondaryGroupSize: 0,
     *   groupSeparator: ',',
     *   decimalSeparator: '.',
     *   fractionGroupSize: 0,
     *   fractionGroupSeparator: '\xA0',      // non-breaking space
     *   suffix: ''
     * };
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     * [format] {object} Formatting options. See FORMAT pbject above.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     * '[BigNumber Error] Argument not an object: {format}'
     */
    P.toFormat = function (dp, rm, format) {
      var str,
        x = this;

      if (format == null) {
        if (dp != null && rm && typeof rm == 'object') {
          format = rm;
          rm = null;
        } else if (dp && typeof dp == 'object') {
          format = dp;
          dp = rm = null;
        } else {
          format = FORMAT;
        }
      } else if (typeof format != 'object') {
        throw Error
          (bignumberError + 'Argument not an object: ' + format);
      }

      str = x.toFixed(dp, rm);

      if (x.c) {
        var i,
          arr = str.split('.'),
          g1 = +format.groupSize,
          g2 = +format.secondaryGroupSize,
          groupSeparator = format.groupSeparator || '',
          intPart = arr[0],
          fractionPart = arr[1],
          isNeg = x.s < 0,
          intDigits = isNeg ? intPart.slice(1) : intPart,
          len = intDigits.length;

        if (g2) i = g1, g1 = g2, g2 = i, len -= i;

        if (g1 > 0 && len > 0) {
          i = len % g1 || g1;
          intPart = intDigits.substr(0, i);
          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);
          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
          if (isNeg) intPart = '-' + intPart;
        }

        str = fractionPart
         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)
          ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'),
           '$&' + (format.fractionGroupSeparator || ''))
          : fractionPart)
         : intPart;
      }

      return (format.prefix || '') + str + (format.suffix || '');
    };


    /*
     * Return an array of two BigNumbers representing the value of this BigNumber as a simple
     * fraction with an integer numerator and an integer denominator.
     * The denominator will be a positive non-zero value less than or equal to the specified
     * maximum denominator. If a maximum denominator is not specified, the denominator will be
     * the lowest value necessary to represent the number exactly.
     *
     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.
     *
     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'
     */
    P.toFraction = function (md) {
      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,
        x = this,
        xc = x.c;

      if (md != null) {
        n = new BigNumber(md);

        // Throw if md is less than one or is not an integer, unless it is Infinity.
        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
          throw Error
            (bignumberError + 'Argument ' +
              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));
        }
      }

      if (!xc) return new BigNumber(x);

      d = new BigNumber(ONE);
      n1 = d0 = new BigNumber(ONE);
      d1 = n0 = new BigNumber(ONE);
      s = coeffToString(xc);

      // Determine initial denominator.
      // d is a power of 10 and the minimum max denominator that specifies the value exactly.
      e = d.e = s.length - x.e - 1;
      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;

      exp = MAX_EXP;
      MAX_EXP = 1 / 0;
      n = new BigNumber(s);

      // n0 = d1 = 0
      n0.c[0] = 0;

      for (; ;)  {
        q = div(n, d, 0, 1);
        d2 = d0.plus(q.times(d1));
        if (d2.comparedTo(md) == 1) break;
        d0 = d1;
        d1 = d2;
        n1 = n0.plus(q.times(d2 = n1));
        n0 = d2;
        d = n.minus(q.times(d2 = d));
        n = d2;
      }

      d2 = div(md.minus(d0), d1, 0, 1);
      n0 = n0.plus(d2.times(n1));
      d0 = d0.plus(d2.times(d1));
      n0.s = n1.s = x.s;
      e = e * 2;

      // Determine which fraction is closer to x, n0/d0 or n1/d1
      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];

      MAX_EXP = exp;

      return r;
    };


    /*
     * Return the value of this BigNumber converted to a number primitive.
     */
    P.toNumber = function () {
      return +valueOf(this);
    };


    /*
     * Return a string representing the value of this BigNumber rounded to sd significant digits
     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
     * necessary to represent the integer part of the value in fixed-point notation, then use
     * exponential notation.
     *
     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
     */
    P.toPrecision = function (sd, rm) {
      if (sd != null) intCheck(sd, 1, MAX);
      return format(this, sd, rm, 2);
    };


    /*
     * Return a string representing the value of this BigNumber in base b, or base 10 if b is
     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
     * TO_EXP_NEG, return exponential notation.
     *
     * [b] {number} Integer, 2 to ALPHABET.length inclusive.
     *
     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
     */
    P.toString = function (b) {
      var str,
        n = this,
        s = n.s,
        e = n.e;

      // Infinity or NaN?
      if (e === null) {
        if (s) {
          str = 'Infinity';
          if (s < 0) str = '-' + str;
        } else {
          str = 'NaN';
        }
      } else {
        if (b == null) {
          str = e <= TO_EXP_NEG || e >= TO_EXP_POS
           ? toExponential(coeffToString(n.c), e)
           : toFixedPoint(coeffToString(n.c), e, '0');
        } else if (b === 10 && alphabetHasNormalDecimalDigits) {
          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
          str = toFixedPoint(coeffToString(n.c), n.e, '0');
        } else {
          intCheck(b, 2, ALPHABET.length, 'Base');
          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);
        }

        if (s < 0 && n.c[0]) str = '-' + str;
      }

      return str;
    };


    /*
     * Return as toString, but do not accept a base argument, and include the minus sign for
     * negative zero.
     */
    P.valueOf = P.toJSON = function () {
      return valueOf(this);
    };


    P._isBigNumber = true;

    if (configObject != null) BigNumber.set(configObject);

    return BigNumber;
  }


  // PRIVATE HELPER FUNCTIONS

  // These functions don't need access to variables,
  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.


  function bitFloor(n) {
    var i = n | 0;
    return n > 0 || n === i ? i : i - 1;
  }


  // Return a coefficient array as a string of base 10 digits.
  function coeffToString(a) {
    var s, z,
      i = 1,
      j = a.length,
      r = a[0] + '';

    for (; i < j;) {
      s = a[i++] + '';
      z = LOG_BASE - s.length;
      for (; z--; s = '0' + s);
      r += s;
    }

    // Determine trailing zeros.
    for (j = r.length; r.charCodeAt(--j) === 48;);

    return r.slice(0, j + 1 || 1);
  }


  // Compare the value of BigNumbers x and y.
  function compare(x, y) {
    var a, b,
      xc = x.c,
      yc = y.c,
      i = x.s,
      j = y.s,
      k = x.e,
      l = y.e;

    // Either NaN?
    if (!i || !j) return null;

    a = xc && !xc[0];
    b = yc && !yc[0];

    // Either zero?
    if (a || b) return a ? b ? 0 : -j : i;

    // Signs differ?
    if (i != j) return i;

    a = i < 0;
    b = k == l;

    // Either Infinity?
    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;

    // Compare exponents.
    if (!b) return k > l ^ a ? 1 : -1;

    j = (k = xc.length) < (l = yc.length) ? k : l;

    // Compare digit by digit.
    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;

    // Compare lengths.
    return k == l ? 0 : k > l ^ a ? 1 : -1;
  }


  /*
   * Check that n is a primitive number, an integer, and in range, otherwise throw.
   */
  function intCheck(n, min, max, name) {
    if (n < min || n > max || n !== mathfloor(n)) {
      throw Error
       (bignumberError + (name || 'Argument') + (typeof n == 'number'
         ? n < min || n > max ? ' out of range: ' : ' not an integer: '
         : ' not a primitive number: ') + String(n));
    }
  }


  // Assumes finite n.
  function isOdd(n) {
    var k = n.c.length - 1;
    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
  }


  function toExponential(str, e) {
    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +
     (e < 0 ? 'e' : 'e+') + e;
  }


  function toFixedPoint(str, e, z) {
    var len, zs;

    // Negative exponent?
    if (e < 0) {

      // Prepend zeros.
      for (zs = z + '.'; ++e; zs += z);
      str = zs + str;

    // Positive exponent
    } else {
      len = str.length;

      // Append zeros.
      if (++e > len) {
        for (zs = z, e -= len; --e; zs += z);
        str += zs;
      } else if (e < len) {
        str = str.slice(0, e) + '.' + str.slice(e);
      }
    }

    return str;
  }


  // EXPORT


  BigNumber = clone();
  BigNumber['default'] = BigNumber.BigNumber = BigNumber;

  // AMD.
  if (typeof define == 'function' && define.amd) {
    define(function () { return BigNumber; });

  // Node.js and other environments that support module.exports.
  } else if (typeof module != 'undefined' && module.exports) {
    module.exports = BigNumber;

  // Browser.
  } else {
    if (!globalObject) {
      globalObject = typeof self != 'undefined' && self ? self : window;
    }

    globalObject.BigNumber = BigNumber;
  }
})(this);

},{}]},{},[7]);
